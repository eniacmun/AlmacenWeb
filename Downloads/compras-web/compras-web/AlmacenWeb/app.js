/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({

});


Ext.Loader.setPath('Ext.ux.DateTimeField','packages/DateTimeField/src/DateTimePicker.js');
Ext.Loader.setPath('Ext.ux.DateTimeField','packages/DateTimeField/src/DateTimeField.js');

Ext.application({
    SessionId: '0',
    Url: '../appAlmacenes/',
    DisableInventario: true,
    Version: '2.9.35 Liberación: 30/05/2023',
    columnaCantidad: 6,
    columnaSemana: '13',
    models: [
        'MyModel',
        'mdlProductosCompra',
        'modelProveedores',
        'mdlGeneric',
        'mdlClasificacion',
        'mdlCompras',
        'mdlInventarios',
        'mdlImpresiones',
        'mdlTraspasos',
        'mdlPedidos',
        'mdlContenidoPedidos',
        'mdlCantidadSugerida',
        'mdlTasasIEPS',
        'mdlValidacionTraspaso',
        'mdlProducciones',
        'mdlProductoProduccion',
        'mdlMateriaPrimaRecetaProduccion',
        'mdlComboProductosProducir',
        'mdlTipoPedido',
        'mdlProductosCedis',
        'mdlSubAlmacen',
        'mdlEmpleado',
        'mdlProductosVenta',
        'mdlCompraXML'
    ],
    stores: [
        'StoreCombboProducciones',
        'StoreGridMaterriaConsumida',
        'StoreGridProducciones',
        'StoreHistoricoProd',
        'StoreHistoricoCons',
        'StoreProveedores',
        'StoreGeneric',
        'StoreClasificaciones',
        'StoreComboProductos',
        'StoreGridProductos',
        'StoreComboImpuestos',
        'StoreGridProductosPrecios',
        'StoreGridCompras',
        'StoreInventarios',
        'StoreFaltantesCompras',
        'StoreFaltantesProducciones',
        'StoreExistenciasAlerta',
        'StoreNoImpresiones',
        'StoreMotivosAjuste',
        'StoreGridProductosTraspasos',
        'StoreSucursales',
        'StoreConsultaTraspasos',
        'StoreEstados',
        'StorePedidos',
        'StoreContenidoPedidos',
        'SoreProveedoresCedis',
        'storeDiasConsumo',
        'storeDiasTendencia',
        'StoreDatosPedido',
        'StoreDetallePedido',
        'StoreTiposPedido',
        'StoreFiltroClasificacion',
        'StoreCompraXML',
        'StoreTasasIEPS',
        'StoreValidacionTraspaso',
        'StoreProduccionesTras',
        'StoreUsuarios',
        'StoreEstadosProducciones',
        'StoreProductoProduccion',
        'StoreMateriaPrimaRecetaProduccion',
        'StoreTiposPedido2',
        'StoreFiltroClasificacionPadre',
        'StoreProductoIvaCambiado',
        'StoreGridCedis',
        'StoreProductosCedis',
        'StoreSubAlmacen',
        'StoreEmpleados',
        'StoreProductos',
        'StoreImportarCompraXML',
        'StoreEstadosImportarCompraXML',
        'StoreSucursalPedido',
        'StoreProveedorMateria',
        'StoreComboIE'
    ],
    views: [
        'mainViewPort',
        'DlgLogin',
        'producciones',
        'dlgHistorico',
        'panelcompras',
        'DlgPreciosAlerta',
        'DlgBusquedaCompras',
        'panelInventarios',
        'DlgFaltantesCompras',
        'tbAjustes',
        'DlgExistenciaAlerta',
        'DlgNoImpresionesAjustes',
        'DlgMotivosAjustes',
        'tbMermas',
        'tbSupervision',
        'DlgValidaPassword',
        'DlgBusquedaCompras1',
        'panelcompras1',
        'DlgConsultaTraspasos',
        'DlgPedidos',
        'DlgConsultaTraspasos1',
        'DlgConsultaPedido',
        'DlgConsultaTraspaso',
        'DlgUploadCompra',
        'DlgAsociarProducto',
        'DlgValidacionProdCompra',
        'produccionesTras',
        'DlgContenidoProduccion',
        'DlgComprasHandheld',
        'DlgExistenciaAlertaImpuestoCambiado',
        'panelCedis',
        'GridProductosCedis',
        'DlgDetalleImpresion',
        'DlgConsultaTraspasos2',
        'DlgConsultaPedido1',
        'DlgValidaCancelaPedido',
        'DlgCorreo',
        'DlgMotivosOrdenCompleta',
        'DlgAgregaProductos',
        'DlgReporteClasificaciones',
        'tbTransferencia',
        'DlgConsultaCompraXML',
        'DlgReporteUbicacion'
    ],
    name: 'almacen',

    loadData: function(request, func, funcError) {
        var oLoaders = {'login':{'peso':'1','mensaje':'Iniciando sesión, espere un momento'},
                        'productoscompra':{'peso':'0','mensaje':''},
                        'clasificaciones':{'peso':'0','mensaje':''},
                        'tipospago':{'peso':'0','mensaje':''},
                        'impuestos':{'peso':'0','mensaje':''},
                        'proveedores':{'peso':'0','mensaje':''},
                        'cargacompra':{'peso':'1','mensaje':'Cargando compra'},
                        'consultacompras':{'peso':'1','mensaje':'Consultando compras'},
                        'compras':{'peso':'1','mensaje':'Registrando Compra'},
                        'cancelarcompras':{'peso':'1','mensaje':'Cancelando compra'},
                        'validasupervisor':{'peso':'1','mensaje':'Validando Contraseña'},
                        'consultaproductosproducir':{'peso':'0','mensaje':''},
                        'consultamateriasconsumidas':{'peso':'0','mensaje':''},
                        'guardarproducciones':{'peso':'1','mensaje':'Guardando Producciones'},
                        'consultaproducciones':{'peso':'1','mensaje':'Consultando Producciones'},
                        'clasificacionesinventario':{'peso':'0','mensaje':''},
                        'consultainventario':{'peso':'1','mensaje':'Consultando Existencias'},
                        'consultafaltantes':{'peso':'1','mensaje':'Consultando Faltantes'},
                        'registraajustes':{'peso':'1','mensaje':'Guardando Ajustes'},
                        'obtienemotivos':{'peso':'0','mensaje':''},
                        'registramermas':{'peso':'1','mensaje':'Guardando Mermas'},
                        'validarpassword':{'peso':'1','mensaje':'Validando Contraseña'},
                        'registrasupervision':{'peso':'1','mensaje':'Guardando Supervisión'}
                       };


        var a = this.generaXML(request);
        var b = escape(a);

        Ext.Ajax.request({
            timeout:999999,
            url: almacen.getApplication().Url,
            useDefaultXhrHeader: false,
            method: 'POST',
            headers: {'X-Requested-With': 'XMLHttpRequest','Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'},
            params:b, // this.generaXML(request)
            success: function(response, opts) {
                oData=Ext.decode(response.responseText);
                almacen.getApplication().hideLoader(oLoaders[request.method]);
                if (oData.error){
                    if (funcError){
                        funcError.call(this, oData, opts, oData); //mandamos a llamar a la funcion que maneja el error predeterminado
                    }else{
                        //Ext.Msg.alert('',oData.error);
                        Ext.Msg.alert('',oData.msg);
                    }
                }else{
                    if (oData.isInfo){
                        if (oData.msg > " ")
                            if(request.method !== 'finalizapedidos'){ // evitamos que se meustre el mensaje en este request
                                if(request.method == "guardarpedidos"){
                                    // se limpia mensaje de oracle
                                    var a = oData.msg;
                                    var idx1 = a.indexOf("ORA-");
                                    if(idx1 > -1){ // se verifica que sea un error de oracle
                                        idx1 = a.indexOf(":") +2;
                                        a = a.substring(idx1);
                                        var idx2 = a.indexOf("ORA")-1;
                                        if(idx2 > -1){
                                            a = a.substring(0, idx2);
                                        }
                                    }
                                    oData.msg = a;
                                }
                                Ext.Msg.alert('',oData.msg);
                            }
                    }
                    func.call(this, oData);
                }
            },
            failure: function(response, opts) {
                almacen.getApplication().hideLoader(oLoaders[request.method]);

                if (funcError){
                    funcError.call(this, response, opts);
                }else{
                    almacen.getApplication().Reconectar(almacen.getApplication().currentSession,
                                                        function(obj,res){
                                                            Ext.Msg.alert('',"Se ha restablecido la conexión con el servidor");
                                                        });

                    ///Ext.Msg.alert('Aviso','No se puede conectar al Servidor');
                }
            }

        });
        almacen.getApplication().showLoader(oLoaders[request.method]);
    },

    generaXML: function(request) {
                  var xmlinfo="";
                        xmlinfo="<request><method><![CDATA["+request.method+"]]></method><params>";
                        for(var jj=0;jj<request.params.length;jj++){
                            xmlinfo=xmlinfo+"<param><name><![CDATA["+request.params[jj].name+"]]></name><value><![CDATA["+request.params[jj].value+"]]></value></param>";
                        }
                        xmlinfo=xmlinfo+"</params></request>";
                        return xmlinfo;
    },

    showLoader: function(oData) {
        if (window.appLoadMask){
            window.appLoadMask.hide();
         }
        if (oData){
            var peso = parseInt(oData.peso);
            if (peso==1){

                window.appLoadMask=new Ext.LoadMask({
                    msg    : oData.mensaje,
                    target : Ext.ComponentManager.get("appViewPort")
                });
                window.appLoadMask.getEl().dom.style.zIndex = '99999';

                window.appLoadMask.show();
                //window.appLoadMask.toFront(true);

            }else{
                Ext.ComponentManager.get("aLoader").setVisible(true);

            }

        }


    },

    hideLoader: function(oData) {
              if (oData){
                        var peso = parseInt(oData.peso);
                        if (peso==1){
                            window.setTimeout(function(){
                                if (window.appLoadMask){
                                window.appLoadMask.hide();
                             }

                            }, 2000);

                        }else{
                            window.setTimeout(function(){
                            Ext.ComponentManager.get("aLoader").setVisible(false);
                            }, 2000);
                        }

                }

    },

    Reconectar: function(oDispositivo, funcCall) {
        //almacen.getApplication().hideLoader({'peso':'1','mensaje':'La conexión con la caja se ha perdido, intentando reconectar'});;
        almacen.getApplication().showLoader({'peso':'1','mensaje':'La conexión con la caja se ha perdido, intentando reconectar, espere por favor...'});
        var request = new Object(); request.method="reconectar"; request.params=[];
                       request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                       request.params.push({"name":"dispositivo","value":Ext.encode(oDispositivo)});
                       almacen.getApplication().loadData(request,function(response){
                            almacen.getApplication().hideLoader({'peso':'1','mensaje':'La conexión con la caja se ha perdido, intentando reconectar, espere por favor...'});
                           funcCall.call(this, oDispositivo);//llamamos al método para ejecutar despúes de la reconexión


                       }, function(){
                           window.setTimeout(function(){
                           ///almacen.getApplication().hideLoader({'peso':'1','mensaje':'La conexión con la caja se ha perdido, intentando reconectar'});;
                           almacen.getApplication().Reconectar(oDispositivo, funcCall);
                           },10000);

                                    }
                                                        );
    },

    downloadCompra: function(idCompra, tipocompra) {
        console.log(almacen.getApplication().currentSession.imprimeCompraPDF);
        if (!almacen.getApplication().currentSession.imprimeCompraPDF) return;
        idDownload = "download";
        if (!document.getElementById(idDownload)){
            var ifrm = document.createElement("IFRAME");
            ifrm.style.width = 10+"px";
            ifrm.style.height = 10+"px";
            ifrm.style.visibility = "hidden";
            ifrm.id="hdn";
            ifrm.name="hdn";
            document.getElementsByTagName('body')[0].appendChild(ifrm);
            var f = document.createElement("form");
            f.setAttribute('method',"get");
            f.setAttribute('target',"hdn");
            f.setAttribute('action',almacen.getApplication().Url);
            f.setAttribute('id',idDownload);
            var i = document.createElement("input"); //input element, text
            i.setAttribute('type',"hidden");
            i.setAttribute('name',"foliocompra");
            i.id ="foliocompra";
            f.appendChild(i);

            var t = document.createElement("input"); //input element, text
            t.setAttribute('type',"hidden");
            t.setAttribute('name',"tipocompra");
            t.id ="tipocompra";

            f.appendChild(t);

            document.getElementsByTagName('body')[0].appendChild(f);
            console.log("esto estas");
            console.log(f);
        }
        document.getElementById("foliocompra").value = (idCompra);
        document.getElementById("tipocompra").value = (tipocompra);
        document.getElementById(idDownload).submit();
    },

    downloadPedido: function(filepathPedido, opcionImpresion) {
        idDownload = "downloadPedido";
        if (!document.getElementById(idDownload)){
            var ifrm = document.createElement("IFRAME");
            ifrm.style.width = 10+"px";
            ifrm.style.height = 10+"px";
            ifrm.style.visibility = "hidden";
            ifrm.id="hdn";
            ifrm.name="hdn";
            document.getElementsByTagName('body')[0].appendChild(ifrm);
            var f = document.createElement("form");
            f.setAttribute('method',"get");
            f.setAttribute('target',"hdn");
            f.setAttribute('action',almacen.getApplication().Url);
            f.setAttribute('id',idDownload);
            var i = document.createElement("input"); //input element, text
            i.setAttribute('type',"hidden");
            i.setAttribute('name',"filepathPedido");
            i.id ="filepathPedido";
            f.appendChild(i);

            var t = document.createElement("input"); //input element, text
            t.setAttribute('type',"hidden");
            t.setAttribute('name',"opcionImpresion");
            t.id ="opcionImpresion";

            f.appendChild(t);

            document.getElementsByTagName('body')[0].appendChild(f);

            console.log("estas en lo de pedidos");
            console.log(f);
        }
        console.log("filepathPedido");
        console.log(filepathPedido);
        document.getElementById("filepathPedido").value = (filepathPedido);//(idCompra);
        document.getElementById("opcionImpresion").value = (opcionImpresion);
        document.getElementById(idDownload).submit();//1576523379407al
    },

    uploadCompra: function() {

    },

    calculaIEPS: function(tasa, Cantidad, Costo, pctjeDescuento, pctjeImpuesto) {
        if (!tasa) return 0.0;
        /****Obtiene el importe del IEPS generado en base a la tasa seleccionada y a los factores de calculo
                 * @param tasa tasa seleccionada
                 * @param Cantidad la cantidad de los productos
                 * @param Costo el costo unitario
                 * @param pctjeDescuento el porcentaje de descuento del producto asociado
                 * @param pctjeImpuesto el porcentaje de impuesto del producto asociado
                 * @return El Importe del IEPS en base al tipo de tasa
                 * los tipos de tasas son las siguientes
                 * 1: Tasa expresada en porcentaje del monto subtotal ((Cantidad * Costo Unitario) - Descuento) + PorcentajeIEPS (La tasa va antes de IVA y se toma como base para calculo de IVA)
                 * 2: Tasa expresada en monto multiplicada por la cantidad  ((Cantidad * Costo Unitario) - Descuento) + (Cantidad * MontoIEPS) (La tasa va antes de IVA y se toma como base para calculo de IVA)
                 * 3: Tasa expresada en monto multiplicada por la cantidad  ((Cantidad * Costo Unitario) - Descuento) + (Cantidad * MontoIEPS) (La tasa va después de IVA no se tima como base para calculo de IVA) ej Gasolina
        	 */
        retval = 0.0;
        Subtotal = 0.0;
        Subtotal = (Cantidad * Costo) - ((Cantidad * Costo) * (pctjeDescuento / 100));
        console.log("Subtotal con Descuento");
        console.log(Subtotal);

        factorIeps = almacen.getApplication().calculafactorNegativoIEPS(tasa, Cantidad, Costo, pctjeDescuento, pctjeImpuesto) * -1;

        console.log("factorIeps");
        console.log(factorIeps);

        if (tasa.TipoTasa == (3)) {
            Subtotal = (Cantidad * Costo);
            retval = Subtotal * (factorIeps / 100);
        }
        //Caso 1 el importe se calcula en base a la cantidad por el importe a gravar, Regla de Bebidas Saborizadas se cobra 1 peso por litro
        if (tasa.TipoTasa == (1)) {
            Subtotal = (Cantidad * Costo);
            //retval = Subtotal *  (tasa.ImportePctje / 100); //Caso 2 el importe se calcula en base al subtotal por el porcentaje, Regla de Tasa de IEPS por porcentaje
            retval = Subtotal * (factorIeps / 100);
        }
        //Caso 2 el importe se calcula en base al subtotal por el porcentaje, Regla de Tasa de IEPS por porcentaje
        if (tasa.TipoTasa == (2)) {
            Subtotal = (Cantidad * Costo);
            retval = Subtotal * (factorIeps / 100);
        }

        //Caso 3 el importe se calcula en base al subtotal + IVA por el porcentaje, Regla de Tasa de IEPS por porcentaje
        return retval;
    },

    calculafactorNegativoIEPS: function(tasa, Cantidad, Costo, pctjeDescuento, pctjeImpuesto) {
        retval = 0.0;

        // 04/03/2020 Se quita todo lo referente Cantidad, pues no es necesario para calcular los factores, se deja su codigo comentado
        //Subtotal = 0.0;
        //Subtotal = (Cantidad * Costo) - ((Cantidad * Costo) * (pctjeDescuento / 100));

        if (tasa.TipoTasa==(3)){
            /*Subtotal=Cantidad*Costo;
            retval = (((Cantidad * tasa.ImportePctje) / Subtotal) * 100) * -1; //Caso 1 se saca el proporcional en base al importe antes de iva
            retval = retval - (retval * (pctjeDescuento / 100));*/

            // Se sobreescribe para que no se use la cantidad, pues el calculo no depende de esta.
            retval = tasa.ImportePctje / Costo * 100 * -1;
            retval = retval - (retval * (pctjeDescuento / 100));
        }
        if (tasa.TipoTasa==(1)){ // quita el porcentaje de descuento al porcentaje de ieps
            PorcentajeCorregido = tasa.ImportePctje - (tasa.ImportePctje * (pctjeDescuento / 100));
            retval = PorcentajeCorregido * -1; //Caso 2 el importe se calcula en base al subtotal por el porcentaje, Regla de Tasa de IEPS por porcentaje
        }

        if (tasa.TipoTasa==(2)){

            /*retval = 0.0;//En este caso no se puede asignar el costo ya que el importe va despues de IVA
            ImporteCalcular = ((Cantidad * tasa.ImportePctje));// - ((Cantidad * tasa.ImportePctje) * (pctjeDescuento / 100)));
            Subtotal = (Cantidad * Costo);
            retval = (((ImporteCalcular-(ImporteCalcular*(pctjeImpuesto/100))) / Subtotal ) * 100) * -1; //Caso 3 el importe se calcula en base a la cantidad por el importe a gravar, Regla de Gasolinas se cobra X pesos por litro pero ya con impuestos, por lo que hay que quitar Impuestos al porcentaje a gravar.
            retval = retval - (retval * (pctjeDescuento / 100));*/

            // Se sobreescribe para que no se use la cantidad, pues el calculo no depende de esta.
            retval = tasa.ImportePctje * (1 - (pctjeImpuesto/100)) / Costo * 100 * -1;
            retval = retval - (retval * (pctjeDescuento / 100));
        }

        return retval;
    },

    ObtieneFormatoDecimalesInventario: function(numero) {
        var decimales="";
        for (i=0; i < almacen.getApplication().currentSession.decimalesInventario; i++){
             decimales+="0";
        }
        decimales="0."+decimales;
        return Ext.util.Format.number(numero, decimales);
    },

    getToday: function() {
        Number.prototype.padLeft = function(base,chr){
                    var  len = (String(base || 10).length - String(this).length)+1;
                    return len > 0? new Array(len).join(chr || '0')+this : this;
                };

                 var d = new Date,
                    hours = d.getHours() % 12,
                  	hours = hours ? hours : 12,
                    dformat = [d.getDate().padLeft(),
                               (d.getMonth()+1).padLeft(),
                               d.getFullYear()].join('/') +' ' +
                    [hours.padLeft(),
                     d.getMinutes().padLeft(),
                     d.getSeconds().padLeft()].join(':');

                var am_pm = d.getHours() >= 12 ? " PM" : " AM";
                return dformat.concat(am_pm);
    },

    launch: function() {
        Ext.create('almacen.view.mainViewPort');
        var link = document.createElement('link');
                link.type = 'image/ico';
                link.rel = 'icon';
                link.href = 'resources/main.ico';  // I like putting it in my /images directory
                document.getElementsByTagName('head')[0].appendChild(link);
        Ext.getDoc().dom.title = 'Compras Web -- Grupo Telnet '+almacen.getApplication().Version;
    },

    obtenerSucursal: function(cadena) {
        /*
            Obtiene el nombre y clave de la sucursal manejando la siguiente cadena:
            Sucursal/ClaveSucursal
            Ejemplo: fast food/5.0 -> {sucursal: FAST FOOD, clavesucursal : 5}
        */
        var sucursal_name = (cadena[0]+cadena.slice(1, cadena.indexOf(";"))).toUpperCase();
        var extra_data = cadena.slice( (cadena.indexOf(";")+1),(cadena.indexOf("&") -1 )); // se obtiene los datos extras, se quita la ultima coma
        var clavesucursal = parseInt(cadena.slice((cadena.indexOf("&")+1)),10); // se obtiene la clave sucursal

        return {sucursal: sucursal_name, clavesucursal: clavesucursal, extra_data: extra_data};
    },

    redondeo: function(valor) {
        return (Math.round(valor * 100)/100);
    },

    opcionImpresion: function(funcion) {
        // recibe la funcion que se tiene que ejecutar despues de validar el tipo de impresion
        // esta funcion solo tiene un parametro,
        var winDelete =  Ext.create('Ext.window.Window', {
            title: 'Seleccione el método de impresión',
            height: 150,
            width: 500,
            layout: 'fit',
            modal:true,
            bodyPadding: 20,
            border: 2,
            buttons: [
                {
                    text: 'CONFIRMAR',
                    scale: 'medium',
                    cls: 'btn-delete-yes',
                    listeners: {
                        click: function() {

                            var radio1 = Ext.getCmp('radio1'),

                            radio2 = Ext.getCmp('radio2'),
                            radio3 = Ext.getCmp('radio3');
                            radio4 = Ext.getCmp('radio4');

                            //if L is selected, change to M
                            if (radio1.getValue()) {
                                funcion(0);
                                winDelete.close();
                                return;
                            }

                            //if XL is selected, change to L
                            if (radio2.getValue()) {
                                funcion(1);
                                winDelete.close();
                                return;
                            }

                            //if XL is selected, change to L
                            if (radio3.getValue()) {
                                funcion(2);
                                winDelete.close();
                                return;
                            }

                            // radio 4
                            if (radio4.getValue()) {
                                funcion(-1);
                                winDelete.close();
                                return;
                            }


                        }
                    }
                }, '->',
                {
                    text: 'CANCELAR',
                    scale: 'medium',
                    cls: 'btn-delete-no',
                    listeners: {
                       click: function() {
                           winDelete.close();
                       }
                    }
                }
            ],
            items: [
                    {
                    xtype      : 'fieldcontainer',
                    fieldLabel : '',
                    defaultType: 'radiofield',
                    defaults: {
                        flex: 1
                    },
                    layout: 'hbox',
                    items: [
                        {
                            boxLabel  : 'PDF',
                            checked: true,
                            name      : 'size',
                            inputValue: '0',
                            id        : 'radio1'
                        }, {
                            boxLabel  : 'EXCEL',
                            name      : 'size',
                            inputValue: 'l',
                            id        : 'radio2'
                        }, {
                            boxLabel  : 'PDF y EXCEL',
                            name      : 'size',
                            inputValue: '2',
                            id        : 'radio3'
                        }, {
                            boxLabel  : 'Sin Impresión',
                            name      : 'size',
                            inputValue: '3',
                            id        : 'radio4'
                        }
                    ]
                }
            ]
        }).show();
    },

    pedidoCedi: function() {
        if(typeof window.currentSelectedProveedor !== 'undefined'){ // Si es undefined, el Cedis levanta el pedido.
            // Pedido Levantado por la sucursal
            if(window.currentSelectedProveedor.data.esCedi){
                // Pedido a Cedis
                return true;
            }else{
                // Pedido a Proveedor
                return false;
            }
        }else{
            // Pedido a Cedis que levanta el Cedis
            return true;
        }
    },

    calculaImportesTotales: function(Iva, Descuento, PrecioU, Cantidad, tasa) {
        /*console.log("Iva");
        console.log(Iva);
        console.log("Descuento");
        console.log(Descuento);
        console.log("PrecioU");
        console.log(PrecioU);
        console.log("Cantidad");
        console.log(Cantidad);
        console.log("tasa");
        console.log(tasa);*/
        // se lee iva y eps, junto con descuento
        var Total = 0.0;
        var SubTotal = 0.0;
        var IvaAplicado = 0.0;
        var DescuentoAplicado = 0.0;

        SubTotal = (Cantidad  * PrecioU);

        console.log("SubTotal");
        console.log(SubTotal);

        DescuentoAplicado = (SubTotal * (Descuento / 100));

        console.log("DescuentoAplicado");
        console.log(DescuentoAplicado);

        IEPS = 0.0;
        if (tasa){
            IEPS = almacen.getApplication().calculaIEPS(tasa, Cantidad, PrecioU, Descuento, Iva);
            SubTotal += IEPS;
        }

        IvaAplicado = ((SubTotal - DescuentoAplicado) * (Iva / 100));

        console.log("IvaAplicado");
        console.log(IvaAplicado);

        Total = (SubTotal - DescuentoAplicado) + IvaAplicado;

        console.log("TOTAL");
        console.log(Total);


        /*El siguiente codigo calcula el TOTAL sin depender de la cantidad en el calculo del IEPS, para posteriormente
        calcular la cantidad con solo el total*/

        // El total es equivalente a: ( IEPS + (Cantidad * PrecioU) * ( 1 - Descuento/100)) * (1 + Iva/100).
        // o tambien, factorizando el ieps:
        //var factorIeps = almacen.getApplication().calculafactorNegativoIEPS(tasa, null, PrecioU, Descuento, Iva) * -1;
        //var resTotal = ( Cantidad * PrecioU * ( (factorIeps/100) + (1 - Descuento/100) ) ) * ( 1 + Iva/100);

        //console.log("resTotal");
        //console.log(resTotal);

        // De esta formula, se despeja la cantidad:
        // var cantidad = ((Total / (1+Iva/100) - IEPS) / (1 - Descuento/100)) / PrecioU;

        // factorizando ieps
        // var cantidadS = ( (  ( Total / (1+Iva/100) )  / (factorIeps/100 + 1 - Descuento/100)  )   /  PrecioU  );

        //console.log("Cantidad");
        //console.log(Cantidad);

        //console.log("cantidadS");
        //console.log(cantidadS);

        return (Math.round(Total * 100) / 100);
    },

    calculaCantidadSucursal: function(Iva, Descuento, PrecioU, Cantidad, tasa) {
        console.log("Iva");
        console.log(Iva);
        console.log("Descuento");
        console.log(Descuento);
        console.log("PrecioU");
        console.log(PrecioU);
        console.log("Cantidad");
        console.log(Cantidad);
        console.log("tasa");
        console.log(tasa);

        // se lee iva y eps, junto con descuento
        var Total = 0.0;
        var SubTotal = 0.0;
        var IvaAplicado = 0.0;
        var DescuentoAplicado = 0.0;

        Total =

        SubTotal = (Cantidad  * PrecioU);

        DescuentoAplicado = (SubTotal * (Descuento / 100));
        if (tasa){
            IEPS = almacen.getApplication().calculaIEPS(tasa, Cantidad, PrecioU, Descuento, Iva);
            SubTotal += IEPS;
        }

        IvaAplicado = ((SubTotal - DescuentoAplicado) * (Iva / 100));

        Total = (SubTotal - DescuentoAplicado) + IvaAplicado;

        return (Math.round(Total * 100) / 100);
    },

    descargarArchivos: function(archivos_por_imprimir, opcionImpresion) {
        /**
        * @filepath: Rutas de los archivos a descargar
        * @opcioImpresion: 0 - PDF, 1 - Excel, 2 - Ambos
        */

        console.log("archivos_por_imprimir");
        console.log(archivos_por_imprimir);

        console.log("Tipo Impresión: " + opcionImpresion);

        if(archivos_por_imprimir.length > 0){
            if(opcionImpresion != -1){

                if(opcionImpresion === 2){ //pdf
                    console.log("Impresion de PDF y Excel");
                    console.log(archivos_por_imprimir);

                    var i = 0;                     //  set your counter to 1

                    var myLoopBoth = function(){           //  create a loop function
                        setTimeout(function () {    //  call a 3s setTimeout when the loop is called
                            var requestprint = new Object(); requestprint.method="printguardapedidos"; requestprint.params=[];
                            requestprint.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                            var curentFilepath = archivos_por_imprimir[i];
                            var str = curentFilepath;
                            var rootPdf = str.substring(0,  str.indexOf(","));
                            console.log("rootPdf");
                            console.log(rootPdf);
                            var rootXls = str.substring(str.indexOf(",")+1);
                            console.log("rootXls");
                            console.log(rootXls);

                            var paths = [];

                            paths.push(rootPdf);paths.push(rootXls);

                            var ii = 0;

                            var myInternalLoop = function(){
                                setTimeout(function(){
                                    var requestprint = new Object(); requestprint.method="printguardapedidos"; requestprint.params=[];
                                    requestprint.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                                    var currentImpresion = paths[ii];
                                    var tipoimpresion = ii;
                                    almacen.getApplication().loadData(requestprint,function(response2){
                                        console.log("imprimiendo: " +currentImpresion);
                                        console.log("tipoimpresion: " +tipoimpresion);
                                        almacen.getApplication().downloadPedido(currentImpresion, tipoimpresion);
                                    }, function(response){
                                        console.log("Error al realizar la impresion. Se muestra el respone");
                                        console.log(response);
                                    });

                                    ii++;

                                    if(ii < paths.length){
                                        myInternalLoop();
                                    }
                                }, 2000);
                            };

                            myInternalLoop();

                            i++;                     //  increment the counter

                            if (i < archivos_por_imprimir.length) {            //  if the counter < 10, call the loop function
                                myLoopBoth();             //  ..  again which will trigger another
                            }                        //  ..  setTimeout()
                        }, 5000);
                    };

                    myLoopBoth();                      //  start the loop

                }else{
                    console.log("IMPRESION DE SOLO UN TIPO");
                    console.log(archivos_por_imprimir);

                    var j = 0;                     //  set your counter to 1

                    var myLoop = function(){           //  create a loop function
                        setTimeout(function () {    //  call a 3s setTimeout when the loop is called
                            var requestprint = new Object(); requestprint.method="printguardapedidos"; requestprint.params=[];
                            requestprint.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                            var curentFilepath = archivos_por_imprimir[j];
                            almacen.getApplication().loadData(requestprint,function(response2){
                                console.log("imprimiendo: " + curentFilepath);
                                almacen.getApplication().downloadPedido(curentFilepath, opcionImpresion);
                                Ext.toast({
                                    html:    "Pedido impreso de forma correcta.",
                                    //title: 'My Title',
                                    //width: 100,
                                    align: 'br'
                                });
                            },function(response){
                                console.log("Error al realizar la impresion. Se muestra el respone");
                                console.log(response);
                            });

                            j++;                     //  increment the counter

                            if (j < archivos_por_imprimir.length) {            //  if the counter < 10, call the loop function
                                myLoop();             //  ..  again which will trigger another
                            }                        //  ..  setTimeout()
                        }, 5000);
                    };

                    myLoop();                      //  start the loop

                }

            }
        }
    }

});
