/*
 * File: app/view/DlgConsultaPedido1.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.DlgConsultaPedido1', {
    extend: 'Ext.window.Window',
    alias: 'widget.dlgconsultapedido1',

    requires: [
        'almacen.view.DlgConsultaPedidoViewModel2',
        'almacen.view.DlgConsultaPedidoViewController2',
        'Ext.grid.Panel',
        'Ext.grid.column.Number',
        'Ext.form.field.Number',
        'Ext.form.field.ComboBox',
        'Ext.grid.View',
        'Ext.grid.plugin.CellEditing',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.Fill'
    ],

    controller: 'dlgconsultapedido1',
    viewModel: {
        type: 'dlgconsultapedido1'
    },
    height: 601,
    width: 920,
    layout: 'border',
    title: 'Datos Pedido',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'gridpanel',
            region: 'center',
            id: 'gridProductos2',
            title: 'Productos',
            store: 'StoreDetallePedido',
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'claveproductoCedi',
                    hideable: false,
                    lockable: false,
                    locked: true,
                    text: 'Clave'
                },
                {
                    xtype: 'gridcolumn',
                    width: 185,
                    dataIndex: 'NombreProducto',
                    hideable: false,
                    lockable: false,
                    locked: true,
                    text: 'Producto'
                },
                {
                    xtype: 'gridcolumn',
                    draggable: false,
                    id: 'cantidadSucursal',
                    width: 134,
                    dataIndex: 'CantidadSucursal',
                    hideable: false,
                    text: 'Cantidad<br>Sucursal'
                },
                {
                    xtype: 'gridcolumn',
                    draggable: false,
                    id: 'cantidadOriginal',
                    width: 146,
                    defaultWidth: 120,
                    dataIndex: 'CantidadOriginalSucursal',
                    text: 'Cantidad<br>Original'
                },
                {
                    xtype: 'numbercolumn',
                    renderer: function(value, metaData, record, valueIndex, colIndex, store, view) {
                        value = value.toFixed(5);

                        if (record.data.CantidadOriginalCedi!=record.data.CantidadCedi) {
                            metaData.style = "background-color:yellow;";
                            var newvalue;
                            newvalue = "<span style='color:red;font-weight:bold;;background-color:yellow;' >"+value+"</span>";
                        }else {
                            newvalue = value;
                        }
                        return newvalue;

                    },
                    draggable: false,
                    id: 'cantidadCedi',
                    width: 118,
                    dataIndex: 'CantidadCedi',
                    text: 'Cantidad<br>Cedi',
                    format: '0,000.00000',
                    editor: {
                        xtype: 'numberfield',
                        id: 'editorCantidadCedi',
                        decimalPrecision: 5,
                        minValue: 0,
                        listeners: {
                            beforerender: 'onNumberfieldBeforeRender',
                            change: {
                                fn: 'onEditorCantidadCediChange',
                                scope: 'controller'
                            }
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    draggable: false,
                    id: 'cantidadOriginalCedi',
                    width: 118,
                    dataIndex: 'CantidadOriginalCedi',
                    text: 'Cantidad Original<br>Cedi'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return Ext.util.Format.currency(value);
                    },
                    id: 'importeUnitario',
                    dataIndex: 'Costo',
                    text: 'Importe<br>Unitario',
                    editor: {
                        xtype: 'numberfield',
                        minValue: 0,
                        listeners: {
                            change: {
                                fn: 'onNumberfieldChange',
                                scope: 'controller'
                            }
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return Ext.util.Format.number(value , '0.##%');
                    },
                    id: 'porcentajeDescuento',
                    dataIndex: 'Descuento',
                    text: 'Descuento',
                    editor: {
                        xtype: 'numberfield',
                        selectOnFocus: true,
                        decimalPrecision: 4,
                        maxValue: 100,
                        minValue: 0,
                        listeners: {
                            change: {
                                fn: 'onPorcentajeDescuentoChange',
                                scope: 'controller'
                            }
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {

                        var editor = this.columns[colIndex].getEditor();
                        var store = editor.getStore();
                        var rec = store.findRecord("Id", value);

                        if (rec){
                            return rec.get("Descripcion");
                        }else{
                            return value;
                        }
                    },
                    id: 'tasaIEPS',
                    dataIndex: 'idTasa',
                    text: 'IEPS',
                    editor: {
                        xtype: 'combobox',
                        id: 'cmbIepsPedido2',
                        editable: false,
                        displayField: 'Descripcion',
                        store: 'StoreTasasIEPS',
                        valueField: 'Id',
                        listeners: {
                            select: {
                                fn: 'onCmbIepsPedido2Select',
                                scope: 'controller'
                            }
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var editor = this.columns[colIndex].getEditor();
                        var store = editor.getStore();
                        var rec = store.findRecord("value", value);

                        if (rec){
                            return rec.get("label");
                        }else{
                            return value;
                        }
                    },
                    id: 'tasaImpuesto',
                    dataIndex: 'Impuesto',
                    text: 'Impuesto',
                    editor: {
                        xtype: 'combobox',
                        editable: false,
                        displayField: 'label',
                        store: 'StoreComboImpuestos',
                        valueField: 'value',
                        listeners: {
                            select: {
                                fn: 'onComboboxSelect',
                                scope: 'controller'
                            }
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        value = almacen.getApplication().redondeo(value) ; // se aplica redondeo
                        return Ext.util.Format.currency(value);
                    },
                    id: 'importeTotal',
                    dataIndex: 'Importe',
                    formatter: '',
                    hideable: false,
                    lockable: false,
                    locked: true,
                    text: 'Importe',
                    editor: {
                        xtype: 'numberfield',
                        minValue: 0,
                        listeners: {
                            change: {
                                fn: 'onImporteTotalChange',
                                scope: 'controller'
                            }
                        }
                    }
                }
            ],
            listeners: {
                afterrender: {
                    fn: 'onGridProductosAfterRender',
                    scope: 'controller'
                },
                beforerender: {
                    fn: 'onGridProductos2BeforeRender',
                    scope: 'controller'
                }
            },
            plugins: [
                {
                    ptype: 'cellediting',
                    listeners: {
                        edit: 'onCellEditingEdit',
                        beforeedit: 'onCellEditingBeforeEdit'
                    }
                }
            ]
        },
        {
            xtype: 'gridpanel',
            region: 'north',
            height: 211,
            id: 'gridPedido2',
            title: '',
            hideHeaders: true,
            store: 'StoreDatosPedido',
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 273,
                    dataIndex: 'label',
                    text: '.'
                },
                {
                    xtype: 'gridcolumn',
                    width: 345,
                    dataIndex: 'value',
                    text: '.'
                }
            ],
            listeners: {
                afterrender: {
                    fn: 'onGridPedidoAfterRender',
                    scope: 'controller'
                }
            }
        }
    ],
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            items: [
                {
                    xtype: 'button',
                    id: 'btnEnviaOrden',
                    text: 'Envio de Correo',
                    listeners: {
                        click: {
                            fn: 'EnviaOrden',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    disabled: true,
                    id: 'btnCancelaPedido2',
                    icon: 'resources/cancel-icon.png',
                    text: 'Cancelar Pedido',
                    listeners: {
                        click: {
                            fn: 'CallCancelaPedido',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'button',
                    disabled: true,
                    id: 'btnRecibePedido2',
                    icon: 'resources/receive.png',
                    text: 'Recibir',
                    listeners: {
                        click: {
                            fn: 'RecibePedido',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'button',
                    disabled: true,
                    id: 'btnFinalizaPedido2',
                    icon: 'resources/tick.png',
                    text: 'Finalizar',
                    listeners: {
                        click: {
                            fn: 'FinalizaPedido',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'button',
                    disabled: true,
                    id: 'btnModificarPedido2',
                    icon: 'resources/pencil.png',
                    text: 'Modificar',
                    listeners: {
                        click: {
                            fn: 'ModificaPedido2',
                            scope: 'controller'
                        }
                    }
                }
            ]
        }
    ],

    onNumberfieldBeforeRender: function(component, eOpts) {
        var rec = window.currentPedido.pedidos[0];
        //nsole.log("rec");console.log(rec);
        var estado = parseInt(rec.Claveestado, 10);
        //nsole.log("estado");console.log(estado);

        if(estado === 0 || estado == 1){

        }else{
            component.setDisabled(true);
        }

    },

    onCellEditingEdit: function(editor, context, eOpts) {
        // se crea la variable global que guarda los registros
        if(typeof window.modificados == 'undefined'){
            window.modificados = {};
        }

        console.log("window.modificados before");console.log(window.modificados);

        var record = context.record;

        //var fields = record.getFields();

        console.log("record");console.log(record);
        //console.log("fields");console.log(fields);

        //var last_value = context.originalValue;

        //var originalValue = record.get("originalValue");


        //console.log("context");
        //console.log(context);

        //console.log("context.field");
        //console.log(context.field);


        // Se modifica para que en lugar de tomar el indice (context.colIdx == 4), cheque el campo
        //if (context.field == "CantidadCedi"){ // columna del cedis
        //console.log(Object.keys(record.modified).length);
        if(record.modified !== null){
            if(Object.keys(record.modified).length > 0){
                console.log("claveproducto");
                console.log(record.get("claveproducto"));
                window.modificados[record.get("claveproducto")] = record;
            }else{
                if (record.get("claveproducto") in window.modificados) {
                    delete window.modificados[record.get("claveproducto")];
                }
            }
        }

        /*  var valor = context.value;

            console.log("originalValue: " + originalValue);
            console.log("valor: " + valor);

            if(valor === null){
                valor = 0;
                console.log("Sobreescribienbdo valor: " + valor);
            }

            if (originalValue == valor) {
                // se quita de los modificados
                if (record.get("claveproducto") in window.modificados) {
                    delete window.modificados[record.get("claveproducto")];
                }
                //valor = item.CantidadCedi;
            } else {
                console.log("henos aqui");
                // el valor se modifica y se guarda el objeto modificado
                window.modificados[record.get("claveproducto")] = record; // valor);
            }
        */
        console.log("window.modificados after");console.log(window.modificados);

        /*var ImporteTotalPedido = 0.0; // se calculara al final de la edicion
            var CantidadSucursal = 0.0;
            var ImporteTotal = 0.0;

            if(!record.get("pedidoCedi")){ // calculo para proveedores, ya viene con proporcion aplicada
                CantidadSucursal = valor;
            }else{ // calculo para Cedis
                CantidadSucursal = valor / record.get("Proporcion");

            }

            ImporteTotal = CantidadSucursal * record.get("Costo");

            ImporteTotal = almacen.getApplication().redondeo(ImporteTotal);

            // se actualizan los registros en el record
            record.beginEdit();
            record.set("Importe", ImporteTotal);
            record.set("CantidadSucursal", CantidadSucursal);
            record.endEdit();
            record.commit();*/

        //}

        // Calculo del Importe Total del Pedido
        var ImporteTotalPedido = 0.0;

        var gridProductos = Ext.ComponentMgr.get("gridProductos2");

        gridProductos.getStore().each(function(rec){
            ImporteTotalPedido += rec.get("Importe");
        });


        console.log("ImporteTotalPedido: " + ImporteTotalPedido);

        var gridDetalles = Ext.ComponentMgr.get("gridPedido2");

        // Se actualiza el grid de datos del pedido con el valor del total de pedido actual
        total_record = gridDetalles.getStore().getAt(4); // indice de la fila total

        total_record.beginEdit();
        total_record.set("value", Ext.util.Format.currency(ImporteTotalPedido));
        total_record.endEdit();
        total_record.commit();
    },

    onCellEditingBeforeEdit: function(editor, context, eOpts) {
        var rec = window.currentPedido.pedidos[0];

        var enable = false;

        // se habilita la modificacion si el cliente tiene el pedido
        if(typeof rec.claveusuarioAparta === 'undefined' || rec.claveusuarioAparta === 0 || rec.claveusuarioAparta == -1 || rec.claveusuarioAparta == almacen.getApplication().ClaveUsuario){
            // se habilita solo si es el cedis o pedido de proveedor o tiene activa la configuracion de edicion
            var claveSucursalDestino = parseInt(rec.claveCedi, 10);
            var activar=almacen.getApplication().currentSession.habilitaModificaPedido;
            if(almacen.getApplication().currentSession.claveSucursal == claveSucursalDestino || !rec.pedidoCedi || (activar && rec.Estado=="APROBADO")){
                enable = true;
            }
        }

        return enable;
    }

});