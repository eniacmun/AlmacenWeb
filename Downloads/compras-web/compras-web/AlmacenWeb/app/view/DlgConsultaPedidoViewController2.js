/*
 * File: app/view/DlgConsultaPedidoViewController2.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.DlgConsultaPedidoViewController2', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.dlgconsultapedido1',

    modificarPedido: function(opcionImpresion, button) {
        //var controller =  Ext.WindowMgr.get("wndDetallePedidos2").parentController;
        //controller.ModificaTraspaso({"currentRecord":window.currentPedido.pedidos[0]},null,null);
        //if(typeof window.modificados === 'undefined'){
        //    Ext.Msg.alert('Mensaje','No existen modificaciones en el pedido.');
        //}else{
            if(Object.keys(window.modificados).length === 0){
                Ext.Msg.alert('Mensaje','No existen modificaciones en el pedido.');
            }else{
                // se realiza la modificacion
                var pedido_original = window.currentPedido.pedidos[0];
                var productos_originales = pedido_original.productos;

                console.log("productos_originales");console.log(productos_originales);
                /*alert("pausa");
                // no se necesita actualizar los productos, ya vienen actualizados desde el grid
                for(var producto = 0; producto < productos_originales.length; producto++){
                    var currentProducto = productos_originales[producto];
                    console.log("Revisando el producto"); console.log(currentProducto);
                    if(currentProducto.claveproducto in window.modificados){
                        var currentRecord = window.modificados[currentProducto.claveproducto];
                        console.log("currentModificado");console.log(currentRecord);
                        //var currentRecord = .record;
                        var new_cantidadCedi = currentRecord.get("CantidadCedi");
                        var new_cantidadSucursal = currentRecord.get("CantidadCedi");

                        console.log("cantidad cambiada");console.log(new_cantidadCedi);
                        currentProducto.CantidadCedi = new_cantidadCedi;
                        currentProducto.CantidadSucursal = new_cantidadSucursal;

                        //sobreescribe
                        productos_originales[producto] = currentProducto;
                    }
                }*/

                console.log("productos_originales");console.log(productos_originales);

                //pedido_original.productos = productos_originales;
                var gridProductos = Ext.ComponentMgr.get("gridProductos2");
                var el = gridProductos.getEl();
                el.mask('Modificando pedido, espere por favor.');

                var request = new Object(); request.method="modificapedidocw"; request.params=[];
                request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                request.params.push({"name":"clavepedido","value":button.currentRecord.clavePedido});
                request.params.push({"name":"opcionImpresion","value":opcionImpresion});
                request.params.push({"name":"pedido","value":Ext.encode(pedido_original)});
                console.log("Pedido");
                console.log(Ext.encode(pedido_original));
                //window.currentPedido = null; // borrado momentaneamente
                var component = Ext.ComponentMgr.get("gridConsultaTraspasos2");
                //component.getStore().removeAll();
                var currentController = this;
                almacen.getApplication().loadData(request,function(response){

                    //console.log("response"); console.log(response);
                    if(response.status){
                        var archivos_por_imprimir = response.filepath;
                        Ext.Msg.alert("ModificaciÃ³n", response.msg);
                        window.modificados = {}; // se limpia

                        /// Se entra a la impresion ---------------------------------
                        console.log("henosssaquiii5552");
                        console.log(archivos_por_imprimir);

                        console.log("opcionImpresion: " + opcionImpresion);


                        console.log("entras aca");
                        // NOTA, se puede mejorar haciendo recursividad, tomar de ejemplo
                        // la impresion al momento de FINALIZAR PEDIDO por lote.
                        if(opcionImpresion == 2 ){
                            console.log("entras aca 2");
                            var curentFilepath = archivos_por_imprimir[0];
                            var str = curentFilepath;
                            var rootPdf = str.substring(0,  str.indexOf(","));
                            console.log("rootPdf");
                            console.log(rootPdf);
                            var rootXls = str.substring(str.indexOf(",")+1);
                            console.log("rootXls");
                            console.log(rootXls);

                            var paths = [];

                            paths.push(rootPdf);paths.push(rootXls);

                            var j = 0;                     //  set your counter to 1

                            var myLoop = function(){           //  create a loop function
                                setTimeout(function () {    //  call a 3s setTimeout when the loop is called
                                    var requestprint = new Object(); requestprint.method="printguardapedidos"; requestprint.params=[];
                                    requestprint.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                                    var curentFilepath = paths[j];
                                    var tipoimpresion = j;
                                    almacen.getApplication().loadData(requestprint,function(response2){
                                        console.log("imprimiendo: " + curentFilepath);
                                        almacen.getApplication().downloadPedido(curentFilepath, tipoimpresion);
                                    });

                                    j++;                     //  increment the counter

                                    if (j < paths.length) {            //  if the counter < 10, call the loop function
                                        myLoop();             //  ..  again which will trigger another
                                    }                        //  ..  setTimeout()
                                }, 5000);
                            };

                            myLoop();                      //  start the loop

                        } else{
                            if(opcionImpresion > -1){
                                console.log("entras aca 3");
                                var curentFilepath = archivos_por_imprimir[0];
                                console.log("curentFilepath: " + curentFilepath);
                                //  almacen.getApplication().loadData(requestprint,function(response2){
                                //      console.log("imprimiendo: " + curentFilepath);
                                almacen.getApplication().downloadPedido(curentFilepath, opcionImpresion);
                                //    });
                            }
                        }
                        // FIN DE LA IMPRESION ---------------------------------
                        // Se pasa el flujo al controlador padre, para que se pueda cerrar esta ventana
                        var controller =  Ext.WindowMgr.get("wndDetallePedidos2").parentController;
                        window.currentPedido = null; // se limpia por que se regresa a la pantalla anterior
                        controller.ModificaTraspaso();
                    }else{
                        Ext.Msg.alert("Error en Modificar", response.msg);
                    }

                    el.unmask();

                },function(response){
                    el.unmask();

                });


            }
        //}
    },

    recibePedido: function(motivo) {
        if(typeof motivo !== 'undefined' && motivo !== null && motivo !== ''){
            window.currentPedido.pedidos[0].motivo = motivo;
        }

        console.log("window.currentPedido.pedidos[0]");
        console.log(window.currentPedido.pedidos[0]);

        var controller =  Ext.WindowMgr.get("wndDetallePedidos2").parentController;
        controller.RecibeTraspaso({"currentRecord":window.currentPedido.pedidos[0]},null,{wnd:Ext.WindowMgr.get("wndDetallePedidos")}); // Completo
    },

    gestionaCorreos: function(currentController, correctRecords) {
        this.enviaOrden(currentController, correctRecords);
    },

    enviaOrden: function(currentController, correoRecords) {
        console.log("enviaorden");
        console.log(window.currentPedido.pedidos[0]);


        var winBusquedaCompra = Ext.ComponentMgr.get("gridProductos2");
        var el = winBusquedaCompra.getEl();
        el.mask('Enviando orden, por favor espere');

        var request = new Object(); request.method="enviarorden"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        request.params.push({"name":"pedido","value":Ext.encode(window.currentPedido.pedidos[0])});


        // Se copia el objeto para poder modificar la propiedad de fechaRegistro, pues es un date y necesita string
        var recordTemp = Object.assign({}, window.currentPedido.pedidos[0]);
        recordTemp.fechaRegistro = Ext.Date.format(new Date(recordTemp.fechaRegistro),'d/m/Y H:i:s');

        var a = {};

        if(typeof correoRecords !== 'undefined'){
            if(correoRecords.length > 0){
                var correos = [];
                for(var iter = 0; iter < correoRecords.length; iter++){
                    var currentRecord = correoRecords[iter];
                    console.log("currentRecord");
                    console.log(currentRecord);
                    console.log(currentRecord.get("label"));
                    if(currentRecord.get("label") !== ''){
                        correos.push({
                            "label" : currentRecord.get("label"),
                            "value" : currentRecord.get("value"),
                        });
                    }
                }
                a.correos = correos;
                request.params.push({"name":"correos","value":Ext.encode(a)});
            }
        }

        console.log(request);

        almacen.getApplication().loadData(request,function(response){
            console.log(response);
            el.unmask();
        }, function(response){
            el.unmask();
            Ext.Msg.alert("Error", response.msg);
        });
    },

    onEditorCantidadCediChange: function(field, newValue, oldValue, eOpts) {

        var recordPedido = window.currentPedido.pedidos[0];

        var rec = field.up("editor").editingPlugin.context.record;

        rec.beginEdit();

        var CantidadSucursal = 0.0;

        if(newValue === null){
            newValue = 0.0;
        }

        if(newValue<0){
            rec.set("CantidadCedi", 0);

            newValue=0.0;
        }

        var cantidadCedi=newValue;
        var cantidadOrig=rec.data.originalValue;

        var activar=almacen.getApplication().currentSession.habilitaModificaPedido;
        var cedi=almacen.getApplication().currentSession.esCedi;

        if(recordPedido.Estado=="APROBADO" && activar && cedi===false){
            if(cantidadCedi>=cantidadOrig){
                Ext.Msg.alert('Mensaje','La cantidad modificada no puede ser mayor a la cantidad de la sucursal.');
                rec.set("CantidadCedi", cantidadOrig);
                newValue=cantidadOrig;
            }
        }

        if(!recordPedido.pedidoCedi){ // calculo para proveedores, ya viene con proporcion aplicada
            console.log("aqui");
            CantidadSucursal = newValue;
            rec.set("CantidadSucursal", CantidadSucursal);
            if(rec.data.tasa)
            rec.set("Importe", almacen.getApplication().calculaImportesTotales(parseInt(rec.get("Impuesto")), rec.data.Descuento, rec.data.Costo, rec.data.CantidadSucursal, rec.data.tasa));
            else
            rec.set("Importe", almacen.getApplication().calculaImportesTotales(parseInt(rec.get("Impuesto")), rec.data.Descuento, rec.data.Costo, rec.data.CantidadSucursal, null));
        }else{ // calculo para Cedis
            CantidadSucursal = newValue / rec.get("Proporcion");
            rec.set("CantidadSucursal", CantidadSucursal);
            if(rec.data.tasa)
            rec.set("Importe", almacen.getApplication().calculaImportesTotales( 0, 0, rec.data.Costo, rec.data.CantidadSucursal, null));
            else
            rec.set("Importe", almacen.getApplication().calculaImportesTotales( 0, 0, rec.data.Costo, rec.data.CantidadSucursal, null));

        }
        rec.endEdit();
        //rec.commit(); // agregado

    },

    onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        // no se valida si es pedido a cedis antes de editar, pues pedidos al cedis no muestran este campo
        rec = field.up("editor").editingPlugin.context.record;
        console.log(rec.data);
        rec.beginEdit();
        rec.set("Costo", newValue);
        rec.set("Importe", almacen.getApplication().calculaImportesTotales(  parseInt(rec.get("Impuesto")), rec.data.Descuento, rec.data.Costo, rec.data.CantidadSucursal, rec.data.tasa));;
        rec.endEdit();
    },

    onPorcentajeDescuentoChange: function(field, newValue, oldValue, eOpts) {
        rec = field.up("editor").editingPlugin.context.record;
        console.log(rec.data);
        rec.beginEdit();
        rec.set("Descuento", newValue);
        rec.set("Importe", almacen.getApplication().calculaImportesTotales(  parseInt(rec.get("Impuesto")), rec.data.Descuento, rec.data.Costo, rec.data.CantidadSucursal, rec.data.tasa));;
        rec.endEdit();

    },

    onCmbIepsPedido2Select: function(combo, records, eOpts) {
        var controller = Ext.ComponentMgr.get("gridCedis").up().getController();
        rec = combo.up("editor").editingPlugin.context.record;
        console.log(rec.data);
        rec.beginEdit();
        rec.set("tasa", records[0].data);
        rec.set("Importe", controller.calculaImportesTotales(  parseInt(rec.get("Impuesto")), rec.data.Descuento, rec.data.Costo, rec.data.CantidadSucursal, rec.data.tasa));;
        rec.endEdit();
    },

    onComboboxSelect: function(combo, records, eOpts) {
        var controller = Ext.ComponentMgr.get("gridCedis").up().getController();
        rec = combo.up("editor").editingPlugin.context.record;
        rec.beginEdit();
        rec.set("Impuesto", records[0].data);
        console.log(rec.data);
        console.log(rec.get("Impuesto").value);
        rec.set("Importe", controller.calculaImportesTotales( parseInt(rec.get("Impuesto").value), rec.data.Descuento, rec.data.Costo, rec.data.CantidadSucursal, rec.data.tasa));;
        rec.endEdit();
    },

    onImporteTotalChange: function(field, newValue, oldValue, eOpts) {
        var recordPedido = window.currentPedido.pedidos[0];

        var rec = field.up("editor").editingPlugin.context.record;

        console.log("rec onNumberfieldChange");
        console.log(rec);

        var Total = newValue;
        var Iva = parseInt(rec.get("Impuesto"));
        var Descuento = rec.data.Descuento;
        var PrecioU = rec.data.Costo;
        var tasa = null;



        rec.beginEdit();

        // Modificacion por importe solo afecta a proveedores
        if(!recordPedido.pedidoCedi){ // calculo para proveedores, ya viene con proporcion aplicada.

            var factorIeps = 0.0;

            if(rec.data.tasa)
            factorIeps = almacen.getApplication().calculafactorNegativoIEPS(rec.data.tasa, null, PrecioU, Descuento, Iva) * -1;

            var CantidadSucursal = ( (  ( Total / (1+Iva/100) )  / (factorIeps/100 + 1 - Descuento/100)  )   /  PrecioU  );

            rec.set("CantidadCedi", Ext.util.Format.number(CantidadSucursal,'0.000'));
            rec.set("CantidadSucursal", Ext.util.Format.number(CantidadSucursal,'0.000'));
        }

        rec.endEdit();
        //rec.commit(); // agregado

    },

    onGridProductosAfterRender: function(component, eOpts) {
        var rec = window.currentPedido.pedidos[0];

        component.getStore().loadData(rec.productos);
        component.getStore().sort("NombreProducto", "ASC");

        // se ingresa el nuevo valor original
        component.getStore().each(function(rec){
            rec.beginEdit();
            rec.set("originalValue", rec.get("CantidadCedi"));
            rec.endEdit();
            rec.commit();
        });

        Ext.ComponentMgr.get("btnCancelaPedido2").setDisabled(true);
        Ext.ComponentMgr.get("btnRecibePedido2").setDisabled(true);
        Ext.ComponentMgr.get("btnFinalizaPedido2").setDisabled(true);
        Ext.ComponentMgr.get("btnModificarPedido2").setDisabled(true);
        Ext.ComponentMgr.get("btnEnviaOrden").setDisabled(true);


        Ext.ComponentMgr.get("btnCancelaPedido2").currentRecord=null;
        Ext.ComponentMgr.get("btnCancelaPedido2").currentRecord=null;
        Ext.ComponentMgr.get("btnFinalizaPedido2").currentRecord=null;
        Ext.ComponentMgr.get("btnModificarPedido2").currentRecord=null;
        Ext.ComponentMgr.get("btnEnviaOrden").currentRecord=null;



        var estado = parseInt(rec.Claveestado, 10);
        var claveSucursalOrigen = parseInt(rec.claveSucursal, 10);
        var claveSucursalDestino = parseInt(rec.claveCedi, 10);

        if   (estado == 0) {
            Ext.ComponentMgr.get("btnCancelaPedido2").setDisabled(false);//habilitamos el boton para cancelar
            Ext.ComponentMgr.get("btnCancelaPedido2").currentRecord=rec;
        }
        if   (estado == 1) {
            Ext.ComponentMgr.get("btnCancelaPedido2").setDisabled(false);//habilitamos el boton para cancelar en caso de estado aprobado
            Ext.ComponentMgr.get("btnCancelaPedido2").currentRecord=rec;
        }
        if (almacen.getApplication().currentSession.claveSucursal==claveSucursalOrigen && estado==1){
            Ext.ComponentMgr.get("btnRecibePedido2").setDisabled(false);//habilitamos el boton para recibir
            Ext.ComponentMgr.get("btnRecibePedido2").currentRecord=rec;
        }
        if (almacen.getApplication().currentSession.claveSucursal==claveSucursalDestino && estado==2){
            Ext.ComponentMgr.get("btnFinalizaPedido2").setDisabled(false);//habilitamos el boton para finalizar
            Ext.ComponentMgr.get("btnFinalizaPedido2").currentRecord=rec;
        }
        // habilitamos para pruebas
        //Ext.ComponentMgr.get("btnModificarPedido2").setDisabled(false);//habilitamos el boton para modificar en pedido proveedor
        //Ext.ComponentMgr.get("btnModificarPedido2").currentRecord=rec;

        if (almacen.getApplication().currentSession.claveSucursal==claveSucursalDestino && (estado===0 || estado==1) && rec.pedidoCedi){
            if(typeof rec.claveusuarioAparta === 'undefined' || rec.claveusuarioAparta === 0 || rec.claveusuarioAparta == -1 || rec.claveusuarioAparta == almacen.getApplication().ClaveUsuario){
                // se habilita la modificacion si el cliente tiene el pedido
                Ext.ComponentMgr.get("btnModificarPedido2").setDisabled(false);//habilitamos el boton para modificar
                Ext.ComponentMgr.get("btnModificarPedido2").currentRecord=rec;
            }

        }else{
            if(!rec.pedidoCedi){
                Ext.ComponentMgr.get("btnModificarPedido2").setDisabled(false);//habilitamos el boton para modificar en pedido proveedor
                Ext.ComponentMgr.get("btnModificarPedido2").currentRecord=rec;
                Ext.ComponentMgr.get("btnEnviaOrden").setDisabled(false);//habilitamos el boton para enviar pedido de proveedor
                Ext.ComponentMgr.get("btnEnviaOrden").currentRecord=rec;
            }
        }

        var activar=almacen.getApplication().currentSession.habilitaModificaPedido;
        var cedi=almacen.getApplication().currentSession.esCedi;
        if(cedi===false){
            if(activar){
                if((rec.Estado=="APROBADO")){
                    Ext.ComponentMgr.get("btnModificarPedido2").setDisabled(false);
                    Ext.ComponentMgr.get("btnModificarPedido2").currentRecord=rec;
                }
            }
        }
    },

    onGridProductos2BeforeRender: function(component, eOpts) {

        var rec = window.currentPedido.pedidos[0];

        console.log("onGridProductos2BeforeRender/rec");
        console.log(rec);

        var pedidoCedi = rec.pedidoCedi;


        var columns = component.columns;

        var grid = Ext.ComponentMgr.get("gridProductos2"),
            gridHeader = grid.getView().headerCt,
            column_cantidadCedi = gridHeader.child("#cantidadCedi"),
            column_cantidadOriginalCedi = gridHeader.child("#cantidadOriginalCedi"),
            column_importeUnitario = gridHeader.child("#importeUnitario"),
            column_descuento = gridHeader.child("#porcentajeDescuento"),
            column_ieps = gridHeader.child("#tasaIEPS"),
            column_impuesto = gridHeader.child("#tasaImpuesto"),
            column_importeTotal = gridHeader.child("#importeTotal");

        if(!pedidoCedi){ // es pedido a proveedor
            column_cantidadCedi.setText("Cantidad<br>a Recibir");
            column_cantidadOriginalCedi.setHidden(true);

        }else{
            column_importeUnitario.setHidden(true);
            column_descuento.setHidden(true);
            column_ieps.setHidden(true);
            column_impuesto.setHidden(true);
        }
    },

    onGridPedidoAfterRender: function(component, eOpts) {
        var rec = window.currentPedido.pedidos[0];
        //component.getStore().load(rec.productos);
        var arr = [];

        arr.push({"label":"Sucursal", "value":rec.SucursalOrigen});
        if(rec.pedidoCedi)
        arr.push({"label":"Cedi", "value":rec.SucursalDestino});
        else
        arr.push({"label":"Proveedor", "value":rec.SucursalDestino});
        arr.push({"label":"NÃºmero", "value":rec.clavePedido});
        console.log("rec");
        console.log(rec);
        if(!rec.pedidoCedi && rec.claveOrdenCompraPadre > 0){
            arr.push({"label":"NÃºmero de Origen", "value":rec.claveOrdenCompraPadre});
        }
        if(!rec.pedidoCedi && rec.motivo !== ''){
            arr.push({"label":"Motivo (Compra Incompleta)", "value":rec.motivo});
        }
        arr.push({"label":"Estado", "value":rec.Estado});
        arr.push({"label":"Total", "value": Ext.util.Format.currency(rec.Total)});
        console.log(rec.fechaRegistro);
        var dt = new Date(rec.fechaRegistro);
        console.log("dt");
        console.log(dt);
        if(dt instanceof Date && !isNaN(dt)){
            arr.push({"label":"Fecha de Registro", "value":Ext.Date.format(dt, 'd/m/Y H:i:s')});
        }else{
            arr.push({"label":"Fecha de Registro", "value":rec.fechaRegistro});
        }

        arr.push({"label":"Fecha de AprobaciÃ³n", "value":rec.fechaRecepcion});
        arr.push({"label":"Fecha de RecepciÃ³n", "value":rec.fechaConfirmacion});
        arr.push({"label":"Fecha de FinalizaciÃ³n", "value":rec.fechaFinalizacion});
        arr.push({"label":"Fecha de Entrega", "value":rec.fechaEntrega});
        arr.push({"label":"Fecha de ModificaciÃ³n", "value":rec.fechaModificacion});
        arr.push({"label":"Registrado Por", "value":rec.quienRegistra});
        arr.push({"label":"Cancelado Por", "value":rec.quienCancela});
        arr.push({"label":"Aprobado Por", "value":rec.quienRecibe});
        arr.push({"label":"Recibido Por", "value":rec.quienConfirma});
        arr.push({"label":"Finalizado Por", "value":rec.quienFinaliza});
        arr.push({"label":"Modificado Por", "value":rec.quienModifica});
        component.getStore().loadData(arr);


    },

    EnviaOrden: function(button, e, eOpts) {
        console.log("button.currentRecord");
        console.log(button.currentRecord);

        // Se genera la ventana que lee que correos
        var wnd=Ext.create("almacen.view.DlgCorreo", {id:"wndCorreo",currentRecord:"response"});
        wnd.parentController=this;
        wnd.currentRecord="response";
        wnd.center();
        wnd.show();
    },

    CallCancelaPedido: function(button, e, eOpts) {
        var controller =  Ext.WindowMgr.get("wndDetallePedidos2").parentController;
        controller.CancelaTraspaso({"currentRecord":window.currentPedido.pedidos[0]},null,null);
    },

    RecibePedido: function(button, e, eOpts) {
        var controllerParent = this;

        if(button.currentRecord.pedidoCedi){
            if(Object.keys(window.modificados).length > 0){
                Ext.Msg.show({
                    title: 'Recibir Compra',
                    msg: 'Si continÃºa perdera las modificaciones. Â¿Desea continuar?',
                    buttonText : {
                        cancel : 'Cancelar',
                        yes : 'Continuar'
                    },
                    fn: function(btn) {
                        if(btn == 'yes') {
                            var controller =  Ext.WindowMgr.get("wndDetallePedidos2").parentController;
                            controller.RecibeTraspaso({"currentRecord":window.currentPedido.pedidos[0]},null,{wnd:Ext.WindowMgr.get("wndDetallePedidos")});
                        }
                    }
                });
            }else{
                var controller =  Ext.WindowMgr.get("wndDetallePedidos2").parentController;
                controller.RecibeTraspaso({"currentRecord":window.currentPedido.pedidos[0]},null,{wnd:Ext.WindowMgr.get("wndDetallePedidos")});
            }
        }else{
            msg = 'Â¿Desea recibir el pedido '+ button.currentRecord.clavePedido +' completo o parcial? <br><br>';
            msg += 'Completo: Se recibe el pedido con las cantidades asignadas. <br><br>';
            msg += 'Parcial: Se recibe un pedido con las cantidades asignadas y se genera uno nuevo con las cantidades restantes. En caso de que las cantidades asignadas sobrepasen las restantes, no se generarÃ¡ un nuevo pedido.';

            Ext.MessageBox.show({
                title: 'Recibir Compra',
                message: msg,
                width: 400,
                buttons: Ext.Msg.YESNOCANCEL,
                buttonText: {
                    yes: 'Parcial',
                    no: 'Completo',
                    cancel: 'Cancelar'
                },
                fn :function(buttonId){
                    if(buttonId=="yes"){
                        button.currentRecord.pedidoParcial = true;
                        //var controller =  Ext.WindowMgr.get("wndDetallePedidos2").parentController;
                        //controller.RecibeTraspaso({"currentRecord":window.currentPedido.pedidos[0]},null,{wnd:Ext.WindowMgr.get("wndDetallePedidos")}); // 1 parcial
                        controllerParent.recibePedido(null);
                    }
                    if(buttonId=="no"){

                        button.currentRecord.pedidoParcial = false;

                        var pass = 0;
                        for(var i = 0; i< button.currentRecord.productos.length; i++){
                            var producto = button.currentRecord.productos[i];
                            if(producto.CantidadCedi < producto.originalValue){
                                pass++;
                            }
                        }

                        if(pass > 0){
                            console.log("henos aqui");
                            var wnd = Ext.create("almacen.view.DlgMotivosOrdenCompleta",{id:'wndPreguntaMotivoIncompleta'});
                            wnd.parentController = controllerParent;
                            wnd.center();
                            wnd.show();
                        }else{
                            //var controller =  Ext.WindowMgr.get("wndDetallePedidos2").parentController;
                            //controller.RecibeTraspaso({"currentRecord":window.currentPedido.pedidos[0]},null,{wnd:Ext.WindowMgr.get("wndDetallePedidos")}); // Completo
                            controllerParent.recibePedido(null);
                        }
                    }
                }
            });
        }
    },

    FinalizaPedido: function(button, e, eOpts) {
        var controller =  Ext.WindowMgr.get("wndDetallePedidos2").parentController;
        controller.FinalizaTraspasos({"currentRecord":window.currentPedido.pedidos[0]},null,null);
    },

    ModificaPedido2: function(button, e, eOpts) {
        var currentController=this;

        // Se valida si existen modificaciones
        console.log(window.modificados);
        if(typeof window.modificados === 'undefined' || (typeof window.modificados !== 'undefined' && Object.keys(window.modificados).length === 0)){
            Ext.Msg.alert('Mensaje','No existen modificaciones en el pedido.');
            return;
        }

        // Se define el mensaje que aparecera de acuerdo a si es pedido a cedis o proveedor

        var msg = '';
        var buttons;
        var buttonText = {};
        var width = 400;


        //if(button.currentRecord.pedidoCedi){
        if(true){
            msg = 'Â¿Desea modificar el pedido ' + button.currentRecord.clavePedido + '?';
            buttons = Ext.Msg.NOCANCEL;
            buttonText = {
                no: 'Modificar',
                cancel: 'Cancelar'
            };
            width = 250;
        }/*else{
            msg = 'Â¿Desea recibir el pedido(parcial) o modificar el pedido ' + button.currentRecord.clavePedido + '?';
            buttons = Ext.Msg.YESNOCANCEL;
            buttonText = {
                yes: 'Recibir Parcial',
                no: 'Modificar',
                cancel: 'Cancelar'
            };
        }
        */
        Ext.MessageBox.show({
            title: 'Modificar',
            message: msg,
            width: width,
            buttons: buttons,
            buttonText: buttonText,
            fn :function(buttonId){
                if(buttonId=="yes"){
                    //  console.log("parametro 0");
                    // controller.validaGuardarPedidos(controller,0);
                }
                if(buttonId=="no"){
                    var winDelete =  Ext.create('Ext.window.Window', {
                        title: 'Seleccione el mÃ©todo de impresiÃ³n',
                        height: 150,
                        width: 500,
                        layout: 'fit',
                        modal:true,
                        bodyPadding: 20,
                        border: 2,
                        buttons: [
                        {
                            text: 'CONFIRMAR',
                            scale: 'medium',
                            cls: 'btn-delete-yes',
                            listeners: {
                                click: function() {

                                    var radio1 = Ext.getCmp('radio1'),

                                        radio2 = Ext.getCmp('radio2'),
                                        radio3 = Ext.getCmp('radio3');
                                    radio4 = Ext.getCmp('radio4');

                                    //if L is selected, change to M
                                    if (radio1.getValue()) {
                                        currentController.modificarPedido(0, button);
                                        winDelete.close();
                                        return;
                                    }

                                    //if XL is selected, change to L
                                    if (radio2.getValue()) {
                                        currentController.modificarPedido(1, button);
                                        winDelete.close();
                                        return;
                                    }

                                    //if XL is selected, change to L
                                    if (radio3.getValue()) {
                                        currentController.modificarPedido(2, button);
                                        winDelete.close();
                                        return;
                                    }
                                    //if XL is selected, change to L
                                    if (radio4.getValue()) {
                                        currentController.modificarPedido(-1, button);
                                        winDelete.close();
                                        return;
                                    }
                                }
                            }
                        }, '->',
                        {
                            text: 'CANCELAR',
                            scale: 'medium',
                            cls: 'btn-delete-no',
                            listeners: {
                                click: function() {
                                    winDelete.close();
                                }
                            }
                        }
                        ],
                        items: [
                        {
                            xtype      : 'fieldcontainer',
                            fieldLabel : '',
                            defaultType: 'radiofield',
                            defaults: {
                                flex: 1
                            },
                            layout: 'hbox',
                            items: [
                            {
                                boxLabel  : 'PDF',
                                checked: true,
                                name      : 'size',
                                inputValue: '0',
                                id        : 'radio1'
                            }, {
                                boxLabel  : 'EXCEL',
                                name      : 'size',
                                inputValue: 'l',
                                id        : 'radio2',
                                listeners : {
                                    afterrender : function(){
                                        if(button.currentRecord.pedidoCedi){
                                            this.setDisabled(false);
                                        }else{
                                            this.setDisabled(true);
                                        }
                                    }
                                }
                            }, {
                                boxLabel  : 'PDF y EXCEL',
                                name      : 'size',
                                inputValue: '2',
                                id        : 'radio3',
                                listeners : {
                                    afterrender : function(){
                                        if(button.currentRecord.pedidoCedi){
                                            this.setDisabled(false);
                                        }else{
                                            this.setDisabled(true);
                                        }
                                    }
                                }
                            }, {
                                boxLabel  : 'Sin ImpresiÃ³n',
                                name      : 'size',
                                inputValue: '2',
                                id        : 'radio4'
                            }
                            ]
                        }
                        ]
                    }).show();
                }
            }
        });
    }

});
