/*
 * File: app/view/DlgConsultaTraspasos2.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.DlgConsultaTraspasos2', {
    extend: 'Ext.window.Window',
    alias: 'widget.dlgconsultatraspasos2',

    requires: [
        'almacen.view.DlgConsultaTraspasosViewModel2',
        'almacen.view.DlgConsultaTraspasosViewController2',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Date',
        'Ext.grid.column.Number',
        'Ext.grid.filters.filter.Number',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.Fill',
        'Ext.button.Button',
        'Ext.selection.RowModel',
        'Ext.grid.filters.Filters',
        'Ext.form.Panel',
        'Ext.form.field.Date',
        'Ext.form.field.ComboBox'
    ],

    controller: 'dlgconsultatraspasos2',
    viewModel: {
        type: 'dlgconsultatraspasos2'
    },
    floating: true,
    height: 581,
    width: 935,
    layout: 'border',
    title: 'Consulta pedidos',
    modal: true,
    defaultListenerScope: true,

    items: [
        {
            xtype: 'gridpanel',
            region: 'center',
            id: 'gridConsultaTraspasos2',
            title: '',
            allowDeselect: true,
            store: 'StorePedidos',
            viewConfig: {
                getRowClass: function(record, rowIndex, rowParams, store) {
                    var style = "";

                    //console.log("claveusuarioAparta");
                    //console.log(record.get("claveusuarioAparta"));
                    if(typeof record.get("claveusuarioAparta") !== 'undefined' && record.get("claveusuarioAparta") !== 0 && record.get("claveusuarioAparta") != -1 && record.get("claveusuarioAparta") != almacen.getApplication().ClaveUsuario){
                        style = "no-editable";
                    }
                    //console.log("style");
                    //console.log(style);

                    return style;
                }
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 114,
                    dataIndex: 'clavePedido',
                    text: 'Pedido'
                },
                {
                    xtype: 'gridcolumn',
                    maxWidth: 180,
                    minWidth: 180,
                    weight: 180,
                    width: 114,
                    defaultWidth: 180,
                    dataIndex: 'SucursalOrigen',
                    text: 'Origen'
                },
                {
                    xtype: 'gridcolumn',
                    maxWidth: 180,
                    minWidth: 180,
                    weight: 180,
                    width: 124,
                    defaultWidth: 180,
                    dataIndex: 'SucursalDestino',
                    text: 'CEDIS'
                },
                {
                    xtype: 'datecolumn',
                    maxWidth: 180,
                    minWidth: 180,
                    weight: 180,
                    width: 160,
                    defaultWidth: 180,
                    dataIndex: 'fechaRegistro',
                    text: 'Fecha Registro',
                    format: 'd/m/Y H:i:s'
                },
                {
                    xtype: 'gridcolumn',
                    width: 126,
                    dataIndex: 'Estado',
                    text: 'Estado'
                },
                {
                    xtype: 'numbercolumn',
                    renderer: function(value, metaData, record,  rowIndex, colIndex, store, view) {
                        console.log("renderizando");
                        return Ext.util.Format.currency(value);

                    },
                    width: 118,
                    align: 'right',
                    dataIndex: 'Total',
                    text: 'Total',
                    format: '0,000.000',
                    filter: {
                        type: 'number'
                    }
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            id: 'btnReimprimir2',
                            icon: 'resources/print.png',
                            text: 'Reimprimir Pedido'
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            id: 'btnCancela2',
                            icon: 'resources/cancel-icon.png',
                            text: 'Cancelar Pedido'
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            id: 'btnAprobar2',
                            icon: 'resources/save.png',
                            text: 'Aprobar'
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            id: 'btnDetalle2',
                            icon: 'resources/detail.png',
                            text: 'Detalle'
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            id: 'btnRecibe2',
                            icon: 'resources/receive.png',
                            overflowText: '',
                            text: 'Recibir'
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            id: 'btnFinaliza2',
                            icon: 'resources/tick.png',
                            text: 'Finalizar'
                        }
                    ]
                }
            ],
            selModel: {
                selType: 'rowmodel',
                allowDeselect: true,
                mode: 'MULTI',
                listeners: {
                    selectionchange: 'onRowModelSelectionChange'
                }
            },
            plugins: [
                {
                    ptype: 'gridfilters'
                }
            ],
            listeners: {
                rowdblclick: 'onGridConsultaTraspasos2RowDblClick'
            }
        },
        {
            xtype: 'form',
            region: 'north',
            height: 50,
            layout: 'column',
            bodyPadding: 10,
            title: '',
            items: [
                {
                    xtype: 'datefield',
                    id: 'dtTInicial2',
                    width: 150,
                    fieldLabel: '',
                    allowBlank: false,
                    emptyText: 'Fecha Inicial',
                    format: 'd/m/Y'
                },
                {
                    xtype: 'datefield',
                    id: 'dtTFinal2',
                    width: 150,
                    fieldLabel: '',
                    allowBlank: false,
                    emptyText: 'Fecha Final',
                    format: 'd/m/Y'
                },
                {
                    xtype: 'combobox',
                    id: 'cmbTEstado2',
                    width: 150,
                    fieldLabel: '',
                    allowBlank: false,
                    emptyText: 'Estado',
                    displayField: 'label',
                    multiSelect: true,
                    queryMode: 'local',
                    store: 'StoreEstados',
                    valueField: 'value'
                },
                {
                    xtype: 'button',
                    id: 'btnFiltrar2',
                    icon: 'resources/filter.gif',
                    text: 'Filtrar'
                },
                {
                    xtype: 'button',
                    id: 'btnPendientes2',
                    icon: 'resources/pending.png',
                    text: 'Pendientes'
                }
            ]
        }
    ],

    onRowModelSelectionChange: function(model, selected, eOpts) {
        // Se deshabilita todo. Se habilitara en base a los casos en que se encuentre
        Ext.ComponentMgr.get("btnCancela2").setDisabled(true);
        Ext.ComponentMgr.get("btnRecibe2").setDisabled(true);
        Ext.ComponentMgr.get("btnFinaliza2").setDisabled(true);
        Ext.ComponentMgr.get("btnDetalle2").setDisabled(true);
        Ext.ComponentMgr.get("btnReimprimir2").setDisabled(true);
        Ext.ComponentMgr.get("btnAprobar2").setDisabled(true);

        Ext.ComponentMgr.get("btnCancela2").currentRecord=null;
        Ext.ComponentMgr.get("btnRecibe2").currentRecord=null;
        Ext.ComponentMgr.get("btnFinaliza2").currentRecord=null;
        Ext.ComponentMgr.get("btnDetalle2").currentRecord=null;
        Ext.ComponentMgr.get("btnReimprimir2").currentRecord=null;
        Ext.ComponentMgr.get("btnAprobar2").currentRecord=null;


        // De no haber seleccion, se deja todo deshabilitado.
        if (selected.length <= 0) return;

        // Si se selecciona mÃ¡s de uno, se asumo que quiere finalizar todos, solo para cedis

        console.log();

        if(selected.length > 1 ){

            // Se verifica que el nuevo este RECIBIDO, junto con el anterior
            var currentRecord = selected[selected.length-1];
            var lastRecord = selected[selected.length-2];
            var claveSucursalDestinoCurrent = parseInt(currentRecord.get("claveCedi"), 10);
            var claveSucursalDestinoLast = parseInt(lastRecord.get("claveCedi"), 10);

            // Se verifica el estado y tambiÃ©n que sea CEDIS
            if( (lastRecord.get("Claveestado") == 2 && currentRecord.get("Claveestado") == 2) && (almacen.getApplication().currentSession.claveSucursal==claveSucursalDestinoCurrent && almacen.getApplication().currentSession.claveSucursal==claveSucursalDestinoLast))
            {

                Ext.ComponentMgr.get("btnFinaliza2").setDisabled(false);//habilitamos el boton para finalizar
                Ext.ComponentMgr.get("btnFinaliza2").currentRecord = selected; //rec.data;

            }else{
                // Dado que no se cumple que ambos esten en RECIBIDO y sea CEDIS, se desactiva la ultima seleccion.
                // De esta forma siempre estaran seleccionados solo los de estado 2.
                model.deselect(currentRecord);
                return;
            }

        }else{

            var rec = selected[0];
            //console.log("rec");console.log(rec);
            //console.log("rec.data");console.log(rec.data);
            Ext.ComponentMgr.get("btnDetalle2").setDisabled(false);
            var estado = parseInt(rec.get("Claveestado"), 10);
            var claveSucursalOrigen = parseInt(rec.get("claveSucursal"), 10);
            var claveSucursalDestino = parseInt(rec.get("claveCedi"), 10);
            Ext.ComponentMgr.get("btnDetalle2").currentRecord=rec.data;
            if   (estado == 0) {
                Ext.ComponentMgr.get("btnCancela2").setDisabled(false);//habilitamos el boton para cancelar
                Ext.ComponentMgr.get("btnCancela2").currentRecord=rec.data;
            }
            if   (estado == 1) {
                Ext.ComponentMgr.get("btnCancela2").setDisabled(false);//habilitamos el boton para cancelar
                Ext.ComponentMgr.get("btnCancela2").currentRecord=rec.data;
            }
            if (almacen.getApplication().currentSession.claveSucursal==claveSucursalDestino && estado===0){
                if(typeof rec.data.claveusuarioAparta === 'undefined' || rec.data.claveusuarioAparta === 0 || rec.data.claveusuarioAparta == -1 || rec.data.claveusuarioAparta == almacen.getApplication().ClaveUsuario){
                    // se habilita el aprobar
                    Ext.ComponentMgr.get("btnAprobar2").setDisabled(false);//habilitamos el boton para aprobar
                    Ext.ComponentMgr.get("btnAprobar2").currentRecord=rec.data;
                }
            }
            if (almacen.getApplication().currentSession.claveSucursal==claveSucursalOrigen && estado==1){
                Ext.ComponentMgr.get("btnRecibe2").setDisabled(false);//habilitamos el boton para recibir
                Ext.ComponentMgr.get("btnRecibe2").currentRecord=rec.data;
            }
            if (almacen.getApplication().currentSession.claveSucursal==claveSucursalDestino && estado==2){
                Ext.ComponentMgr.get("btnFinaliza2").setDisabled(false);//habilitamos el boton para finalizar
                Ext.ComponentMgr.get("btnFinaliza2").currentRecord=rec.data;
            }
            if (almacen.getApplication().currentSession.claveSucursal==claveSucursalDestino || !rec.data.pedidoCedi){ // si es sucursal destino o un pedido a proveedor
                Ext.ComponentMgr.get("btnReimprimir2").setDisabled(false);//habilitamos el boton para finalizar
                Ext.ComponentMgr.get("btnReimprimir2").currentRecord=rec.data;
            }
        }

    },

    onGridConsultaTraspasos2RowDblClick: function(tableview, record, tr, rowIndex, e, eOpts) {
        //console.log("record");console.log(record);
        //console.log("record.data");console.log(record.data);

        Ext.ComponentMgr.get("gridConsultaTraspasos2").up().getController().mostrarDetalles(record.data);
    }

});