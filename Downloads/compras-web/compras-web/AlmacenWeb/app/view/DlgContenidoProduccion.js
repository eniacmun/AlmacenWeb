/*
 * File: app/view/DlgContenidoProduccion.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.DlgContenidoProduccion', {
    extend: 'Ext.window.Window',
    alias: 'widget.dlgcontenidoproduccion',

    requires: [
        'almacen.view.DlgContenidoProduccionViewModel',
        'almacen.view.DlgContenidoProduccionViewController',
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.view.BoundList',
        'Ext.XTemplate',
        'Ext.form.field.Number',
        'Ext.grid.Panel',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.grid.plugin.CellEditing',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.Fill',
        'Ext.button.Button'
    ],

    controller: 'dlgcontenidoproduccion',
    viewModel: {
        type: 'dlgcontenidoproduccion'
    },
    height: 597,
    width: 1024,
    title: 'Contenido Producción',
    modal: true,
    defaultListenerScope: true,

    items: [
        {
            xtype: 'form',
            height: 150,
            layout: 'column',
            bodyPadding: 10,
            title: 'Producto a Producir',
            items: [
                {
                    xtype: 'textfield',
                    id: 'txtProduccion',
                    width: 129,
                    fieldLabel: 'Producción',
                    labelWidth: 65
                },
                {
                    xtype: 'combobox',
                    itemId: 'cmbClasificacionProduccion',
                    margin: '0 0 0 10',
                    width: '40%',
                    fieldLabel: 'Clasificación:',
                    labelWidth: 80,
                    allowBlank: false,
                    displayField: 'nombreproducto',
                    forceSelection: true,
                    minChars: 2,
                    queryMode: 'local',
                    store: 'StoreClasificaciones',
                    valueField: 'clasificacion',
                    listeners: {
                        beforerender: {
                            fn: 'onComboboxBeforeRender',
                            scope: 'controller'
                        },
                        select: {
                            fn: 'onComboboxSelect',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    id: 'cmbProducto',
                    margin: '0 0 0 10',
                    width: '45%',
                    fieldLabel: 'Producto',
                    labelWidth: 60,
                    allowBlank: false,
                    allowOnlyWhitespace: false,
                    displayField: 'nombreproducto',
                    forceSelection: true,
                    queryMode: 'local',
                    store: 'StoreCombboProducciones',
                    valueField: 'claveproducto',
                    listeners: {
                        beforequery: 'onCmbProductoBeforeQuery',
                        select: {
                            fn: 'onCmbProductoSelect',
                            scope: 'controller'
                        },
                        beforeselect: {
                            fn: 'onCmbProductoBeforeSelect',
                            scope: 'controller'
                        }
                    },
                    listConfig: {
                        xtype: 'boundlist',
                        itemSelector: 'div',
                        itemTpl: [
                            '<span style="margin:0; background-color: {colorSemaf};">{nombreproducto} <tpl if="cantSemaf != null"><span style="padding-left: 0.1in;">Cant. <b>{cantSemaf}</b></span></tpl></span>'
                        ]
                    }
                },
                {
                    xtype: 'numberfield',
                    id: 'txtCantEsperada',
                    margin: '10 0 0 0',
                    width: 129,
                    fieldLabel: 'Cantidad',
                    labelWidth: 62,
                    allowBlank: false,
                    allowOnlyWhitespace: false,
                    enableKeyEvents: true,
                    listeners: {
                        keyup: {
                            fn: 'onTxtCantEsperadaKeyup',
                            scope: 'controller'
                        },
                        spin: {
                            fn: 'onTxtCantEsperadaSpin',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'numberfield',
                    id: 'txtCantidadProducir',
                    margin: '10 0 0 10',
                    width: 148,
                    fieldLabel: 'Cant. Prod.',
                    labelWidth: 80,
                    allowBlank: false,
                    allowOnlyWhitespace: false,
                    enableKeyEvents: true,
                    listeners: {
                        keyup: {
                            fn: 'onTxtCantidadProducirKeyup',
                            scope: 'controller'
                        },
                        spin: {
                            fn: 'onTxtCantidadProducirSpin',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    disabled: true,
                    id: 'cmbEmpleado',
                    margin: '10 0 0 10',
                    width: '24.2%',
                    fieldLabel: 'Empleado',
                    labelWidth: 60,
                    allowBlank: false,
                    displayField: 'nombreCompleto',
                    forceSelection: true,
                    minChars: 2,
                    store: 'StoreEmpleados',
                    valueField: 'claveEmpleado',
                    listeners: {
                        beforerender: {
                            fn: 'onCmbEmpleadoBeforeRender',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    disabled: true,
                    id: 'cmbProductoVenta',
                    margin: '10 0 0 10',
                    width: '29%',
                    fieldLabel: 'Producto Venta',
                    allowBlank: false,
                    displayField: 'nombreproducto',
                    forceSelection: true,
                    minChars: 2,
                    store: 'StoreProductos',
                    valueField: 'claveproducto',
                    listeners: {
                        select: {
                            fn: 'onCmbProductoVentaSelect',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'numberfield',
                    disabled: true,
                    id: 'txtPrecio',
                    margin: '10 0 0 10',
                    width: 150,
                    fieldLabel: 'Precio',
                    labelWidth: 40,
                    editable: false,
                    hideTrigger: true
                },
                {
                    xtype: 'combobox',
                    disabled: true,
                    id: 'cmbCostosAdicionales',
                    margin: '10 0 0 0',
                    width: 130,
                    fieldLabel: 'Tipo:',
                    labelWidth: 35,
                    editable: false,
                    displayField: 'label',
                    store: 'StoreGeneric',
                    valueField: 'value',
                    listeners: {
                        select: {
                            fn: 'onCmbCostosAdicionalesSelect',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'textfield',
                    disabled: true,
                    hidden: true,
                    id: 'txtTipoPago',
                    margin: '10 0 0 0',
                    width: 130,
                    fieldLabel: 'Tipo Pago:',
                    labelWidth: 65,
                    editable: false,
                    hideTrigger: true
                },
                {
                    xtype: 'numberfield',
                    disabled: true,
                    id: 'txtImporte',
                    margin: '10 0 0 10',
                    width: 148,
                    fieldLabel: 'Importe',
                    labelWidth: 50,
                    editable: false,
                    hideTrigger: true
                },
                {
                    xtype: 'textfield',
                    id: 'txtCostoReal',
                    margin: '10 0 0 30',
                    width: 180,
                    fieldLabel: 'Costo Real',
                    labelWidth: 70,
                    readOnly: true
                }
            ]
        },
        {
            xtype: 'gridpanel',
            height: 160,
            id: 'gridProductoProducir',
            title: 'Materias Producidas',
            store: 'StoreProductoProduccion',
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'claveproducto',
                    text: 'Cve. Materia'
                },
                {
                    xtype: 'gridcolumn',
                    width: 253,
                    dataIndex: 'Descripcion',
                    text: 'Descripción'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'Unidad',
                    text: 'Unidad'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return almacen.getApplication().ObtieneFormatoDecimalesInventario(value);
                    },
                    dataIndex: 'porcion',
                    text: 'Porción/Uni'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return almacen.getApplication().ObtieneFormatoDecimalesInventario(value);
                    },
                    dataIndex: 'cantidadEsperada',
                    text: 'Cnt Esperada'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var wnd = Ext.WindowMgr.get("wndContenidoProduccion");
                        if (!wnd)
                        return false;
                        var rec = wnd.currentRecord;
                        if (!rec)
                        return false;
                        if (rec.estado == 1.0)
                        metaData.tdCls="editable";
                        return almacen.getApplication().ObtieneFormatoDecimalesInventario(value);
                    },
                    width: 110,
                    dataIndex: 'cantidadProducida',
                    text: 'Cnt Producida',
                    editor: {
                        xtype: 'numberfield',
                        decimalPrecision: 5
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return almacen.getApplication().ObtieneFormatoDecimalesInventario(value);
                    },
                    width: 129,
                    dataIndex: 'costoEsperado',
                    text: 'Costo Esperado'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return almacen.getApplication().ObtieneFormatoDecimalesInventario(value);
                    },
                    width: 115,
                    dataIndex: 'costoReal',
                    text: 'Costo Real'
                }
            ],
            plugins: [
                {
                    ptype: 'cellediting',
                    pluginId: 'editingProductos',
                    clicksToEdit: 1,
                    listeners: {
                        beforeedit: {
                            fn: 'onCellEditingProductosBeforeEdit',
                            scope: 'controller'
                        },
                        edit: {
                            fn: 'onCellEditingProductosEdit',
                            scope: 'controller'
                        }
                    }
                }
            ]
        },
        {
            xtype: 'gridpanel',
            height: 279,
            id: 'gridRecetaProduccion',
            width: 1022,
            title: 'Receta',
            store: 'StoreMateriaPrimaRecetaProduccion',
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'clavemateria',
                    text: 'Cve. Materia'
                },
                {
                    xtype: 'gridcolumn',
                    width: 236,
                    dataIndex: 'Descripcion',
                    text: 'Descripción'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'Unidad',
                    text: 'Unidad'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return almacen.getApplication().ObtieneFormatoDecimalesInventario(value);
                    },
                    dataIndex: 'porcion',
                    text: 'Porción/Uni'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return almacen.getApplication().ObtieneFormatoDecimalesInventario(value);
                    },
                    dataIndex: 'cantidadEsperada',
                    text: 'Cnt Esperada'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var wnd = Ext.WindowMgr.get("wndContenidoProduccion");
                        if (!wnd)
                        return false;
                        var rec = wnd.currentRecord;
                        if (!rec)
                        return false;
                        if (rec.estado == 1.0)
                        metaData.tdCls="editable";
                        return almacen.getApplication().ObtieneFormatoDecimalesInventario(value);
                    },
                    width: 106,
                    dataIndex: 'cantidadProducida',
                    text: 'Cnt Producida',
                    editor: {
                        xtype: 'numberfield',
                        decimalPrecision: 5
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return almacen.getApplication().ObtieneFormatoDecimalesInventario(value);
                    },
                    width: 129,
                    dataIndex: 'costoEsperado',
                    text: 'Costo Esperado'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return almacen.getApplication().ObtieneFormatoDecimalesInventario(value);
                    },
                    width: 108,
                    dataIndex: 'costoReal',
                    text: 'Costo Real'
                }
            ],
            plugins: [
                {
                    ptype: 'cellediting',
                    pluginId: 'editingReceta',
                    clicksToEdit: 1,
                    listeners: {
                        beforeedit: {
                            fn: 'onCellEditingRecetaBeforeEdit',
                            scope: 'controller'
                        },
                        edit: {
                            fn: 'onCellEditingRecetaEdit',
                            scope: 'controller'
                        }
                    }
                }
            ]
        }
    ],
    listeners: {
        afterrender: {
            fn: 'onWindowAfterRender',
            scope: 'controller'
        }
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            items: [
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    id: 'btnGuardarProduccion',
                    icon: 'resources/save.png',
                    text: 'Guardar',
                    listeners: {
                        click: {
                            fn: 'onBtnGuardarProduccionClick',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnTerminaProduccion',
                    icon: 'resources/Tick.png',
                    text: 'Terminar',
                    listeners: {
                        click: {
                            fn: 'onBtnTerminaProduccionClick',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnImprimirProduccion',
                    icon: 'resources/print.png',
                    text: 'Imprimir',
                    listeners: {
                        click: {
                            fn: 'onBtnImprimirProduccionClick',
                            scope: 'controller'
                        }
                    }
                }
            ]
        }
    ],

    onCmbProductoBeforeQuery: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
        queryPlan.forceAll = true;
    }

});