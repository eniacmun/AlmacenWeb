/*
 * File: app/view/DlgContenidoProduccionViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.DlgContenidoProduccionViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.dlgcontenidoproduccion',

    inicializaVentana: function(win) {
        var combo = Ext.ComponentMgr.get("cmbProducto");
        this.cargaProducciones(combo, "");
    },

    AsignaValores: function(rec, inicial) {
        var txtProduccion = Ext.ComponentMgr.get("txtProduccion");
        var txtCantEsperada = Ext.ComponentMgr.get("txtCantEsperada");
        var txtCantidadProducir = Ext.ComponentMgr.get("txtCantidadProducir");
        var combo = Ext.ComponentMgr.get("cmbProducto");
        var comboEmpleado = Ext.ComponentMgr.get("cmbEmpleado");
        var comboProductoVenta = Ext.ComponentMgr.get("cmbProductoVenta");
        var txtPrecio = Ext.ComponentMgr.get("txtPrecio");
        var txtTipoPago = Ext.ComponentMgr.get("txtTipoPago");
        var txtImporte = Ext.ComponentMgr.get("txtImporte");
        var controller = this;
        var cmbCostosAdicionales = Ext.ComponentMgr.get("cmbCostosAdicionales");

        if (rec.claveProducto > " "){
            combo.setValue(rec.claveProducto);
            if (rec.claveProductoVenta){
                combo.getStore().each(function(record){
                    if(record.get("claveproducto") == rec.claveProducto){
                        controller.cargaProductosVenta(record.get("productos"));
                    }
                });
            }
            comboProductoVenta.setValue(rec.claveProductoVenta);
            comboEmpleado.setValue(rec.claveEmpleado);
            txtPrecio.setValue(rec.precioVenta);
            var text = rec.tipoPago == 1 ? rec.cantidadPago + "%" : Ext.util.Format.currency(rec.cantidadPago);
            txtTipoPago.setValue(text);
            txtImporte.setValue(rec.importe);
            if(rec.estado !== 0.0){ // Se carga el valor que trae por defecto cuando no es una produccion nueva y se nceesita conservar el valor.
                var data = [];
                console.log(rec.cantidadPago);
                data.push({"label": rec.tipoPago == 1 ? rec.cantidadPago + "%" : Ext.util.Format.currency(rec.cantidadPago), "value": rec.cantidadPago});
                cmbCostosAdicionales.getStore().loadData(data);
                cmbCostosAdicionales.select(cmbCostosAdicionales.getStore().getAt(0));
            }
        }

        txtProduccion.setValue(rec.claveproduccion);
        txtProduccion.setDisabled(true);

        txtCantEsperada.setValue(rec.cantidadEsperada);
        txtCantEsperada.setDisabled(true);

        txtCantidadProducir.setValue(rec.cantidadProducida);

        txtCantidadProducir.setDisabled(true);
        combo.setDisabled(true);

        Ext.ComponentMgr.get("btnGuardarProduccion").setDisabled(true);
        Ext.ComponentMgr.get("btnTerminaProduccion").setDisabled(true);

        var gridProductos=Ext.ComponentMgr.get("gridProductoProducir");
        var gridReceta=Ext.ComponentMgr.get("gridRecetaProduccion");
        gridProductos.getStore().removeAll();
        gridReceta.getStore().removeAll();
        gridProductos.getStore().loadData(rec.productos,false);
        gridReceta.getStore().loadData(rec.receta,false);

        if (rec.estado === 0.0){//estado NUEVO
            txtCantEsperada.setDisabled(false);
            combo.setDisabled(false);
            Ext.ComponentMgr.get("btnGuardarProduccion").setDisabled(false);
        }

        if (rec.estado == 1.0){//estado REGISTRADO
            txtCantEsperada.setDisabled(true);
            combo.setDisabled(true);
            txtCantidadProducir.setDisabled(false);
            Ext.ComponentMgr.get("btnTerminaProduccion").setDisabled(false);
            if (inicial){
                txtCantidadProducir.setValue(rec.cantidadEsperada);
                this.actualizaCantProducida();
            }
            //hay que cargar los productos
        }

        if (rec.estado == -1.0){//estado CANCELADO
            txtCantEsperada.setDisabled(true);
            combo.setDisabled(true);
            txtCantidadProducir.setDisabled(true);
        }

        this.calculaCostoReal();
    },

    obtieneRegistro: function(win) {
        var wnd = win ? win : Ext.WindowMgr.get("wndContenidoProduccion");
        if (!wnd)  {
            wnd = win;
        }

        if (!wnd)  {
            return false;
        }

        var rec = wnd.currentRecord;
        if (!rec)  {
            return false;
        }

        console.log("obtieneRegistro");
        console.log(rec.claveProductoVenta);

        return rec;
    },

    guardaValores: function() {
        var txtProduccion = Ext.ComponentMgr.get("txtProduccion");
        var txtCantEsperada = Ext.ComponentMgr.get("txtCantEsperada");
        var txtCantidadProducir = Ext.ComponentMgr.get("txtCantidadProducir");
        var combo = Ext.ComponentMgr.get("cmbProducto");
        var comboEmpleado = Ext.ComponentMgr.get("cmbEmpleado");
        var comboPrecioProduccion = Ext.ComponentMgr.get("cmbProductoVenta");

        var rec=this.obtieneRegistro();
        rec.claveProducto=combo.getValue();
        rec.claveproduccion=txtProduccion.getValue();
        rec.cantidadEsperada=txtCantEsperada.getValue();
        rec.cantidadProducida=txtCantidadProducir.getValue();

        // campos para producciones con costo
        var claveEmpleado = Ext.ComponentMgr.get("cmbEmpleado").getValue();
        var claveProductoVenta = Ext.ComponentMgr.get("cmbProductoVenta").getValue();
        var precioVenta = Ext.ComponentMgr.get("txtPrecio").getValue();
        rec.claveEmpleado = claveEmpleado;
        rec.claveProductoVenta = claveProductoVenta !== null ? claveProductoVenta : rec.claveProductoVenta;
        rec.precioVenta = precioVenta;

        var productos = [];
        var receta = [];
        var gridProductos=Ext.ComponentMgr.get("gridProductoProducir");
        var gridReceta=Ext.ComponentMgr.get("gridRecetaProduccion");
        gridProductos.getStore().each(function(record){
            productos.push(record.data);
        });
        gridReceta.getStore().each(function(record){
            receta.push(record.data);
        });
        var wnd = Ext.WindowMgr.get("wndContenidoProduccion");
        if (wnd)
            wnd.currentRecord=rec;
        console.log("guardavalores");
        this.AsignaValores(rec);
    },

    cargaReceta: function(claveProducto,cantidad) {
        var request = new Object();
        request.method = "cargareceta";
        request.params = [];
        request.params.push({
            "name": "imei",
            "value": almacen.getApplication().SessionId
        });

        var clavePlatillo=claveProducto;
        var cantidadPlatillo=cantidad;
        request.params.push({
            "name": "platillo",
            "value": claveProducto
        });
        request.params.push({
            "name": "cantidadplatillo",
            "value": cantidad
        });
        var currentController = this;
        var rec=this.obtieneRegistro();

        console.log("carga receta");

        almacen.getApplication().loadData(request, function(response) {
            rec.productos=response.producto;
            rec.receta=response.materia;
            currentController.AsignaValores(rec);
            currentController.guardaValores();
        });
    },

    actualizaCantEsperada: function() {
        var txtCantEsperada = Ext.ComponentMgr.get("txtCantEsperada");
        var cantidadEsperada = txtCantEsperada.getValue();
        var rec = this.obtieneRegistro();
        if(cantidadEsperada<0){
                    cantidadEsperada=0;
        }
        var gridProductos=Ext.ComponentMgr.get("gridProductoProducir");
        var gridReceta=Ext.ComponentMgr.get("gridRecetaProduccion");
        gridProductos.getStore().each(function(record){
            proporcion = record.get("porcion");
            cantidadEsperadaDetalle=Math.abs(cantidadEsperada*proporcion);
            CostoUnitario=record.get("costoUnitario");
            record.beginEdit();
            record.set("cantidadEsperada", cantidadEsperadaDetalle);
            record.set("costoEsperado", CostoUnitario*cantidadEsperadaDetalle);
            record.commit();
        });
        gridReceta.getStore().each(function(record){
            proporcion = record.get("porcion");
            cantidadEsperadaDetalle=Math.abs(cantidadEsperada*proporcion);
            CostoUnitario=record.get("costoUnitario");
            record.beginEdit();
            record.set("cantidadEsperada", cantidadEsperadaDetalle);
            record.set("costoEsperado", CostoUnitario*cantidadEsperadaDetalle);
            record.commit();
        });
        this.guardaValores();
    },

    calculaImporteCostoManoObra: function(txtCantidad) {
        var txtCantEsperada = Ext.ComponentMgr.get(txtCantidad);
        var cantidadEsperada = txtCantEsperada.getValue();
        if(cantidadEsperada<0){
            cantidadEsperada=0;
        }
        var txtImporte = Ext.ComponentMgr.get("txtImporte");
        var txtPrecio = Ext.ComponentMgr.get("txtPrecio");
        var precio = txtPrecio.getValue();
        var rec = this.obtieneRegistro();
        console.log(rec);
        if(rec.estadoCosto == 1){
            if(rec.tipoPago == 1){ // por %
                rec.importe = (cantidadEsperada * precio) * (rec.cantidadPago / 100);
            } else{
                rec.importe = cantidadEsperada * rec.cantidadPago;
            }
            rec.importe = (Math.round(rec.importe*100)/100);// redondeo a dos digitos
            txtImporte.setValue(rec.importe);
        }
        this.calculaCostoReal();
    },

    actualizaCantProducida: function() {
        var txtProduccion = Ext.ComponentMgr.get("txtCantidadProducir");
        var cantidadProducida = txtProduccion.getValue();
        var rec = this.obtieneRegistro();
        if(cantidadProducida<0){
                    cantidadProducida=0;
        }
        var gridProductos=Ext.ComponentMgr.get("gridProductoProducir");
        var gridReceta=Ext.ComponentMgr.get("gridRecetaProduccion");
        gridProductos.getStore().each(function(record){
            proporcion = record.get("porcion");
            cantidadProducidaDetalle=Math.abs(cantidadProducida*proporcion);
            CostoUnitario=record.get("costoUnitario");
            record.beginEdit();
            record.set("cantidadProducida", cantidadProducidaDetalle);
            record.set("costoReal", CostoUnitario*cantidadProducidaDetalle);
            record.commit();
        });
        gridReceta.getStore().each(function(record){
            proporcion = record.get("porcion");
            cantidadProducidaDetalle=Math.abs(cantidadProducida*proporcion);
            CostoUnitario=record.get("costoUnitario");
            record.beginEdit();
            record.set("cantidadProducida", cantidadProducidaDetalle);
            record.set("costoReal", CostoUnitario*cantidadProducidaDetalle);
            record.commit();
        });
        this.guardaValores();
    },

    validaGuardarProduccion: function(rec, funcEjecuta) {

        //validamateriaprimalimites
        var txtProduccion = Ext.ComponentMgr.get("txtProduccion");
        var txtCantEsperada = Ext.ComponentMgr.get("txtCantEsperada");
        var txtCantidadProducir = Ext.ComponentMgr.get("txtCantidadProducir");
        var combo = Ext.ComponentMgr.get("cmbProducto");
        var comboEmpleado = Ext.ComponentMgr.get("cmbEmpleado");
        var comboProductoVenta = Ext.ComponentMgr.get("cmbProductoVenta");

        if (!txtCantEsperada.isValid()){
            Ext.Msg.alert('Aviso','Capture la cantidad esperada');
            return false;
        }
        if (!txtCantidadProducir.isValid()){
            Ext.Msg.alert('Aviso','Capture la cantidad producida');
            return false;
        }
        if (!combo.isValid()){
            Ext.Msg.alert('Aviso','Seleccione el producto');
            return false;
        }
        console.log(rec);
        if(rec.estadoCosto == 1){ // validaciones con costo de produccion
            if (!comboEmpleado.isValid()){
                Ext.Msg.alert('Aviso','Seleccione el empleado al que asociar la producción.');
                return false;
            }
            if (!comboProductoVenta.isValid()){
                Ext.Msg.alert('Aviso','Seleccione el producto venta para obtener el precio.');
                return false;
            }
        }
        //debemos validar si la materia prima esta entre los limites
        var request = new Object();
        request.method = "validamateriaprimalimites";
        request.params = [];
        request.params.push({
            "name": "imei",
            "value": almacen.getApplication().SessionId
        });
        var cantidad = 0;
        if (rec.estado == 1.0)
            cantidad=txtCantidadProducir.getValue();
        if (rec.estado == 0.0)
            cantidad=txtCantEsperada.getValue();

        var cantidadPlatillo=cantidad;
        request.params.push({
            "name": "clavemateria",
            "value": combo.getValue()
        });
        request.params.push({
            "name": "cantidad",
            "value": cantidad
        });
        var currentController = this;
        var rec1 = rec;
        console.log(rec1);
        almacen.getApplication().loadData(request, function(response) {
            if (!response.isInfo){//la cantidad sobrepasa los limites, se procede a preguntar por la validacion
                Ext.Msg.show({
                    title: 'Confirmar',
                    message: 'La cantidad ingresada (' + cantidad + ') para el producto ' + rec1.concepto + ' con unidad ' + rec1.unidad + ' es correcta?',
                    buttons: Ext.Msg.YESNO,
                    icon: Ext.Msg.QUESTION,
                    fn: function(btn) {
                        if (btn === 'yes') {
                            funcEjecuta.call(this, rec);
                        } else if (btn === 'no') {

                        }
                    }
                });
            }else{//la cantidad es correcta
                funcEjecuta.call(this, rec);
            }
        });
    },

    obtieneParentController: function() {
        var wnd =Ext.WindowMgr.get("wndContenidoProduccion");
        return wnd.parentController;

    },

    cargaProducciones: function(combo, claveClasificacion) {
        var win = Ext.ComponentMgr.get("wndContenidoProduccion");

        var rec = this.obtieneRegistro(win);

        if (!rec)
            return false;

        console.log("carga producciones");
        console.log(rec);

        var currentController=this;
        var request = new Object();request.method = "consultaproductosproducir";request.params = [];
        request.params.push({"name": "imei", "value": almacen.getApplication().SessionId});
        request.params.push({"name": "claveclasificacion", "value": claveClasificacion});
        almacen.getApplication().loadData(request, function(response) {
            console.log(response);
            combo.getStore().loadData(response.productos, false);
            combo.getStore().sort("nombreproducto", "ASC");
            currentController.AsignaValores(rec,true);
        });
    },

    cargaProductosVenta: function(list) {
        console.log("cargaProductosVenta");
        var combo = Ext.ComponentMgr.get("cmbProductoVenta");
        combo.getStore().loadData(list);
        combo.getStore().sort("nombreproducto", "ASC");
    },

    cargaCostosAdicionales: function(record) {
        var cantidadpagoCostoProduccion  = record.get("cantidadpagoCostoProduccion");
        var cantidadpagoCostoProduccion2 = record.get("cantidadpagoCostoProduccion2");
        var cantidadpagoCostoProduccion3 = record.get("cantidadpagoCostoProduccion3");
        var cantidadpagoCostoProduccion4 = record.get("cantidadpagoCostoProduccion4");
        var cantidadpagoCostoProduccion5 = record.get("cantidadpagoCostoProduccion5");
        var data = [];

        var simbolo = record.get("tipopagoCostoProduccion") == 1 ? "%" : "$";
        if(cantidadpagoCostoProduccion > -1)
            data.push({"label": cantidadpagoCostoProduccion + simbolo, "value": cantidadpagoCostoProduccion });
        if(cantidadpagoCostoProduccion2 > -1)
            data.push({"label": cantidadpagoCostoProduccion2 + simbolo, "value": cantidadpagoCostoProduccion2 });
        if(cantidadpagoCostoProduccion3 > -1)
            data.push({"label": cantidadpagoCostoProduccion3 + simbolo, "value": cantidadpagoCostoProduccion3 });
        if(cantidadpagoCostoProduccion4 > -1)
            data.push({"label": cantidadpagoCostoProduccion4 + simbolo, "value": cantidadpagoCostoProduccion4 });
        if(cantidadpagoCostoProduccion5 > -1)
            data.push({"label": cantidadpagoCostoProduccion5 + simbolo, "value": cantidadpagoCostoProduccion5 });

        console.log(data);

        var combo = Ext.ComponentMgr.get("cmbCostosAdicionales");
        combo.getStore().loadData(data);
        combo.select(combo.getStore().getAt(0));
        //combo.getStore().sort("nombreproducto", "ASC");
    },

    calculaCostoReal: function() {
        var recetas = Ext.ComponentMgr.get("gridRecetaProduccion");
        var cReal=0.0;

        recetas.getStore().each(function(rec){
            cReal += rec.get("costoReal");
        });

        cReal=Number(cReal.toFixed(2));

        Ext.ComponentMgr.get("txtCostoReal").setValue('$' + cReal);

    },

    onComboboxBeforeRender: function(component, eOpts) {
        var request = new Object(); request.method="clasificacionesplatillo"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            component.getStore().loadData(response.productos);
            component.getStore().sort('nombreproducto','ASC');
        }, function(response){
            Ext.Msg.alert("Error al consultar las clasificaciones");
            console.log(response);
        });

        var wnd = Ext.ComponentMgr.get("wndContenidoProduccion");

        if(wnd.currentRecord.estado !== 0){
            component.setDisabled(true);
        } else{
            component.setDisabled(false);
        }
    },

    onComboboxSelect: function(combo, records, eOpts) {
        var wnd = Ext.WindowMgr.get("wndContenidoProduccion");
        wnd.currentRecord = JSON.parse(JSON.stringify(wnd.blankRecord)); // Se clona registro en blanco

        var comboProducto = Ext.ComponentMgr.get("cmbProducto");
        comboProducto.setValue("");

        this.cargaProducciones(comboProducto, combo.getValue());
    },

    onCmbProductoSelect: function(combo, records, eOpts) {
        var txtCantEsperada = Ext.ComponentMgr.get("txtCantEsperada");
        var cantidad=txtCantEsperada.getValue();
        var claveProducto = records[0].get("claveproducto");
        var nombreProducto = records[0].get("nombreproducto");
        var unidad = records[0].get("unidad");

        var rec=this.obtieneRegistro();
        rec.claveProducto = claveProducto; // agregado 04 03 2021
        rec.concepto=nombreProducto;
        rec.unidad=unidad;

        // campos para producciones con costo
        var cantidadpagoCostoProduccion = records[0].get("cantidadpagoCostoProduccion");
        var tipopagoCostoProduccion = records[0].get("tipopagoCostoProduccion");
        var estadoCostoProduccion = records[0].get("estadoCostoProduccion");
        var claveProductoVentaCostoProduccion = records[0].get("claveProductoVentaCostoProduccion");
        rec.cantidadPago =cantidadpagoCostoProduccion;
        rec.tipoPago = tipopagoCostoProduccion;
        rec.estadoCosto = estadoCostoProduccion;
        //rec.claveProductoVenta = claveProductoVentaCostoProduccion;
        console.log("cmbProductoSelect");
        console.log(rec);
        console.log(records[0]);
        //return;

        var comboEmpleado = Ext.ComponentMgr.get("cmbEmpleado");
        var cmbProductoVenta = Ext.ComponentMgr.get("cmbProductoVenta");
        var txtPrecio = Ext.ComponentMgr.get("txtPrecio");
        var txtTipoPago = Ext.ComponentMgr.get("txtTipoPago");
        var txtImporte = Ext.ComponentMgr.get("txtImporte");
        var cmbCostosAdicionales = Ext.ComponentMgr.get("cmbCostosAdicionales");

        if(records[0].get("estadoCostoProduccion") == 1 ){ // agregado 04 03 2021
            comboEmpleado.setDisabled(false);
            cmbProductoVenta.setDisabled(false);
            txtPrecio.setDisabled(false);
            txtTipoPago.setDisabled(false);
            var text = rec.tipoPago == 1 ? rec.cantidadPago + "%" : Ext.util.Format.currency(rec.cantidadPago);
            txtTipoPago.setValue(text);
            txtImporte.setDisabled(false);
            // Se lee el producto configurado asi como su precio y se registra solo si existe en el store actual
            cmbProductoVenta.store.each(function(record, id){
                if(record.get("claveproducto") == claveProductoVentaCostoProduccion){
                    console.log(record);
                    rec.claveProductoVenta = claveProductoVentaCostoProduccion;
                    rec.precioVenta = record.get("precio");
                }
            });
            cmbCostosAdicionales.setDisabled(false);
        } else{
            comboEmpleado.setDisabled(true);
            cmbProductoVenta.setDisabled(true);
            txtPrecio.setDisabled(true);
            txtTipoPago.setDisabled(true);
            txtImporte.setDisabled(true);
            cmbCostosAdicionales.setDisabled(true);
        }
        this.AsignaValores(rec);
        this.cargaReceta(claveProducto,cantidad);
        this.calculaImporteCostoManoObra("txtCantEsperada");
    },

    onCmbProductoBeforeSelect: function(combo, record, index, eOpts) {
        console.log("---------------");
        console.log(record);
        if(record.get("estadoCostoProduccion") == 1 ){ // agregado 10 03 2021
            if(record.get("productos").length === 0){
                Ext.Msg.alert("Error", "La producción no contiene productos venta asociados y no puede ser utilizada. Eliga una diferente.");
                return false;
            } else{
                this.cargaProductosVenta(record.get("productos"));
                this.cargaCostosAdicionales(record);
                return true;
            }
        }
    },

    onTxtCantEsperadaKeyup: function(textfield, e, eOpts) {
        var currentController=this;
        if (window.currentTimeout){
            window.clearTimeout(window.currentTimeout);
        }
        window.currentTimeout = window.setTimeout(function(){
            currentController.actualizaCantEsperada();
            currentController.calculaImporteCostoManoObra("txtCantEsperada");
            window.currentTimeout=null;
        }, 500);
    },

    onTxtCantEsperadaSpin: function(spinnerfield, direction, eOpts) {
        var currentController=this;
        if (window.currentTimeout){
            window.clearTimeout(window.currentTimeout);
        }
        window.currentTimeout = window.setTimeout(function(){
            currentController.actualizaCantEsperada();
            currentController.calculaImporteCostoManoObra("txtCantEsperada");
            window.currentTimeout=null;
        }, 500);
    },

    onTxtCantidadProducirKeyup: function(textfield, e, eOpts) {
        var currentController=this;
        if (window.currentTimeout1){
            window.clearTimeout(window.currentTimeout1);
        }
        window.currentTimeout1 = window.setTimeout(function(){
            currentController.actualizaCantProducida();
            currentController.calculaImporteCostoManoObra("txtCantidadProducir");
            window.currentTimeout=null;
        }, 500);
    },

    onTxtCantidadProducirSpin: function(spinnerfield, direction, eOpts) {
        var currentController=this;
        if (window.currentTimeout1){
            window.clearTimeout(window.currentTimeout1);
        }
        window.currentTimeout1 = window.setTimeout(function(){
            currentController.actualizaCantProducida();
            currentController.calculaImporteCostoManoObra("txtCantidadProducir");
            window.currentTimeout=null;
        }, 500);
    },

    onCmbEmpleadoBeforeRender: function(component, eOpts) {
        var request = new Object(); request.method="obtieneempleados"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            component.getStore().loadData(response.empleados);
            component.getStore().sort('nombreproducto','ASC');
        }, function(response){
            Ext.Msg.alert("Error al consultar los empleados");
            console.log(response);
        });

    },

    onCmbProductoVentaSelect: function(combo, records, eOpts) {
        var precio = records[0].get("precio");
        var txtPrecio = Ext.ComponentMgr.get("txtPrecio");
        txtPrecio.setValue(precio);
        this.calculaImporteCostoManoObra("txtCantEsperada");
    },

    onCmbCostosAdicionalesSelect: function(combo, records, eOpts) {
        console.log(records);

        var cantidadPago = records[0].get("value");

        console.log(cantidadPago);

        var rec = this.obtieneRegistro();

        rec.cantidadPago = cantidadPago;

        this.calculaImporteCostoManoObra("txtCantEsperada"); // solo se podra modificar al momento de crear una nueva
    },

    onCellEditingProductosBeforeEdit: function(editor, context, eOpts) {
        var rec = this.obtieneRegistro();
        if (context.colIdx == 5 && rec.estado == 1.0)
        return true;
        else
        return false;
    },

    onCellEditingProductosEdit: function(editor, context, eOpts) {
        CostoUnitario=context.record.get("costoUnitario");
        cantidadProducidaDetalle=context.record.get("cantidadProducida");
        context.record.beginEdit();
        context.record.set("costoReal", CostoUnitario*cantidadProducidaDetalle);
        context.record.commit();
    },

    onCellEditingRecetaBeforeEdit: function(editor, context, eOpts) {
        var rec = this.obtieneRegistro();
        if (context.colIdx == 5 && rec.estado == 1.0)
        return true;
        else
        return false;
    },

    onCellEditingRecetaEdit: function(editor, context, eOpts) {
        CostoUnitario=context.record.get("costoUnitario");
        cantidadProducidaDetalle=context.record.get("cantidadProducida");
        context.record.beginEdit();
        context.record.set("costoReal", CostoUnitario*cantidadProducidaDetalle);
        context.record.commit();

        if(context.colIdx == 5){
            editor.completeEdit();
            editor.startEditByPosition({
                row: context.rowIdx+1,
                column: context.colIdx
            });
        }

        this.calculaCostoReal();
    },

    onWindowAfterRender: function(component, eOpts) {
        this.inicializaVentana(component);
    },

    onBtnGuardarProduccionClick: function(button, e, eOpts) {
        this.guardaValores();
        parentController=this.obtieneParentController();
        this.validaGuardarProduccion(this.obtieneRegistro(), function(rec){
            parentController.guardaProduccion(rec);
        });
    },

    onBtnTerminaProduccionClick: function(button, e, eOpts) {
        this.guardaValores();
        parentController=this.obtieneParentController();
        this.validaGuardarProduccion(this.obtieneRegistro(), function(rec){
            parentController.terminaProduccion(rec);
        });
    },

    onBtnImprimirProduccionClick: function(button, e, eOpts) {
        parentController=this.obtieneParentController();
        parentController.imprimeProduccion(this.obtieneRegistro());
    }

});
