/*
 * File: app/view/DlgPedidosViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.DlgPedidosViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.dlgpedidos',

    control: {
        "#cmbProveedorCedis": {
            afterrender: 'cargaProveedorCedis',
            beforequery: 'filtraComboCedis'
        },
        "#cmbSucursal": {
            afterrender: 'cargaSucursalesPedido'
        },
        "button#btnConsultarPedidos": {
            click: 'ConsultaProductosSugeridos'
        },
        "button#btnWndPedidosCerrar": {
            click: 'cerrarVentana'
        },
        "button#btnWndConsultarPedidos1": {
            click: 'ConsultarPedidos'
        },
        "button#btnSavePedido": {
            click: 'GuardaPedido'
        },
        "#cmbDiasTendencia": {
            afterrender: 'consultaDiasTendencia'
        },
        "#cmbDiasConsumo": {
            afterrender: 'consultaDiasConsumo'
        },
        "#gridCedis": {
            beforerender: 'inicializaGrid'
        }
    },

    cargaProveedorCedis: function(component, eOpts) {

        console.log("se cargan los cedis");
        var el = component.getEl();
        el.mask("cargando");

        Ext.ComponentMgr.get("enableProveedor").setDisabled(true);

        var request = new Object(); request.method="consultacedis"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            console.log("response");console.log(response);
            component.getStore().loadData(response.proveedores);
            component.getStore().sort('nombreProveedor','ASC');
            if (almacen.getApplication().currentSession.esCedi){
                component.setDisabled(true);
                component.setValue(almacen.getApplication().currentSession.claveSucursal);
            }
            Ext.ComponentMgr.get("enableProveedor").setDisabled(false);
            el.unmask();
        });
    },

    cargaSucursalesPedido: function(component, eOpts) {
        console.log("se cargan los sucursales: " + almacen.getApplication().currentSession.esCedi);
        if (!almacen.getApplication().currentSession.esCedi){
            component.setVisible(false);
            return;

        };
        var request = new Object(); request.method="sucursales"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            component.getStore().loadData(response.proveedores);
            component.getStore().sort('nombreProveedor','ASC');

        });
    },

    filtraComboCedis: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
        queryPlan.forceAll = true;
    },

    ConsultaProductosSugeridos: function(button, e, eOpts) {
        if (!Ext.ComponentMgr.get("cmbProveedorCedis").isValid() ){
            Ext.Msg.alert('', 'Por favor especifique un proveedor antes de realizar la busqueda.');
            return;
        }

        // SE ocultan columnas
        this.ocultarColumnas();

        var controller = this;

        if(typeof window.winOption != 'undefined'){
            window.winOption.close();
        }
        window.winOption =  Ext.create('Ext.window.Window', {
            title: 'Seleccione el método de consulta',
            height: 150,
            width: 500,
            layout: 'fit',
            modal:true,
            bodyPadding: 20,
            border: 2,
            buttons: [
                {
                    text: 'CONFIRMAR',
                    scale: 'medium',
                    cls: 'btn-delete-yes',
                    listeners: {
                        click: function() {

                            var radio1 = Ext.getCmp('ss'),

                                radio2 = Ext.getCmp('ss1'),
                                radio3 = Ext.getCmp('ss2');
                            radio4 = Ext.getCmp('ss3');

                            //if L is selected, change to M
                            if (radio1.getValue()) {
                                controller.consultaProductos(button, e, eOpts, 1);
                                window.winOption.close();
                                return;
                            }

                            //if XL is selected, change to L
                            if (radio2.getValue()) {
                                controller.consultaProductos(button, e, eOpts, 2);
                                window.winOption.close();
                                return;
                            }

                            //if XL is selected, change to L
                            if (radio3.getValue()) {
                                controller.consultaProductos(button, e, eOpts, 3);
                                window.winOption.close();
                                return;
                            }

                            //if XL is selected, change to L
                            if (radio4.getValue()) {
                                controller.consultaProductos(button, e, eOpts, 4);
                                window.winOption.close();
                                return;
                            }

                        }
                    }
                }, '->',
                {
                    text: 'CANCELAR',
                    scale: 'medium',
                    cls: 'btn-delete-no',
                    listeners: {
                        click: function() {
                            window.winOption.close();
                        }
                    }
                }
            ],
            items: [
                {
                    xtype      : 'fieldcontainer',
                    fieldLabel : '',
                    defaultType: 'radiofield',
                    defaults: {
                        flex: 1
                    },
                    layout: 'hbox',
                    items: [
                        {
                            boxLabel  : 'Venta<br>Esperada',
                            checked: true,
                            name      : 'size',
                            inputValue: '1',
                            id        : 'ss'
                        }, {
                            boxLabel  : 'Máximo',
                            name      : 'size',
                            inputValue: '2',
                            id        : 'ss1'
                        }, {
                            boxLabel  : 'Mínimo',
                            name      : 'size',
                            inputValue: '3',
                            id        : 'ss2'
                        }, {
                            boxLabel  : 'Proyección',
                            name      : 'size',
                            inputValue: '4',
                            id        : 'ss3'
                        }
                    ]
                }
            ]
        });

        if(typeof window.currentSelectedProveedor === 'undefined' || window.currentSelectedProveedor.data.esCedi){
            controller.consultaProductos(button, e, eOpts, 2);
        }else{
            window.winOption.show();
        }





    },

    cerrarVentana: function(button, e, eOpts) {
         var wnd =Ext.WindowMgr.get("wndRegistroPedidos");
         wnd.close();

    },

    ConsultarPedidos: function(button, e, eOpts) {
        var wnd=Ext.create("almacen.view.DlgConsultaTraspasos2", {id:"wndConsultaPedidos2"});
        wnd.parentController=this;
        wnd.center();
        wnd.show();
    },

    GuardaPedido: function(button, e, eOpts) {
        if (window.currentPedido){

            var grid=Ext.ComponentMgr.get("gridCedis");
            var productos = [];
            var Total = 0;

            /*****MOSTRAR MENSAJE SI NO SE CALCULÓ CORRECTAMENTE EL IMPORTE DE ALGÚN PRODUCTO*****/
            var productosImporteNull = [];//Agregaremos los productos que no se calculen correctamente su IMPORTE
            var productoImporteNull;//Objeto que representará el producto con IMPORTE erroneo
            var msjNoImporte = "";//Mensaje que se mostrará al usuario
            var importeValidar;
            grid.getStore().each(function (rec) {
                if (rec.get("CantidadSucursal") > 0 && rec.get("Agregar")) {
                    importeValidar = rec.get("Importe");
                    //Validamos si el IMPORTE no es númerico lo agregamos a la lista de productos con IMPORTE mal calculado
                    if(typeof importeValidar !== 'number'){
                        productosImporteNull.push(rec.data);//Agregamos los productos que no se calcularon correctamente su IMPORTE
                    }
                }
            });

            //Verificamos si hay algún producto con IMPORTE mal calculado
            if(productosImporteNull.length > 0){
                msjNoImporte += "<table><tr><td>CLAVE </td><td>PRODUCTO </td><tr>";
                //recorremos los productos con IMPORTE erroneo para obtener los datos y mostrarlos al usuario
                for (i = 0; i < productosImporteNull.length; i++) {
                    productoImporteNull = productosImporteNull[i];
                    msjNoImporte += "<hr /><tr><td> " + productoImporteNull.claveproducto + "</td><td> " + productoImporteNull.NombreProducto + "</td></tr>";
                }
                msjNoImporte += "</table>";
                Ext.Msg.alert('', 'No se pudo calcular el IMPORTE de los siguientes productos, verificar que "Proporción" sea mayor a cero. Comuníquese con el área de implementaciones para poder actualizar la información de los productos.\n\n' + msjNoImporte);
                return;//Detenemos el flujo del evento GuardaPedido
            }
            /*************************************************************************************/

            grid.getStore().each(function(rec){
                if (rec.get("CantidadSucursal") > 0 && rec.get("Agregar")){
                    var prod = rec.data;
                    //Verificamos si el IMPORTE no es numérico agregamos 0 para cada producto en el pedido
                    if(typeof prod.Importe !== 'number'){
                        prod.Importe = 0;
                    }
                    productos.push(prod);
                    Total += prod.Importe;
                }
            });

            /*
                Eliminar despues de pruebas generar productos duplicados
            */
            /*
            grid.getStore().each(function(rec){
                if (rec.get("CantidadSucursal") > 0 && rec.get("Agregar")){
                    if (rec.get("claveproducto") == '113'){
                        rec.data.cantidad=7;
                        productos.push(rec.data);
                        Total+=rec.get("Importe");
                    }else{
                        productos.push(rec.data);
                        Total+=rec.get("Importe");
                    }
                }
            });*/
            /*
               FIN Eliminar despues de pruebas generar productos duplicados
            */

            var request = new Object(); request.method="guardarpedidos"; request.params=[];
            if (almacen.getApplication().currentSession.esCedi) {
                if (!Ext.ComponentMgr.get("cmbSucursal").isValid()){
                    Ext.Msg.alert('', 'Por favor especifique una sucursal antes de realizar la busqueda.');
                    return;
                }
                request.params.push({"name":"filtroSucursal","value":Ext.ComponentMgr.get("cmbSucursal").getValue()});
            }

            window.currentPedido.Total=Total;
            window.currentPedido.productos = productos;
            var currentController=this;


            var existeProducto = {};
            var productosDuplicados=[];
            var iflag=0;
            for (i = 0; i < window.currentPedido.productos.length; i++){
                currentProducto=window.currentPedido.productos[i];
                // if (existeProducto[currentProducto.claveproducto]){
                //   productosDuplicados.push(existeProducto[currentProducto.claveproducto]);
                productosDuplicados.push(currentProducto);
                iflag++;
                //}
                //existeProducto[currentProducto.claveproducto]=currentProducto;
            }
            var cantidadesproducto={};
            if (iflag > 0){
                for (i=0; i < productosDuplicados.length; i++){
                    currentProducto=productosDuplicados[i];
                    currentProducto.CantidadSucursal = Number.parseFloat(currentProducto.CantidadSucursal).toFixed(5);// manejar 5 decimales
                    var cant = 0;
                    if (cantidadesproducto[currentProducto.claveproducto]){
                        cant = cantidadesproducto[currentProducto.claveproducto].cantidad;
                    }else{
                        cantidadesproducto[currentProducto.claveproducto] = {cantidad:currentProducto.CantidadSucursal,nombre:currentProducto.NombreProducto,clave:currentProducto.claveproducto};
                        cant = currentProducto.CantidadSucursal;

                    }
                    if ((cant != currentProducto.CantidadSucursal)){
                        cantidadesproducto[currentProducto.claveproducto].cantidad += cant;
                    }
                }
                var imessage = "";
                var prodOrdenados = {};
                var aProdOrdenados= [];
                for (var c in cantidadesproducto){
                    currentProducto=cantidadesproducto[c];
                    prodOrdenados[currentProducto.nombre] = currentProducto;
                    aProdOrdenados.push(currentProducto.nombre);
                }
                aProdOrdenados.sort();/*
                for (i=0; i < aProdOrdenados.length; i++)
                {
                    currentProducto=prodOrdenados[aProdOrdenados[i]];
                    imessage+="<li> " + currentProducto.clave +  " " + currentProducto.nombre + " Cant. " + currentProducto.cantidad + " </li>";

                }*/
                imessage += "<table><tr><td>CLAVE </td><td>PRODUCTO </td><td>CANTIDAD </td><tr>";
                for (i = 0; i < aProdOrdenados.length; i++) {
                    currentProducto = prodOrdenados[aProdOrdenados[i]];
                    imessage += "<tr><td> " + currentProducto.clave + "</td><td> " + currentProducto.nombre + "</td> <td  style='text-align:right'>" + currentProducto.cantidad + " </td></tr>";
                }
                imessage += "</table>";
                Ext.Msg.show({
                    title: 'Pedidos',
                    message: "¿Las siguientes cantidades para los productos son correctos?:<ul>" + imessage+"</ul>",
                    width: 600,
                    cls:'productos-cls',
                    buttons: Ext.Msg.OKCANCEL,
                    fn: function(buttonId){
                        if (buttonId=="ok"){
                            if(typeof window.currentSelectedProveedor !== 'undefined'){ // Se esta en Sucursal
                                if (!window.currentSelectedProveedor.data.esCedi){ // Pedido a Proveedor
                                    // Se genera la ventana que lee que correos
                                    var wnd=Ext.create("almacen.view.DlgCorreo", {id:"wndCorreo",currentRecord:"response"});
                                    wnd.parentController=currentController;
                                    wnd.currentRecord="response";
                                    wnd.center();
                                    wnd.show();
                                }
                                else{ // Pedido a Cedis
                                    //return record.get("esInventariado") ? "" : "no-inventory";
                                    currentController.guardaPedido(currentController);
                                }
                            }
                            else{ // Se esta en CEDIS
                                currentController.guardaPedido(currentController);
                            }
                        }
                    },
                    animateTarget: 'btnSavePedido',
                    icon: Ext.window.MessageBox.INFO
                });
                return;

            }

            // almacen.getApplication().showLoader({'peso':'1','mensaje':'Guardando pedidos, espere por favor...'});

            /*request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
            request.params.push({"name":"Pedido","value":Ext.encode(window.currentPedido)});
            var fechaRecibe = "";
            var dt = Ext.ComponentMgr.get("dtRecepcionCedis");

            if (dt.isValid()){
                fechaRecibe = dt.getRawValue();
                request.params.push({"name":"fecharecep","value":fechaRecibe});
            }

            almacen.getApplication().loadData(request,function(response){
                currentController.Limpiar();
                window.currentPedido = null;

            });*/

        }
    },

    consultaDiasTendencia: function(component, eOpts) {
        var request = new Object(); request.method="diastendencia"; request.params=[];
                request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                almacen.getApplication().loadData(request,function(response){
                    component.getStore().loadData(response.items);
                    component.getStore().sort('nombreProveedor','ASC');
                });
    },

    consultaDiasConsumo: function(component, eOpts) {
        var request = new Object(); request.method="diasconsumo"; request.params=[];
                request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                almacen.getApplication().loadData(request,function(response){
                    component.getStore().loadData(response.items);
                    component.getStore().sort('nombreProveedor','ASC');
                });
    },

    inicializaGrid: function(component, eOpts) {
        console.log("Este es el grid");
        console.log(component);
        var dt = Ext.Date.add(new Date(), Ext.Date.DAY, -6);
        var objdias = [];
        objdias['Monday']='Lunes';
        objdias['Tuesday']='Martes';
        objdias['Thursday']='Jueves';
        objdias['Wednesday']='Miercoles';
        objdias['Friday']='Viernes';
        objdias['Saturday']='Sabado';
        objdias['Sunday']='Domnigo';
        var dia = Ext.Date.format(dt,"l");
        var texto=objdias[dia] + " " + Ext.Date.format(dt,"d/m/Y");
        console.log("Texto " + texto);
        component.columns[almacen.getApplication().columnaSemana].setText(texto);

        component.updateLayout();
    },

    Limpiar: function() {
        Ext.ComponentMgr.get("gridCedis").getStore().removeAll();
        if (!almacen.getApplication().currentSession.esCedi){
            Ext.ComponentMgr.get("cmbProveedorCedis").clearValue();
        }else{
            // solo se limpia si existe el campo y no se tiene habilitado el check de proveedor externos
            // o si no esta definido el campo, es decir, que se esta como sucursal, por el anterior condicional si o si debe de exister, pero se deja por cualquier problema.
            enableProveedor = Ext.ComponentMgr.get("enableProveedor");
            if(enableProveedor){
                console.log("existe el campo");
                if(!enableProveedor.getValue()){
                    Ext.ComponentMgr.get("cmbSucursal").clearValue();
                }
            }else{
                Ext.ComponentMgr.get("cmbSucursal").clearValue();
            }

        }

    },

    consultaProductos: function(button, e, eOpts, option) {
        Ext.ComponentMgr.get("gridCedis").getStore().clearFilter();
        var store= Ext.ComponentMgr.get("gridCedis").getStore();
        store.remove(store.getRange());
        Ext.ComponentMgr.get("checkuncheckAll").setValue(false);



        var request = new Object(); request.method="consultaproductossugeridos"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        if (almacen.getApplication().currentSession.esCedi) {
            if (!Ext.ComponentMgr.get("cmbSucursal").isValid()){
                Ext.Msg.alert('', 'Por favor especifique una sucursal antes de realizar la busqueda.');
                return;
            }
            request.params.push({"name":"filtroSucursal","value":Ext.ComponentMgr.get("cmbSucursal").getValue()});
        }
        request.params.push({"name":"filtroCedis","value":Ext.ComponentMgr.get("cmbProveedorCedis").getValue()});
        var filtroDias = Ext.ComponentMgr.get("cmbDiasTendencia").isValid()  ? Ext.ComponentMgr.get("cmbDiasTendencia").getValue() : "7";
        var filtroDiasP = Ext.ComponentMgr.get("cmbDiasConsumo").isValid()  ? Ext.ComponentMgr.get("cmbDiasConsumo").getValue() : "7";
        request.params.push({"name":"diasconsumo","value":filtroDias});
        request.params.push({"name":"diastendencia","value":filtroDiasP});


        if(typeof window.currentSelectedProveedor !== 'undefined'){
            console.log("asdasdasd");
            console.log(window.currentSelectedProveedor);
            request.params.push({"name":"esCedi","value":window.currentSelectedProveedor.data.esCedi});
            request.params.push({"name":"option","value":option}); // 1 venta generada 2 maximo 3 minimo
        }



        var component=Ext.ComponentMgr.get("gridCedis");
        window.currentPedido=null;
        var comboSugerido = Ext.ComponentMgr.get("cmbCantidadSugerida");

        console.log("comboSugerido");
        console.log(comboSugerido.getValue());

        var comboFiltro = Ext.ComponentMgr.get("cmbClasificacion");
        var comboTipo = Ext.ComponentMgr.get("checkDiario");

        //comboFiltro.getStore().removeAll();

        var myMask = new Ext.LoadMask({
            msg    : 'Consultando productos, espere por favor...',
            target : component
        });

        myMask.show();

        var controller = this;
        almacen.getApplication().loadData(request,function(response){
            console.log(response);
            // this.ocultarColumnas();

            var items={};
            var items1={};
            for (i=0; i < response.productos.length; i++){
                var cantidadAplicar = 0;

                if (comboSugerido.getValue() == "Sugerido") cantidadAplicar = response.productos[i].Sugerido;
                if (comboSugerido.getValue() == "Promedio") cantidadAplicar = response.productos[i].ConsumoPromedio;
                if (comboSugerido.getValue() == "Semana") cantidadAplicar = response.productos[i].ConsumoSemanaPasada;

                response.productos[i].CantidadSucursal = cantidadAplicar < 0 ? 0:cantidadAplicar;
                response.productos[i].Importe = response.productos[i].CantidadSucursal * response.productos[i].Costo;


                // para proveedores externos
                if(typeof window.currentSelectedProveedor !== 'undefined' && !window.currentSelectedProveedor.data.esCedi){
                    response.productos[i].Agregar = response.productos[i].CantidadSucursal > 0 ? true: false;
                    var Iva = response.productos[i].Impuesto;
                    var Descuento = response.productos[i].Descuento;
                    var PrecioU = response.productos[i].Costo;
                    var Cantidad = (Math.round((response.productos[i].CantidadSucursal / response.productos[i].Proporcion) * 100)/100);
                    var tasa = response.productos[i].tasa;
                    response.productos[i].Importe = controller.calculaImportesTotales(Iva, Descuento, PrecioU, Cantidad, tasa);
                    response.productos[i].CantidadMinima = response.productos[i].CantidadSucursal;
                    response.productos[i].CantidadSucursal =  Cantidad;//response.productos[i].CantidadSucursal / response.productos[i].Proporcion;
                }

                items[response.productos[i].clasificacionSucursal]=response.productos[i].clasificacionSucursal;
                items1[response.productos[i].clasificacionCedi]=response.productos[i].clasificacionCedi;
                //items.push({label:response.productos[i].clasificacionSucursal,value:response.productos[i].clasificacionSucursal});


            }
            var oItems =[];
            oItems.push({label:"TODOS",value:"-1"});
            for (var i in items){
                oItems.push({label:i,value:i});
            }
            comboFiltro.getStore().loadData(oItems);
            comboFiltro.selectedIndex = -1;
            comboFiltro.getValue("TODOS");

            comboFiltro.desactivarFiltroClasificaciones();


            var oItems =[];
            oItems.push({label:"TODOS",value:"-1"});
            for (var i in items1){
                oItems.push({label:items1[i],value:items1[i]});
            }
            var comboFiltro1 = Ext.ComponentMgr.get("cmbClasificacionPadre");
            comboFiltro1.getStore().loadData(oItems);
            comboFiltro1.selectedIndex = -1;
            comboFiltro1.getValue("TODOS");


            //comboTipo.activarFiltroDiario(true);
            component.getStore().removeAll();
            component.getStore().loadData(response.productos);
            component.getStore().sort("NombreProducto", "ASC");
            component.view.refresh();

            // Ext.ComponentMgr.get("cmbClasificacionPadre").cargarClasificacionesPadre();

            window.currentPedido=response;
            myMask.hide();

            //Verificamos los productos que tienen proporción 0 y los mostramos al usuario;
            if(response && response.productos && response.productos.length > 0){
                var productoTemp;
                var cantidadProdPorcionCero = 0;
                var msjNoProporcion = "<hr /><table><tr><td>CLAVE </td><td>PRODUCTO </td><tr>";
                //Recorremos los productos y filtramos los que tienen IMPORTE erroneo o cero para obtener los datos y mostrarlos al usuario
                for (i = 0; i < response.productos.length; i++) {
                    productoTemp = response.productos[i];
                    if(productoTemp.Proporcion === 0){
                        cantidadProdPorcionCero ++;
                        msjNoProporcion += "<tr><td> " + productoTemp.claveproducto + "</td><td> " + productoTemp.NombreProducto + "</td></tr>";
                    }
                }
                msjNoProporcion += "</table>";
                if(cantidadProdPorcionCero > 0){
                    Ext.Msg.alert('', 'Los siguientes productos tiene Proporción "0", para poder agregarlos a un pedido la proporción debe ser mayor a "0", comuníquese con el área de implementaciones para poder actualizar la información de los productos.\n' + msjNoProporcion);
                }
            }
        },function(){

            almacen.getApplication().Reconectar(almacen.getApplication().currentSession,
                                                function(obj,res){
                                                    myMask.hide();
                                                    Ext.Msg.alert('',"Se ha restablecido la conexión con el servidor");
                                                });

        });
    },

    calculaImportesTotales: function(Iva, Descuento, PrecioU, Cantidad, tasa) {
        console.log("Iva");
        console.log(Iva);
        console.log("Descuento");
        console.log(Descuento);
        console.log("PrecioU");
        console.log(PrecioU);
        console.log("Cantidad");
        console.log(Cantidad);
        console.log("tasa");
        console.log(tasa);
        // se lee iva y eps, junto con descuento
        var Total = 0.0;
        var SubTotal = 0.0;
        var IvaAplicado = 0.0;
        var DescuentoAplicado = 0.0;

        SubTotal = (Cantidad  * PrecioU);

        DescuentoAplicado = (SubTotal * (Descuento / 100));
        if (tasa){
            IEPS = almacen.getApplication().calculaIEPS(tasa, Cantidad, PrecioU, Descuento, Iva);
            SubTotal += IEPS;
        }

        IvaAplicado = ((SubTotal - DescuentoAplicado) * (Iva / 100));

        Total = (SubTotal - DescuentoAplicado) + IvaAplicado;

        return (Math.round(Total * 100) / 100);


    },

    guardaPedido: function(currentController, correoRecords) {
        var grid = Ext.ComponentMgr.get("gridCedis");
        var clavecedisR=Ext.ComponentMgr.get("cmbProveedorCedis").getValue();
        var request = new Object(); request.method="guardarpedidos"; request.params=[];
        if (almacen.getApplication().currentSession.esCedi) {
            if (!Ext.ComponentMgr.get("cmbSucursal").isValid()){
                Ext.Msg.alert('', 'Por favor especifique una sucursal antes de realizar la busqueda.');
                return;
            }
            request.params.push({"name":"filtroSucursal","value":Ext.ComponentMgr.get("cmbSucursal").getValue()});
        }
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        request.params.push({"name":"Pedido","value":Ext.encode(window.currentPedido)});

        // se rellenan los correos

        var a = {};

        if(typeof window.currentSelectedProveedor !== 'undefined' && typeof correoRecords !== 'undefined'){
            request.params.push({"name":"esPedidoCedi","value":window.currentSelectedProveedor.data.esCedi});
            if(correoRecords.length > 0){
                var correos = [];
                for(var iter = 0; iter < correoRecords.length; iter++){
                    var currentRecord = correoRecords[iter];
                    console.log("currentRecord");
                    console.log(currentRecord);
                    console.log(currentRecord.get("label"));
                    if(currentRecord.get("label") !== ''){
                        correos.push({
                            "label" : currentRecord.get("label"),
                            "value" : currentRecord.get("value"),
                        });
                    }
                }
                a.correos = correos;
                request.params.push({"name":"correos","value":Ext.encode(a)});
            }
        }

        var fechaRecibe = "";
        var dt = Ext.ComponentMgr.get("dtRecepcionCedis");

        if (dt.isValid()){
            fechaRecibe = dt.getRawValue();
            request.params.push({"name":"fecharecep","value":fechaRecibe});
        }

        var myMask = new Ext.LoadMask({
            msg    : 'Guardando Pedidos, espere por favor...',
            target : grid
        });

        myMask.show();
        console.log("---------request--------");
        console.log(request);

        almacen.getApplication().loadData(request,function(response){
            //  almacen.getApplication().hideLoader({'peso':'1','mensaje':'Guardando pedidos, espere por favor...'});
            if(response.status){
                currentController.Limpiar();
                window.currentPedido = null;
            }
            //console.log("response guardarpedido");
            //console.log(response);
            //console.log(response.filepath.length);
            if(response.filepath.length > 0){
                //console.log("Imprimiendo");
                var currentPath = response.filepath[0];
                //console.log(currentPath);
                almacen.getApplication().downloadPedido(currentPath,0);
            }
            myMask.hide();

            if (almacen.getApplication().currentSession.descargaReporteUbicacion && window.currentSelectedProveedor && window.currentSelectedProveedor.data.esCedi) {
                var wnd=Ext.create("almacen.view.DlgCorreoReporte", {id:"wndCorreoReporte",currentRecord:"response"});
                wnd.parentController=currentController;
                wnd.currentRecord="response";
                wnd.center();
                wnd.show();

            }

        },function(response){
            console.log("Error");
            console.log(response);
            myMask.hide();
            almacen.getApplication().Reconectar(almacen.getApplication().currentSession,
                                                function(obj,res){
                                                    myMask.hide();
                                                    Ext.Msg.alert('',"Caja ocupada.</br></br>El pedido no fue guardado.</br>Presione el botón guardar nuevamente.");

                                                });

        });
    },

    gestionaCorreos: function(currentController, correoRecords) {
        this.guardaPedido(currentController, correoRecords);
    },

    gestionaCorreosReporte: function(currentController, correoRecords) {
        console.log("gestionaCorreosReporte");
        var grid = Ext.ComponentMgr.get("gridCedis");
        console.log(window.currentSelectedProveedor.data);
        //var clavecedisR=Ext.ComponentMgr.get("cmbProveedorCedis").getValue();
        var clavecedisR=window.currentSelectedProveedor.data.esCedi ? window.currentSelectedProveedor.data.claveProveedor : -1;
        var requestReporte = new Object(); requestReporte.method="reportecedisubicacion"; requestReporte.params=[];
        requestReporte.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        requestReporte.params.push({"name":"clavecedi","value":clavecedisR});

        var a = {};

        if(typeof correoRecords !== 'undefined'){
            if(correoRecords.length > 0){
                var correos = [];
                for(var iter = 0; iter < correoRecords.length; iter++){
                    var currentRecord = correoRecords[iter];
                    console.log("currentRecord");
                    console.log(currentRecord);
                    console.log(currentRecord.get("label"));
                    if(currentRecord.get("label") !== ''){
                        correos.push({
                            "label" : currentRecord.get("label"),
                            "value" : currentRecord.get("value"),
                        });
                    }
                }
                a.correos = correos;
                requestReporte.params.push({"name":"correos","value":Ext.encode(a)});
            }
        }
        var myMask = new Ext.LoadMask({
            msg    : 'Generando reporte de ubicacion, espere por favor...',
            target : grid
        });
        myMask.show();
        almacen.getApplication().loadData(requestReporte,function(response){
            if(response.status){
                currentController.Limpiar();
                window.currentPedido = null;
            }
            console.log('response',response);
            if(response.filepath.length > 0){
                //console.log("Imprimiendo");
                var currentPath = response.filepath[0];
                //console.log(currentPath);
                almacen.getApplication().downloadPedido(currentPath,1);



            }
            myMask.hide();
        },function(response){
            console.log("Error");
            console.log(response);
            myMask.hide();
            almacen.getApplication().Reconectar(almacen.getApplication().currentSession,
                                                function(obj,res){
                                                    myMask.hide();
                                                    Ext.Msg.alert('',"Caja ocupada.</br></br>No se puede descargar el reporte .</br>");

                                                });
        });
    },

    ocultarColumnas: function() {
            var columns = Ext.ComponentMgr.get("gridCedis").down("headercontainer").getGridColumns();
            console.log(columns);
            var column_unidadmin = columns[4];
            var column_unidadcedis = columns[5];
            var column_cantidadminima = columns[6];

            var column_vtaesperada = columns[15];
            var column_descuento = columns[16];
            var column_ieps = columns[17];
            var column_impuesto = columns[18];

            column_unidadmin.show();
            column_unidadcedis.show();
            column_cantidadminima.show();
            column_vtaesperada.show();
            column_descuento.show();
            column_ieps.show();
            column_impuesto.show();


            if(typeof window.currentSelectedProveedor !== 'undefined' && !window.currentSelectedProveedor.data.esCedi){ // el cedis levanta el pedido de la sucursal
                // se ocultan a proveedor externo
                column_unidadcedis.hide();

            }else{
                // se ocultan al cedis
                column_vtaesperada.hide();
                column_descuento.hide();
                column_ieps.hide();
                column_impuesto.hide();
                column_cantidadminima.hide();
            }

            Ext.ComponentMgr.get("gridCedis").view.refresh();
    },

    onNumbercolumnBeforeRender: function(component, eOpts) {
        if(almacen.getApplication().currentSession.ocultaColumnaExistenciaPedido){
            component.setHidden(true);
        } else {
            component.setHidden(false);
        }
    },

    onTxtDescuentoProveedorChange: function(field, newValue, oldValue, eOpts) {
        console.log("field");
        console.log(field);

        rec = field.up("editor").editingPlugin.context.record;
        console.log(rec.data);
        rec.beginEdit();
        rec.set("Descuento", newValue);
        rec.set("Importe", this.calculaImportesTotales(  parseInt(rec.get("Impuesto")), rec.data.Descuento, rec.data.Costo, rec.data.CantidadSucursal, rec.data.tasa));;
        rec.endEdit();
    },

    onCmbIepsPedidoBeforeQuery: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
        queryPlan.forceAll = true;
    },

    onCmbIepsPedidoSelect: function(combo, records, eOpts) {
        rec = combo.up("editor").editingPlugin.context.record;
        console.log(rec.data);
        rec.beginEdit();
        rec.set("tasa", records[0].data);
        rec.set("Importe", this.calculaImportesTotales(  parseInt(rec.get("Impuesto")), rec.data.Descuento, rec.data.Costo, rec.data.CantidadSucursal, rec.data.tasa));;
        rec.endEdit();
    },

    onCmbTasaPedidoBeforeQuery: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
        queryPlan.forceAll = true;
    },

    onCmbImpuestoPedidoSelect: function(combo, records, eOpts) {
        rec = combo.up("editor").editingPlugin.context.record;
        rec.beginEdit();
        rec.set("Impuesto", records[0].data);
        console.log(rec.data);
        console.log(rec.get("Impuesto").value);
        rec.set("Importe", this.calculaImportesTotales( parseInt(rec.get("Impuesto").value), rec.data.Descuento, rec.data.Costo, rec.data.CantidadSucursal, rec.data.tasa));;
        rec.endEdit();
    },

    onPrecioChange: function(field, newValue, oldValue, eOpts) {
        rec = field.up("editor").editingPlugin.context.record;
        rec.beginEdit();
        rec.set("Costo", newValue);
        console.log(rec.data);
        rec.set("Importe", this.calculaImportesTotales( parseInt(rec.get("Impuesto")), rec.data.Descuento, rec.data.Costo, rec.data.CantidadSucursal, rec.data.tasa));;
        rec.endEdit();
    },

    onCellEditingBeforeEdit: function(editor, context, eOpts) {
        //if(!(context.colIdx==almacen.getApplication().columnaCantidad || context.colIdx==0)) return;
        var PuedeFraccionar=context.record.get("PuedeFraccionar"); //solo se puede editar la cantidad
        //var fldCantidad = context.column.getEditor(context.record,null);
        var proceed = true;
        if(typeof window.currentSelectedProveedor !== 'undefined'){ // el cedis levanta el pedido de la sucursal
            if(!window.currentSelectedProveedor.data.esCedi ){
                console.log('1 context.field:'+context.field);
                if (!(context.field == 'CantidadMinima' || context.field == 'Agregar' || context.field == 'Impuesto' ||
                context.field == 'idTasa' || context.field == "Descuento" || context.field == "Costo"|| context.field == "CantidadSucursal"))
                proceed = false;
            }else{
                //if (!(context.field == 'CantidadSucursal' || context.field == 'Agregar'))
                if (!(context.field == 'CantidadSucursal' || context.field == 'Agregar'|| context.field == "CantidadMinima"))
                proceed = false;
            }
        }else{
            //if (!(context.field == 'CantidadSucursal' || context.field == 'Agregar'))
            if (!(context.field == 'CantidadSucursal' || context.field == 'Agregar'|| context.field == "CantidadMinima"))
            proceed = false;
        }
        // console.log("onCellEditingBeforeEdit Campo a editar: " + context.field + ". Permitido -> " + proceed);
        return proceed;
    },

    onCellEditingEdit: function(editor, context, eOpts) {
        var record = context.record;

        if (!(context.field == 'CantidadSucursal' || context.field == 'CantidadMinima')) return;


        if(context.field == 'CantidadMinima'){

            var PrevValue = context.originalValue;
            var PuedeFraccionar = context.record.get("PuedeFraccionar");
            //solo se puede editar la cantidad
            //var value = (Math.round(context.value * 100)/100);
            var value = Number.parseFloat(context.value).toFixed(5);
            var new_value = value;
            if(record.get("ColumnaActualizada")!==undefined){
                if(record.get("ColumnaActualizada")=='CantidadSucursal'){
                    context.record.set("CantidadMinima", PrevValue);
                    return;
                }
            }
            if(context.field == 'CantidadMinima'){
                PrevValue = PrevValue / record.get("Proporcion");
                value = value / record.get("Proporcion");

            }

            if (!PuedeFraccionar) {
                value = parseInt(context.value, 10);
            }


            if(value===0){
                context.record.set("ColumnaActualizada", "");
            }else{
                context.record.set("ColumnaActualizada", "CantidadMinima");
            }

            // se lee iva y eps, junto con descuento
            var Iva = 0.0;
            var Descuento = 0.0;
            var PrecioU = 0.0;
            var Cantidad = 0.0;
            var Total = 0.0;
            var SubTotal = 0.0;
            var IvaAplicado = 0.0;
            var DescuentoAplicado = 0.0;
            var cantidadSucursal = 0.0;

            /*console.log("------------------");
            console.log(record.get("Impuesto"));*/
            //var TotalGeneral = 0.0;

            PrecioU = record.get("Costo");
            Cantidad = value;
            Descuento = record.get("Descuento");
            Iva = record.get("Impuesto");

            SubTotal = (Cantidad  * PrecioU);

            /*console.log("Cantidad: " + Cantidad);
            console.log("PrecioU: " +  parseFloat(PrecioU));*/

            DescuentoAplicado = (SubTotal * (Descuento / 100));
            if (record.get("tasa")){
                IEPS = almacen.getApplication().calculaIEPS(record.get("tasa"), Cantidad, PrecioU, Descuento, Iva);
                SubTotal += IEPS;
            }

            IvaAplicado = ((SubTotal - DescuentoAplicado) * (Iva / 100));

            /*console.log("SubTotal: " + SubTotal);
            console.log("DescuentoAplicado: " + DescuentoAplicado);
            console.log("Iva: " + Iva);
            console.log("(Iva / 100): "+(Iva / 100));*/

            Total = (SubTotal - DescuentoAplicado) + IvaAplicado;

            //console.log("IvaAplicado: " + IvaAplicado);

            /*var ProporcionAplicar = 0.0;
            ProporcionAplicar = record.get("Proporcion") * Cantidad;
            record.beginEdit();
            record.set("importe", Total);
            record.set("ProporcionAplicar", ProporcionAplicar);
            record.endEdit();
            record.commit();
            console.log("Total  " + Total);
            */

            context.record.beginEdit();
            context.record.set(context.field, new_value);

            //var importe = value * context.record.get("Costo");
            var importe = Total;
            //console.log("importe before" + importe);
            importe = (Math.round(importe * 100) / 100);
            //console.log("importe after redondeo" + importe);
            context.record.set("Importe", importe);

            /*console.log("value " + value);
            console.log("PrevValue  " + PrevValue);
            console.log(PrevValue != value);*/
            if (PrevValue != value)  {
                context.record.set("Agregar", true);
            }

            context.record.set("CantidadSucursal", value);


        }

        if(context.field == 'CantidadSucursal'){
            //console.log('BBB CantidadSucursal');

            var PrevValue = context.originalValue;
            console.log('PrevValue',PrevValue);
            var PuedeFraccionar = context.record.get("PuedeFraccionar");
            var value = Number.parseFloat(context.value).toFixed(5);
            var new_value = value;
            console.log('c ColumnaActualizada',record.get("ColumnaActualizada"));
            if(record.get("ColumnaActualizada")!==undefined){
                if(record.get("ColumnaActualizada")=='CantidadMinima'){
                    console.log('c ColumnaActualizada PrevValue',PrevValue);
                    context.record.set("CantidadSucursal", PrevValue);
                    return;
                }
            }
            if(context.field == 'CantidadSucursal'){
                console.log('record.get("Proporcion")',record.get("Proporcion"));
                PrevValue = PrevValue * record.get("Proporcion");
                console.log('xx PrevValue',PrevValue);
                value = value * record.get("Proporcion");
            }

            if (!PuedeFraccionar) {
                value = parseInt(context.value, 10);
            }


            console.log('c ColumnaActualizada value',value);
            if(value===0){
                context.record.set("ColumnaActualizada", "");
            }else{
                context.record.set("ColumnaActualizada", "CantidadSucursal");
            }
            console.log('d ColumnaActualizada',record.get("ColumnaActualizada"));
            // se lee iva y eps, junto con descuento
            var Iva = 0.0;
            var Descuento = 0.0;
            var PrecioU = 0.0;
            var Cantidad = 0.0;
            var Total = 0.0;
            var SubTotal = 0.0;
            var IvaAplicado = 0.0;
            var DescuentoAplicado = 0.0;
            var cantidadSucursal = 0.0;

            //console.log("------------------");
            //console.log(record.get("Impuesto"));
            //var TotalGeneral = 0.0;

            PrecioU = record.get("Costo");
            Cantidad = value/ record.get("Proporcion");
            Descuento = record.get("Descuento");
            Iva = record.get("Impuesto");

            SubTotal = (Cantidad  * PrecioU);

            //console.log("Cantidad: " + Cantidad);
            //console.log("PrecioU: " +  parseFloat(PrecioU));

            DescuentoAplicado = (SubTotal * (Descuento / 100));
            if (record.get("tasa")){
                IEPS = almacen.getApplication().calculaIEPS(record.get("tasa"), Cantidad, PrecioU, Descuento, Iva);
                SubTotal += IEPS;
            }

            IvaAplicado = ((SubTotal - DescuentoAplicado) * (Iva / 100));

            /*console.log("SubTotal: " + SubTotal);
            console.log("DescuentoAplicado: " + DescuentoAplicado);
            console.log("Iva: " + Iva);
            console.log("(Iva / 100): "+(Iva / 100));*/

            Total = (SubTotal - DescuentoAplicado) + IvaAplicado;

            //console.log("IvaAplicado: " + IvaAplicado);

            context.record.beginEdit();
            context.record.set(context.field, new_value);
            var importe = Total;
            //console.log("importe before" + importe);
            importe = (Math.round(importe * 100) / 100);
            //console.log("importe after redondeo" + importe);
            context.record.set("Importe", importe);

            //console.log("value " + value);
            //console.log("PrevValue  " + PrevValue);
            //console.log(PrevValue != value);
            if (PrevValue != value)  {
                context.record.set("Agregar", true);
            }

            context.record.set("CantidadMinima", value);

        }

        context.record.endEdit();
        context.record.commit();
    },

    onGridCedisBeforeRender: function(component, eOpts) {
        component.getStore().removeAll();
    },

    onGridCedisAfterRender: function(component, eOpts) {
        this.ocultarColumnas();
    },

    onEnableProveedorBeforeRender: function(component, eOpts) {
        // solo se habilita si es cedi
        console.log("rendering");
        if (almacen.getApplication().currentSession.esCedi && almacen.getApplication().currentSession.habilitaOrdenCompra){
            component.setVisible(true);
            //Ext.ComponentMgr.get("labelSucursal").setVisible(true);
        }else{
            component.setVisible(false);
            //Ext.ComponentMgr.get("labelSucursal").setVisible(false);
        }
    },

    onEnableProveedorChange: function(field, newValue, oldValue, eOpts) {
        console.log("newValue");
        console.log(newValue);

        if(newValue === false){
            this.ocultarColumnas();
        }

        var comboCedis = Ext.ComponentMgr.get("cmbProveedorCedis");
        var comboSucursal = Ext.ComponentMgr.get("cmbSucursal");

        var comboClasificacion = Ext.ComponentMgr.get("comboClasificacion");
        var comboProductos = Ext.ComponentMgr.get("comboProductos");

        if(comboProductos){
            comboClasificacion.setDisabled(true);
            comboProductos.setDisabled(true);
        }

        if(newValue){ // Se habilita el combo de proveedores/cedis
            comboCedis.reset();
            comboCedis.setDisabled(false);
            comboSucursal.setDisabled(true);
            comboSucursal.setValue(-1 * almacen.getApplication().currentSession.claveSucursal); // Recordar que cedis son negativos para las sucursales
        }else{
            comboCedis.setDisabled(true);
            comboSucursal.setDisabled(false);
            comboCedis.setValue(almacen.getApplication().currentSession.claveSucursal); // cedis positivo al ser el mismo
            window.currentSelectedProveedor = undefined; // se quita el proveedor
        }
    },

    onCmbProveedorCedisSelect: function(combo, records, eOpts) {
        // se obtiene el recor del proveedor seleccionado
        window.currentSelectedProveedor = records[0];

        this.ocultarColumnas();

        // limpiar
        Ext.ComponentMgr.get("gridCedis").getStore().removeAll();

        var comboClasificacion = Ext.ComponentMgr.get("comboClasificacion");
        var comboProductos = Ext.ComponentMgr.get("comboProductos");

        // Se habilita o deshabilita el barra para agregar productos dependiendo el tipo de proveedor
        if(window.currentSelectedProveedor.data.esCedi){

            Ext.ComponentMgr.get("cmbCantidadSugerida").setDisabled(false);
            Ext.ComponentMgr.get("btnAgregarProductosDlgPedidos").setDisabled(true);

            if(comboClasificacion){
                comboClasificacion.setDisabled(true);
                comboProductos.setDisabled(true);
            }


        }else{
            Ext.ComponentMgr.get("cmbCantidadSugerida").setValue("Sugerido");
            Ext.ComponentMgr.get("cmbCantidadSugerida").setDisabled(true);

            Ext.ComponentMgr.get("btnAgregarProductosDlgPedidos").setDisabled(false);

            if(comboClasificacion){
                comboClasificacion.setDisabled(false);
                comboProductos.setDisabled(false);
            }


        }
    },

    onCmbProveedorCedisBeforeRender: function(component, eOpts) {
        var request = new Object(); request.method="impuestos"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            cmbStore = Ext.StoreManager.get("StoreComboImpuestos");
            cmbStore.loadData(response.items);
            //Ext.ComponentMgr.get("comboImpuesto").getPicker().loadMask.hide();

            var request = new Object(); request.method="listaieps"; request.params=[];
            request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
            almacen.getApplication().loadData(request,function(response){
                cmbStore = Ext.StoreManager.get("StoreTasasIEPS");
                cmbStore.loadData(response);
            });
        });
    },

    onCmbProveedorCedisBeforeSelect: function(combo, record, index, eOpts) {
        // Si es el Cedis el que esta logeado, no podra seleccionar otro cedis en el combo de Proveedores
        if(record.data.esCedi && almacen.getApplication().currentSession.esCedi){
            return false;
        }else{
            // Si no es cedis, es decir, es sucursal, esta puede seleccionar proveedores.
            return true;
        }
    },

    onContainerBeforeRender: function(component, eOpts) {
        component.add(Ext.create("almacen.view.DlgAgregaProductos"));
    },

    onContainerProductosAfterRender: function(component, eOpts) {
        var comboClasificacion = Ext.ComponentMgr.get("comboClasificacion");
        var comboProductos = Ext.ComponentMgr.get("comboProductos");
        comboClasificacion.setDisabled(true);
        comboProductos.setDisabled(true);
    },

    onToolbarBeforeRender: function(component, eOpts) {
        //return false;
        // solo se habilita si es cedi
        var container = Ext.ComponentMgr.get("containerProductos");
        var btn = Ext.ComponentMgr.get("btnAgregarProductosDlgPedidos");

        if (almacen.getApplication().currentSession.habilitaOrdenCompra){
            component.setVisible(true);

            //container.setDisabled(true);
            btn.setDisabled(true);

            //Ext.ComponentMgr.get("labelSucursal").setVisible(true);
        }else{
            component.setVisible(false);
            //Ext.ComponentMgr.get("labelSucursal").setVisible(false);
        }
    },

    onBtnAgregarProductosDlgPedidosClick: function(button, e, eOpts) {
        //gridCedis

        var recs = Ext.ComponentMgr.get("comboProductos").getValueRecords();

        console.log(recs);

        var recsAgregar = [];

        var recs_gridCedis = [];

        for (var i = 0;i < recs.length; i++){

            var instance = Ext.create('almacen.model.mdlContenidoPedidos', {
                claveCedi: recs[i].get(''),
                claveSucursal: recs[i].get(''),
                claveproducto: recs[i].get('claveproducto'),
                claveproductoCedi: recs[i].get('claveproducto'),
                ClavePedido: 0,
                NombreProducto: recs[i].get('nombreproducto'),
                NombreProductoCedi: recs[i].get('nombreproducto'),
                Existencia: 0,
                ExistenciaCedi: 0,
                Minimo: recs[i].get('minimo') * recs[i].get('Proporcion'), // Cuando se trae de productocompra, viene con proporcion
                Maximo: recs[i].get('maximo') * recs[i].get('Proporcion'),
                Unidad: recs[i].get('unidad'), // Como PRODUCTOCOMPRA
                UltimasSalidas: 0,
                PeriodoAnterior: 0,
                Tendencia: 0,
                Proporcion: recs[i].get('Proporcion'),
                PuedeFraccionar: true,
                Costo: recs[i].get('costoUnitario'),
                Sugerido: 0,
                CantidadSucursal: 0,
                CantidadCedi: 0,
                Importe: 0,
                ConsumoPromedio: 0,
                ConsumoSemanaPasada: 0,
                CantidadOriginalCedi: 0,
                CantidadOriginalSucursal: 0,
                Agregar: false,
                clasificacionCedi: recs[i].get('clasificacion'),
                clasificacionSucursal: recs[i].get('clasificacion'),
                agregar: false,
                esInventariado: false,
                unidadminima: recs[i].get('unidadmateria'), // inventariado
                unidadcedis: recs[i].get('unidad'),
                originalValue: 0,
                VentaEsperada: 0,
                idTasa: 0,
                tasa: null,
                Impuesto: recs[i].get('Impuesto'),
                CantidadMinima: 0,
                Descuento: recs[i].get('Descuento'),
                claveXML: recs[i].get('claveXML')
            });


            console.log("Count del store: " + Ext.ComponentMgr.get("gridCedis").getStore().getCount());

            if (Ext.ComponentMgr.get("gridCedis").getStore().getCount() > 0){

                var agrega = true;

                Ext.ComponentMgr.get("gridCedis").getStore().each(function(record, id){

                    console.log("comparando " + recs[i].get("claveproducto") + " con " + record.get("claveproducto") + " = "+ record.get("claveproducto").indexOf(recs[i].get("claveproducto")) < 0);

                    if (record.get("claveproducto") == recs[i].get("claveproducto")){
                        agrega=false;
                    }

                });

                if (agrega){
                    //recsAgregar.push(recs[i]);
                    //Ext.ComponentMgr.get("gridCedis").getStore().loadData([recs[i]], true);

                    recsAgregar.push(instance);
                    Ext.ComponentMgr.get("gridCedis").getStore().loadData([instance], true);
                }

            }else{
                //recsAgregar.push(recs[i]);
                //Ext.ComponentMgr.get("gridCedis").getStore().loadData([recs[i]], true);

                recsAgregar.push(instance);
                Ext.ComponentMgr.get("gridCedis").getStore().loadData([instance], true);
            }

        }

        console.log("recsAgregar");
        console.log(recsAgregar);

        Ext.ComponentMgr.get("gridCedis").view.refresh();
        //Ext.ComponentMgr.get("gridproductos").getStore().sort('nombreproducto','ASC');
        //Ext.ComponentMgr.get("gridproductos").getStore().loadData(recsAgregar, true);
        Ext.ComponentMgr.get("comboProductos").records = [];
        Ext.ComponentMgr.get("comboProductos").clearValue();
        //Ext.ComponentMgr.get("gridproductos").getStore().sort('nombreproducto','ASC');
    },

    onCheckuncheckAllChange: function(field, newValue, oldValue, eOpts) {
        Ext.ComponentMgr.get("gridCedis").getStore().each(function(rec){
            rec.set("Agregar", newValue);

        });

    },

    onCmbClasificacionPadreSelect: function(combo, records, eOpts) {
        var a=Ext.ComponentMgr.get("cmbClasificacion");
        a.setValue("-1");
        a.desactivarFiltroClasificaciones();

        if (combo.getValue() == "-1")
        combo.desactivarFiltroClasificacionesPadre();
        else
        combo.activarFiltroClasificacionesPadre();



    },

    onCmbClasificacionSelect: function(combo, records, eOpts) {
        /*var a=Ext.ComponentMgr.get("cmbClasificacionPadre");
        a.setValue("-1");
        a.desactivarFiltroClasificacionesPadre();
        */

        if (combo.getValue() == "-1")
        combo.desactivarFiltroClasificaciones();
        else
        combo.activarFiltroClasificaciones();



    }

});
