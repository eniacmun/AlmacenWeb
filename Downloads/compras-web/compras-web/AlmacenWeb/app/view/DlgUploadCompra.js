/*
 * File: app/view/DlgUploadCompra.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.DlgUploadCompra', {
    extend: 'Ext.window.Window',
    alias: 'widget.DlgUploadCompra',

    requires: [
        'almacen.view.DlgUploadCompraViewModel',
        'almacen.view.DlgUploadCompraViewController',
        'Ext.form.Panel',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.Fill',
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio',
        'Ext.button.Button',
        'Ext.form.Label',
        'Ext.form.field.File',
        'Ext.grid.Panel',
        'Ext.grid.column.Number',
        'Ext.grid.filters.filter.Number',
        'Ext.form.field.Number',
        'Ext.grid.column.Check',
        'Ext.form.field.ComboBox',
        'Ext.grid.View',
        'Ext.grid.plugin.CellEditing',
        'Ext.grid.filters.Filters'
    ],

    controller: 'dlguploadcompra',
    viewModel: {
        type: 'dlguploadcompra'
    },
    height: 655,
    width: 1020,
    layout: 'border',
    icon: 'resources/cfdi.png',
    title: 'Importar CFDI',
    modal: true,
    defaultListenerScope: true,

    items: [
        {
            xtype: 'form',
            region: 'north',
            height: 120,
            id: 'frmUpload',
            bodyPadding: 10,
            title: '',
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'tbfill'
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'panel',
                    title: '',
                    layout: {
                        type: 'table',
                        columns: 4
                    },
                    items: [
                        {
                            xtype: 'radiogroup',
                            rowspan: 2,
                            width: 400,
                            fieldLabel: '',
                            columns: 1,
                            vertical: true,
                            items: [
                                {
                                    xtype: 'radiofield',
                                    name: 'rb',
                                    boxLabel: 'Revisar desde Correo',
                                    checked: true,
                                    inputValue: '1'
                                },
                                {
                                    xtype: 'radiofield',
                                    name: 'rb',
                                    boxLabel: 'Cargar un archivo Local',
                                    inputValue: '2'
                                }
                            ],
                            listeners: {
                                change: {
                                    fn: 'onRadiogroupChange',
                                    scope: 'controller'
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'btnCheckInbox',
                            padding: 1,
                            text: 'Revisar Correo',
                            listeners: {
                                click: {
                                    fn: 'onBtnCheckInboxClick',
                                    scope: 'controller'
                                }
                            }
                        },
                        {
                            xtype: 'label',
                            colspan: 2,
                            id: 'lblCFDISeleccionado',
                            text: ''
                        },
                        {
                            xtype: 'filefield',
                            colspan: 2,
                            disabled: true,
                            id: 'fileCompra',
                            margin: '',
                            maxWidth: 500,
                            minWidth: 180,
                            padding: 10,
                            fieldLabel: 'Elegir Archivo',
                            name: 'fileCompra'
                        },
                        {
                            xtype: 'button',
                            colspan: 2,
                            disabled: true,
                            id: 'btnUploadCompra',
                            icon: 'resources/upload.png',
                            text: 'Cargar'
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'gridpanel',
            region: 'center',
            id: 'gridXml',
            title: 'Productos',
            store: 'StoreCompraXML',
            columns: [
                {
                    xtype: 'numbercolumn',
                    maxWidth: 55,
                    minWidth: 55,
                    width: 55,
                    defaultWidth: 55,
                    dataIndex: 'xmlCantidad',
                    menuDisabled: true,
                    tdCls: 'x-change-cell',
                    text: 'Cant.'
                },
                {
                    xtype: 'gridcolumn',
                    width: 172,
                    dataIndex: 'xmlNombreProducto',
                    tdCls: 'x-change-cell',
                    text: 'Descripcion'
                },
                {
                    xtype: 'gridcolumn',
                    maxWidth: 50,
                    minWidth: 50,
                    width: 50,
                    defaultWidth: 50,
                    dataIndex: 'unidad',
                    menuDisabled: true,
                    tdCls: 'x-change-cell',
                    text: 'Uni.'
                },
                {
                    xtype: 'numbercolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return Ext.util.Format.currency(value);
                    },
                    maxWidth: 65,
                    minWidth: 65,
                    width: 65,
                    defaultWidth: 65,
                    dataIndex: 'precioAnterior',
                    tdCls: 'x-change-cell',
                    text: 'Costo',
                    filter: {
                        type: 'number'
                    }
                },
                {
                    xtype: 'numbercolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return Ext.util.Format.currency(value);

                    },
                    maxWidth: 65,
                    minWidth: 65,
                    width: 65,
                    defaultWidth: 65,
                    dataIndex: 'importe',
                    tdCls: 'x-change-cell',
                    text: 'Importe',
                    filter: {
                        type: 'number'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 126,
                    dataIndex: 'xmlNoIdentificacion',
                    tdCls: 'x-change-cell',
                    text: 'No. Identificaci√≥n'
                },
                {
                    xtype: 'gridcolumn',
                    maxWidth: 180,
                    minWidth: 180,
                    width: 180,
                    defaultWidth: 180,
                    dataIndex: 'nombreproducto',
                    tdCls: 'x-change-cell',
                    text: 'Producto'
                },
                {
                    xtype: 'gridcolumn',
                    maxWidth: 50,
                    minWidth: 50,
                    width: 50,
                    defaultWidth: 50,
                    dataIndex: 'xmlProporcionExterna',
                    menuDisabled: true,
                    tdCls: 'x-change-cell',
                    text: 'Prop',
                    widget: {
                        xtype: 'numberfield',
                        minValue: 0
                    }
                },
                {
                    xtype: 'checkcolumn',
                    hidden: true,
                    maxWidth: 50,
                    minWidth: 50,
                    width: 50,
                    defaultWidth: 50,
                    dataIndex: 'tieneImpuesto',
                    text: 'IVA'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        rec = this.columns[colIndex].getEditor().getStore().findRecord("value", value);
                        if (rec){
                            return rec.get("label");
                        }else{
                            return "Sin Impuesto";
                        }
                    },
                    dataIndex: 'Impuesto',
                    tdCls: 'x-change-cell',
                    text: 'Impuesto',
                    editor: {
                        xtype: 'combobox',
                        id: 'cmbImpuestoXML',
                        allowBlank: false,
                        editable: false,
                        autoSelect: false,
                        displayField: 'label',
                        forceSelection: true,
                        queryMode: 'local',
                        selectOnTab: false,
                        store: 'StoreComboImpuestos',
                        valueField: 'value',
                        listeners: {
                            beforerender: 'onCmbImpuestoXMLBeforeRender',
                            beforequery: 'onCmbImpuestoXMLBeforeQuery'
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        rec = this.columns[colIndex].getEditor().getStore().findRecord("Id", value);
                        if (rec){
                            return rec.get("Descripcion");
                        }else{
                            return "Sin Impuesto";
                        }
                    },
                    width: 139,
                    dataIndex: 'idTasa',
                    tdCls: 'x-change-cell',
                    text: 'IEPS',
                    editor: {
                        xtype: 'combobox',
                        id: 'cmbIEPS',
                        editable: false,
                        autoSelect: false,
                        displayField: 'Descripcion',
                        forceSelection: true,
                        queryMode: 'local',
                        selectOnTab: false,
                        store: 'StoreTasasIEPS',
                        valueField: 'Id',
                        listeners: {
                            beforerender: 'onCmbIEPSBeforeRender',
                            beforequery: 'onCmbIEPSBeforeQuery',
                            select: 'onCmbIEPSSelect'
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        rec = this.columns[colIndex].getEditor().getStore().findRecord("value", value);
                        if (rec){
                            return rec.get("label");
                        }else{
                            return "Sin Impuesto";
                        }
                    },
                    id: 'columnaie',
                    dataIndex: 'ie',
                    tdCls: 'x-change-cell',
                    text: 'IE',
                    editor: {
                        xtype: 'combobox',
                        id: 'cmbIE',
                        allowBlank: false,
                        editable: false,
                        autoSelect: false,
                        displayField: 'label',
                        forceSelection: true,
                        queryMode: 'local',
                        selectOnTab: false,
                        store: 'StoreComboIE',
                        valueField: 'value',
                        listeners: {
                            beforerender: {
                                fn: 'onCmbIEBeforeRender',
                                scope: 'controller'
                            },
                            beforequery: {
                                fn: 'onCmbIEBeforeQuery',
                                scope: 'controller'
                            }
                        }
                    }
                }
            ],
            viewConfig: {
                getRowClass: function(record, rowIndex, rowParams, store) {
                    return (record.get("xmlProporcionExterna")<=0) ?  "no-inventory" : "";
                },
                listeners: {
                    itemupdate: {
                        fn: 'onViewItemUpdate',
                        scope: 'controller'
                    },
                    itemdblclick: {
                        fn: 'onViewItemDblClick',
                        scope: 'controller'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'numberfield',
                            id: 'fldIE',
                            maxWidth: 150,
                            minWidth: 150,
                            width: 150,
                            fieldLabel: 'IE Asignar',
                            hideEmptyLabel: false,
                            labelWidth: 70,
                            readOnly: true,
                            listeners: {
                                afterrender: {
                                    fn: 'onFldIEAfterRender',
                                    scope: 'controller'
                                }
                            }
                        },
                        {
                            xtype: 'numberfield',
                            id: 'fldIVA',
                            maxWidth: 150,
                            minWidth: 150,
                            width: 150,
                            fieldLabel: 'IVA Asignar',
                            hideEmptyLabel: false,
                            labelWidth: 80,
                            readOnly: true
                        },
                        {
                            xtype: 'numberfield',
                            id: 'fldIEPS',
                            maxWidth: 170,
                            minWidth: 170,
                            width: 170,
                            fieldLabel: 'IEPS Asignar',
                            labelWidth: 85,
                            readOnly: true
                        },
                        {
                            xtype: 'numberfield',
                            id: 'fldRetencion',
                            maxWidth: 150,
                            minWidth: 150,
                            width: 150,
                            fieldLabel: 'Retencion',
                            labelWidth: 60,
                            readOnly: true
                        },
                        {
                            xtype: 'numberfield',
                            id: 'fldPRODS',
                            maxWidth: 175,
                            minWidth: 175,
                            width: 175,
                            fieldLabel: 'Prods. Asignar',
                            labelWidth: 95,
                            readOnly: true,
                            hideTrigger: true,
                            repeatTriggerClick: false,
                            keyNavEnabled: false,
                            mouseWheelEnabled: false,
                            spinDownEnabled: false,
                            spinUpEnabled: false
                        },
                        {
                            xtype: 'button',
                            icon: 'resources/merge.png',
                            text: 'Asociar',
                            listeners: {
                                click: {
                                    fn: 'onButtonClick',
                                    scope: 'controller'
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'btnImport',
                            icon: 'resources/import.png',
                            text: 'Importar',
                            listeners: {
                                click: {
                                    fn: 'onBtnImportClick',
                                    scope: 'controller'
                                }
                            }
                        }
                    ]
                }
            ],
            listeners: {
                show: {
                    fn: 'onGridXmlShow',
                    scope: 'controller'
                }
            },
            plugins: [
                {
                    ptype: 'cellediting',
                    clicksToEdit: 1,
                    listeners: {
                        edit: {
                            fn: 'onCellEditingEdit',
                            scope: 'controller'
                        }
                    }
                },
                {
                    ptype: 'gridfilters'
                }
            ]
        }
    ],

    onCmbImpuestoXMLBeforeRender: function(component, eOpts) {
        /*var request = new Object(); request.method="impuestos"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            component.getStore().loadData(response.items);
            //Ext.ComponentMgr.get("comboImpuesto").getPicker().loadMask.hide();
        });*/
    },

    onCmbImpuestoXMLBeforeQuery: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
        queryPlan.forceAll = true;
    },

    onCmbIEPSBeforeRender: function(component, eOpts) {
        console.log("ejecutando listaieps en evento");
        var request = new Object(); request.method="listaieps"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            component.getStore().loadData(response);
            //Ext.ComponentMgr.get("comboImpuesto").getPicker().loadMask.hide();
        });
    },

    onCmbIEPSBeforeQuery: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
                         queryPlan.forceAll = true;
    },

    onCmbIEPSSelect: function(combo, records, eOpts) {
        rec = combo.up("editor").editingPlugin.context.record;
        rec.beginEdit();
        rec.set("tasa", records[0].data);
        rec.endEdit();
    }

});