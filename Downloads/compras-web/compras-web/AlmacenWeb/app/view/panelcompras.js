/*
 * File: app/view/panelcompras.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.panelcompras', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.panelcompras',

    requires: [
        'almacen.view.panelcomprasViewModel',
        'almacen.view.panelcomprasViewController',
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Number',
        'Ext.form.field.Date',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.form.Label',
        'Ext.grid.Panel',
        'Ext.grid.column.Number',
        'Ext.grid.View',
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio',
        'Ext.grid.plugin.CellEditing',
        'Ext.grid.feature.Summary'
    ],

    controller: 'panelcompras',
    viewModel: {
        type: 'panelcompras'
    },
    height: 600,
    width: 867,
    layout: 'border',
    title: 'Compras',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'form',
            region: 'north',
            height: 180,
            bodyPadding: 10,
            bodyStyle: 'background-color: #D9D8D8;',
            title: '',
            titleAlign: 'center',
            titleCollapse: true,
            items: [
                {
                    xtype: 'combobox',
                    anchor: '100%',
                    formBind: false,
                    id: 'comboProveedor',
                    fieldLabel: 'Proveedor',
                    labelPad: 1,
                    labelWidth: 80,
                    displayField: 'nombreProveedor',
                    queryMode: 'local',
                    store: 'StoreProveedores',
                    valueField: 'claveProveedor'
                },
                {
                    xtype: 'fieldcontainer',
                    anchor: '100%',
                    formBind: false,
                    height: 26,
                    fieldLabel: '',
                    hideLabel: true,
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            flex: 1,
                            id: 'comboTipoPago',
                            fieldLabel: 'Tipo Pago',
                            labelPad: 1,
                            labelWidth: 80,
                            allowBlank: false,
                            displayField: 'label',
                            forceSelection: true,
                            minChars: 2,
                            queryMode: 'local',
                            store: 'StoreGeneric',
                            valueField: 'value'
                        },
                        {
                            xtype: 'numberfield',
                            flex: 1,
                            id: 'comboNoFactura',
                            fieldLabel: '&nbsp;&nbsp;No. Factura',
                            labelWidth: 80,
                            enforceMaxLength: true,
                            hideTrigger: true,
                            maxLength: 10,
                            maxLengthText: 'El número de factura no puede ser mayor a 10 dígitos'
                        },
                        {
                            xtype: 'datefield',
                            flex: 1,
                            id: 'dtFechaValue',
                            fieldLabel: '&nbsp;&nbsp;Fecha de compra',
                            labelWidth: 120,
                            enforceMaxLength: true,
                            format: 'd/m/Y',
                            listeners: {
                                afterrender: {
                                    fn: 'onDtFechaValueAfterRender',
                                    scope: 'controller'
                                }
                            }
                        },
                        {
                            xtype: 'numberfield',
                            flex: 1,
                            height: '',
                            id: 'comboTotalManual',
                            width: '',
                            fieldLabel: '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Total',
                            labelWidth: 80,
                            enforceMaxLength: true,
                            hideTrigger: true,
                            listeners: {
                                beforerender: 'onComboTotalManualBeforeRender'
                            }
                        }
                    ]
                },
                {
                    xtype: 'container',
                    height: 50,
                    id: 'comboContainer',
                    listeners: {
                        beforerender: {
                            fn: 'onContainerBeforeRender',
                            scope: 'controller'
                        }
                    }
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    style: 'background-color: #141314;',
                    layout: {
                        type: 'hbox',
                        align: 'stretch',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            id: 'btnBuscarCompra',
                            icon: 'resources/Search.png',
                            text: 'Buscar'
                        },
                        {
                            xtype: 'button',
                            id: 'btnHistorico',
                            icon: 'resources/history3.png',
                            text: 'Historico'
                        },
                        {
                            xtype: 'button',
                            hidden: true,
                            icon: '\'http://img.informer.com/icons/png/16/5499/5499754.png\'',
                            text: 'Limpiar'
                        },
                        {
                            xtype: 'button',
                            id: 'addProductoCompra',
                            icon: '\'https://glnd.alexanderstreet.com/ui/common/playlist.png\'',
                            text: 'Agregar'
                        },
                        {
                            xtype: 'label',
                            id: 'lblNoCompra',
                            width: 100,
                            text: ''
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'gridpanel',
            region: 'center',
            frame: true,
            id: 'gridproductos',
            title: '',
            columnLines: true,
            enableColumnHide: false,
            enableColumnMove: false,
            enableColumnResize: false,
            forceFit: true,
            store: 'StoreGridProductos',
            columns: [
                {
                    xtype: 'numbercolumn',
                    width: 70,
                    dataIndex: 'cantidad',
                    text: 'Cantidad',
                    format: '0,000.000',
                    editor: {
                        xtype: 'numberfield',
                        id: 'Numcantidad',
                        enableKeyEvents: true,
                        selectOnFocus: true,
                        decimalPrecision: 3,
                        minValue: 0,
                        listeners: {
                            afterrender: 'onNumcantidadAfterRender',
                            keyup: 'onNumcantidadKeyup',
                            blur: 'onNumcantidadBlur',
                            focus: 'onNumcantidadFocus'
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'claveproducto',
                    text: 'Clave'
                },
                {
                    xtype: 'gridcolumn',
                    maxWidth: 75,
                    minWidth: 75,
                    width: 75,
                    defaultWidth: 75,
                    dataIndex: 'ProporcionAplicar',
                    text: 'Prop.'
                },
                {
                    xtype: 'gridcolumn',
                    defaultWidth: 304,
                    dataIndex: 'nombreproducto',
                    text: 'Descripcion',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    maxWidth: 85,
                    minWidth: 85,
                    width: 85,
                    defaultWidth: 85,
                    dataIndex: 'unidad',
                    text: 'Unidad',
                    flex: 1
                },
                {
                    xtype: 'numbercolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {


                        if(record.get("cantidad")>0 && record.get("costoUnitario")>0 && record.get("precioAnterior")>0 ){
                            console.log("cantidad >0 , costoUnitario >0 , precioAnterior >0 ");
                            if ((record.get("costoUnitario") < record.get("costominimo")||
                            record.get("costoUnitario") > record.get("costomaximo")))
                            {
                                metaData.style = "background-color:#FF0000;color:white;font-weight:bolder;" ;
                            }
                        }
                        return Ext.util.Format.currency(value);

                    },
                    width: 99,
                    align: 'right',
                    dataIndex: 'costoUnitario',
                    text: 'Precio Unitario',
                    editor: {
                        xtype: 'numberfield',
                        id: 'numCostoUnitario',
                        selectOnFocus: true,
                        decimalPrecision: 4,
                        minValue: 0,
                        listeners: {
                            focus: 'onNumCostoUnitarioFocus'
                        }
                    }
                },
                {
                    xtype: 'numbercolumn',
                    renderer: function(value, metaData, record, valueIndex, colIndex, store, view) {
                        return Ext.util.Format.number(value , '0.##%');
                    },
                    dataIndex: 'Descuento',
                    text: 'Descuento',
                    editor: {
                        xtype: 'numberfield',
                        id: 'txtDescuento',
                        width: 100,
                        fieldLabel: '',
                        hideLabel: true,
                        hideTrigger: true,
                        selectOnFocus: true,
                        decimalPrecision: 4,
                        maxValue: 100,
                        minValue: 0,
                        listeners: {
                            focus: 'onTxtDescuentoFocus'
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        rec = this.columns[colIndex].getEditor().getStore().findRecord("Id", value);
                        if (rec){
                            return rec.get("Descripcion");
                        }else{
                            return value;
                        }
                    },
                    maxWidth: 160,
                    minWidth: 160,
                    width: 160,
                    defaultWidth: 160,
                    dataIndex: 'idTasa',
                    text: 'IEPS',
                    editor: {
                        xtype: 'combobox',
                        id: 'cmbIeps',
                        editable: false,
                        displayField: 'Descripcion',
                        queryMode: 'local',
                        store: 'StoreTasasIEPS',
                        valueField: 'Id',
                        listeners: {
                            beforerender: 'onCmbIepsBeforeRender',
                            beforequery: 'onCmbIepsBeforeQuery',
                            select: 'onCmbIepsSelect'
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {

                        rec = this.columns[colIndex].getEditor().getStore().findRecord("value", value);
                        if (rec){
                            return rec.get("label");
                        }else{
                            return value;
                        }
                    },
                    dataIndex: 'Impuesto',
                    text: 'Impuesto',
                    editor: {
                        xtype: 'combobox',
                        id: 'cmbImpuesto',
                        editable: false,
                        displayField: 'label',
                        forceSelection: true,
                        queryMode: 'local',
                        store: 'StoreComboImpuestos',
                        valueField: 'value',
                        listeners: {
                            beforerender: {
                                fn: 'onCmbImpuestoBeforeRender',
                                scope: 'controller'
                            },
                            beforequery: {
                                fn: 'onCmbImpuestoBeforeQuery',
                                scope: 'controller'
                            }
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        rec = this.columns[colIndex].getEditor().getStore().findRecord("value", value);
                        if (rec){
                            return rec.get("label");
                        }else{
                            return value;
                        }
                    },
                    id: 'columnIE',
                    dataIndex: 'ie',
                    text: 'IE',
                    editor: {
                        xtype: 'combobox',
                        itemId: 'cmbImpuestoIE',
                        editable: false,
                        displayField: 'label',
                        forceSelection: true,
                        queryMode: 'local',
                        store: 'StoreComboIE',
                        valueField: 'value',
                        listeners: {
                            beforequery: {
                                fn: 'onCmbImpuestoIEBeforeQuery',
                                scope: 'controller'
                            },
                            beforerender: {
                                fn: 'onCmbImpuestoIEBeforeRender',
                                scope: 'controller'
                            }
                        }
                    },
                    listeners: {
                        beforerender: {
                            fn: 'onColumnIEBeforeRender',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'numbercolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return Ext.util.Format.currency(value);
                    },
                    summaryRenderer: function(val, params, data) {
                        var totalretenciones = Ext.ComponentMgr.get("totalRetencionesValue").getValue();
                        totalretenciones = totalretenciones ? totalretenciones : 0;
                        if(totalretenciones < val){
                            val -= totalretenciones;
                        } else {
                            Ext.ComponentMgr.get("totalRetencionesValue").setValue(0);
                        }
                        return Ext.util.Format.currency(val);
                    },
                    summaryType: 'sum',
                    align: 'right',
                    dataIndex: 'importe',
                    text: 'Importe Total',
                    editor: {
                        xtype: 'numberfield',
                        id: 'numImporte',
                        enableKeyEvents: true
                    }
                }
            ],
            viewConfig: {
                getRowClass: function(record, rowIndex, rowParams, store) {

                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    height: 36,
                    style: 'background-color: #141314;',
                    layout: {
                        type: 'hbox',
                        align: 'stretch',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            id: 'cancelarCompra',
                            icon: 'resources/cancel-icon.png',
                            text: 'Cancelar'
                        },
                        {
                            xtype: 'button',
                            id: 'cleanProductoCompra',
                            icon: 'resources/limpiar.png',
                            text: 'Limpiar'
                        },
                        {
                            xtype: 'button',
                            id: 'pagarCompra',
                            icon: 'resources/save.png',
                            text: 'Guardar'
                        },
                        {
                            xtype: 'button',
                            id: 'btnPrintCompra',
                            icon: 'resources/print.png',
                            text: 'Imprimir'
                        },
                        {
                            xtype: 'button',
                            id: 'btnTraspasos',
                            icon: 'resources/transfer.png',
                            text: 'Traspasos'
                        },
                        {
                            xtype: 'button',
                            id: 'btnConsultaTraspasos',
                            icon: 'resources/Search.png',
                            text: 'Consulta Traspasos'
                        },
                        {
                            xtype: 'button',
                            hidden: true,
                            id: 'btnShowPedidos',
                            icon: 'resources/cart.png',
                            text: 'Pedidos'
                        },
                        {
                            xtype: 'button',
                            id: 'btnImportarCompra',
                            icon: 'resources/cfdi.png',
                            text: 'Importar CFDI'
                        }
                    ]
                },
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    style: 'background-color: #141314;',
                    layout: {
                        type: 'hbox',
                        align: 'stretch',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'radiogroup',
                            width: 400,
                            fieldLabel: '',
                            hideLabel: true,
                            items: [
                                {
                                    xtype: 'radiofield',
                                    id: 'descuentoCantidad',
                                    width: 100,
                                    boxLabel: '\'<font color="white">Descuento $</font>\''
                                },
                                {
                                    xtype: 'numberfield',
                                    id: 'descuentoCantidadValue',
                                    margin: '0 10 0 0',
                                    width: 100,
                                    fieldLabel: '',
                                    labelWidth: 0,
                                    enableKeyEvents: true,
                                    hideTrigger: true,
                                    selectOnFocus: true,
                                    decimalPrecision: 4
                                },
                                {
                                    xtype: 'radiofield',
                                    id: 'descuentoPorcentaje',
                                    width: 110,
                                    boxLabel: '\'<font color="white">Descuento %</font>\''
                                },
                                {
                                    xtype: 'numberfield',
                                    id: 'descuentoPorcentajeValue',
                                    width: 100,
                                    fieldLabel: '',
                                    enableKeyEvents: true,
                                    hideTrigger: true,
                                    selectOnFocus: true,
                                    decimalPrecision: 4
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            hidden: true,
                            id: 'labelTC',
                            style: 'color:white',
                            width: 110
                        },
                        {
                            xtype: 'numberfield',
                            hidden: true,
                            id: 'labelTCValue',
                            width: 150,
                            fieldLabel: 'Tarjeta',
                            labelStyle: 'color:white',
                            labelWidth: 50,
                            enableKeyEvents: true,
                            enforceMaxLength: true,
                            hideTrigger: true,
                            maxLength: 4,
                            selectOnFocus: true,
                            decimalPrecision: 0
                        },
                        {
                            xtype: 'numberfield',
                            id: 'totalRetencionesValue',
                            margin: '0 0 0 30',
                            width: 200,
                            fieldLabel: 'Retenciones $',
                            labelStyle: 'color:white',
                            readOnly: true,
                            enableKeyEvents: true,
                            hideTrigger: true,
                            selectOnFocus: true
                        },
                        {
                            xtype: 'numberfield',
                            validator: function(value) {
                                if(isNaN(value)){
                                    this.setValue(0);
                                } else {
                                    if(value < 0){
                                        this.setValue(0);
                                    }
                                }

                                return true;
                            },
                            id: 'totalRetencionesIVA',
                            margin: '0 5 0 30',
                            width: 200,
                            fieldLabel: 'Retenciones IVA $',
                            labelStyle: 'color:white',
                            labelWidth: 110,
                            value: 0,
                            enableKeyEvents: true,
                            hideTrigger: true,
                            selectOnFocus: true
                        },
                        {
                            xtype: 'numberfield',
                            validator: function(value) {
                                if(isNaN(value)){
                                    this.setValue(0);
                                } else {
                                    if(value < 0){
                                        this.setValue(0);
                                    }
                                }

                                return true;
                            },
                            id: 'totalRetencionesISR',
                            margin: '0 5 0 30',
                            width: 200,
                            fieldLabel: 'Retenciones ISR $',
                            labelStyle: 'color:white',
                            labelWidth: 115,
                            value: 0,
                            enableKeyEvents: true,
                            hideTrigger: true,
                            selectOnFocus: true
                        },
                        {
                            xtype: 'numberfield',
                            validator: function(value) {
                                if(isNaN(value)){
                                    this.setValue(0);
                                } else {
                                    if(value < 0){
                                        this.setValue(0);
                                    }
                                }

                                return true;
                            },
                            id: 'totalRetencionesIEPS',
                            margin: '0 5 0 30',
                            width: 200,
                            fieldLabel: 'Retenciones IEPS $',
                            labelStyle: 'color:white',
                            labelWidth: 120,
                            value: 0,
                            enableKeyEvents: true,
                            hideTrigger: true,
                            selectOnFocus: true
                        }
                    ]
                }
            ],
            plugins: [
                {
                    ptype: 'cellediting',
                    listeners: {
                        edit: 'onCellEditingEdit',
                        beforeedit: 'onCellEditingBeforeEdit'
                    }
                }
            ],
            features: [
                {
                    ftype: 'summary',
                    dock: 'bottom'
                }
            ]
        }
    ],

    onComboTotalManualBeforeRender: function(component, eOpts) {
            if (window.habilitaValidacionTotal) {
                // Renderizar ya que esta habilitada la variable
                return true;
            }
            else {
                // No renderizar ya que no esta habilitada la variable
                return false;
            }

    },

    onNumcantidadAfterRender: function(component, eOpts) {
                /*component.el.swallowEvent([
                    'keypress',
                    'keydown',
                    'keyup'
                    ]);*/


    },

    onNumcantidadKeyup: function(textfield, e, eOpts) {
        if (e.getKey() == Ext.event.Event.ENTER){
            console.log(textfield);
        }
    },

    onNumcantidadBlur: function(component, event, eOpts) {

    },

    onNumcantidadFocus: function(component, event, eOpts) {
        component.selectText();
    },

    onNumCostoUnitarioFocus: function(component, event, eOpts) {
                component.selectText();
    },

    onTxtDescuentoFocus: function(component, event, eOpts) {
        component.selectText();
    },

    onCmbIepsBeforeRender: function(component, eOpts) {
        var request = new Object(); request.method="listaieps"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            console.log(response);
            component.getStore().loadData(response);
            //Ext.ComponentMgr.get("comboImpuesto").getPicker().loadMask.hide();
        });
    },

    onCmbIepsBeforeQuery: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
                         queryPlan.forceAll = true;
    },

    onCmbIepsSelect: function(combo, records, eOpts) {
        rec = combo.up("editor").editingPlugin.context.record;
        rec.beginEdit();
        rec.set("tasa", records[0].data);
        rec.endEdit();
    },

    onCellEditingEdit: function(editor, context, eOpts) {
        var a=this.getController("panelComprasViewController");
        if ( this.getController("panelComprasViewController").readOnly) return false;
        if(context.colIdx===0){
            var minimo=context.record.get("minimo");
            var maximo=context.record.get("maximo");
            console.log("minimo: " + minimo);
            console.log("maximo: " + maximo);
            if(minimo==0&&maximo==0){

            }else{
                if((context.record.get("cantidad")>maximo||context.record.get("cantidad")<minimo)
                   &&context.record.get("cantidad")>0){
                    Ext.Msg.show({
                        title:'Confirmar',
                        message: 'La cantidad ingresada ('  + context.record.get("cantidad") + ') para el producto ' +                                                                     context.record.get("nombreproducto") + ' con unidad '                                                                     + context.record.get("unidad") + ' es correcta?',
                        buttons: Ext.Msg.YESNO,
                        icon: Ext.Msg.QUESTION,
                        fn: function(btn) {
                            if (btn === 'yes') {
                                a.calculaImportesTotales(context.record);
                            } else if (btn === 'no') {
                                context.record.beginEdit();
                                context.record.set("cantidad", 0);
                                context.record.endEdit();
                                a.calculaImportesTotales(context.record);
                            }
                        }
                    });
                    return;
                }

            }

        }
        //alert("context.colIdx-----"+ context.colIdx);
        var activar=almacen.getApplication().currentSession.habilitaImpuestoIE;
        if (context.colIdx <= 8){ //IVA

            if (context.colIdx==8){


                if (!(context.record.get("Impuesto") > " ")){
                    context.record.beginEdit();
                    context.record.set("Impuesto", 0);
                    context.record.endEdit();
                }

                //Codigo agregado
                context.record.getFields().forEach(function(element) {
                    console.log(element.getName());
                });

                var val_new = context.record.get("Impuesto");

                var ClaveProducto = context.record.get("claveproducto");
                console.log("ClaveProducto" + ClaveProducto);
                var Concepto = context.record.get("nombreproducto");
                console.log("Concepto" + Concepto);
                var Unidad = context.record.get("unidad");
                console.log("Unidad" + Unidad);

                console.log("Impuesto" + context.record.get("Impuesto"));

                var producto = window.AjustesRealizadosCompras[ClaveProducto];
                console.log("producto" + producto);
                if(typeof producto === "undefined") {
                    console.log("a rellenar");
                    var Iva = context.record.get("Impuesto");
                    var val_beforeedit = context.originalValue;
                    window.AjustesRealizadosCompras[ClaveProducto] = {
                        "Clave":ClaveProducto,
                        "Concepto":Concepto,
                        "Unidad":Unidad,
                        "impuestoCambiadoValidacion": Iva,
                        "Initial_Value": val_beforeedit
                        // "New_Value": val_beforeedit
                    };
                }

                var initial_value = window.AjustesRealizadosCompras[ClaveProducto].Initial_Value;

                if(val_new != initial_value){
                    console.log("el valor ha cambiado de " + initial_value + ' a ' + val_new);
                    window.AjustesRealizadosCompras[ClaveProducto].impuestoCambiadoValidacion = val_new;
                }else{
                    window.AjustesRealizadosCompras[ClaveProducto].impuestoCambiadoValidacion = initial_value;
                }

                // Fin de codigo agregado
            }

            Ext.ComponentMgr.get("descuentoCantidadValue").setValue("");
            Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue("");


            this.getController("panelComprasViewController").calculaImportesTotales(context.record);

        }else{

            console.log("activar");
            console.log(activar);
            if (context.colIdx==9 && activar){

                console.log(context.record.get("ie"));

                if (!(context.record.get("ie") > " ")){
                    context.record.beginEdit();
                    context.record.set("ie", 0);
                    context.record.endEdit();
                }


                var ClaveProducto = context.record.get("claveproducto");
                var Concepto = context.record.get("nombreproducto");
                var Unidad = context.record.get("unidad");

                var producto = window.AjustesRealizadosCompras[ClaveProducto];

                if(typeof producto === "undefined") {

                    var Iva = context.record.get("ie");
                    var val_beforeedit = context.originalValue;
                    window.AjustesRealizadosCompras[ClaveProducto] = {
                        "Clave":ClaveProducto,
                        "Concepto":Concepto,
                        "Unidad":Unidad,
                        "impuestoCambiadoValidacion": Iva,
                        "Initial_Value": val_beforeedit
                    };
                }


                var initial_value = window.AjustesRealizadosCompras[ClaveProducto].Initial_Value;

                if(val_new != initial_value){
                    window.AjustesRealizadosCompras[ClaveProducto].impuestoCambiadoValidacion = val_new;
                }else{
                    window.AjustesRealizadosCompras[ClaveProducto].impuestoCambiadoValidacion = initial_value;
                }


                Ext.ComponentMgr.get("descuentoCantidadValue").setValue("");
                Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue("");


                this.getController("panelComprasViewController").calculaImportesTotales(context.record);

            }else{

                this.getController("panelComprasViewController").CalculaImporteUnitario(context.record);
            }

        }
    },

    onCellEditingBeforeEdit: function(editor, context, eOpts) {

        if ( this.getController("panelComprasViewController").readOnly) return false;
        if (context.colIdx > 1){

                                                            if (context.record.get("cantidad") > 0 || context.grid.columns[0].getEditor().getValue() > 0  ){

                                                            }else{
                                                                return false;

                                                            }

                                                        }else{
                                                            //se trata de la columna de cantidad


                                                        }
    }

});