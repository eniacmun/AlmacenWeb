/*
 * File: app/view/panelcomprasViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.panelcomprasViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panelcompras',

    config: {
        currentCompra: null
    },

    control: {
        "#comboProveedor": {
            beforerender: 'loadProveedores',
            beforequery: 'filtraProveedor',
            select: 'loadProductosProveedores'
        },
        "#comboTipoPago": {
            beforerender: 'loadTipoPago',
            select: 'revisaTipoPago'
        },
        "#comboClasificacion": {
            beforerender: 'loadClasificacion',
            select: 'loadComboProductos',
            beforequery: 'filtraClasificaciones'
        },
        "#comboProductos": {
            beforequery: 'filtraProductos'
        },
        "button#addProductoCompra": {
            click: 'agregaProductos'
        },
        "#descuentoCantidadValue": {
            keyup: 'aplicaDescuentoCantidad',
            blur: 'aplicaDescuentoCantidadBlur'
        },
        "#totalRetencionesValue": {
            keyup: 'aplicaRetencionesCantidad',
            blur: 'aplicaRetencionesCantidadBlur'
        },
        "#totalRetencionesIVA": {
            keyup: 'aplicaRetencionesCantidadIVA',
            blur: 'aplicaRetencionesCantidadBlurIVA'
        },
        "#totalRetencionesISR": {
            keyup: 'aplicaRetencionesCantidadISR',
            blur: 'aplicaRetencionesCantidadBlurISR'
        },
        "#totalRetencionesIEPS": {
            keyup: 'aplicaRetencionesCantidadIEPS',
            blur: 'aplicaRetencionesCantidadBlurIEPS'
        },
        "#descuentoPorcentajeValue": {
            keyup: 'aplicaDescuentoPorcentaje',
            blur: 'aplicaDescuentoPorcentajeBlur'
        },
        "button#btnBuscarCompra": {
            click: 'buscaCompra'
        },
        "button#btnAgregar": {
            click: 'agregarProductoCompra'
        },
        "button#cleanProductoCompra": {
            click: 'Limpiar2Click'
        },
        "button#pagarCompra": {
            click: 'guardarCompraClick',
            afterrender: 'InitializeEnvironmentCompras'
        },
        "button#cancelarCompra": {
            click: 'CancelarCompraClick'
        },
        "button#btnHistorico": {
            click: 'buscarRegistrosHistoricos'
        },
        "button#btnPrintCompra": {
            click: 'PrintCompra'
        },
        "button#btnTraspasos": {
            click: 'showVentanaTraspasos'
        },
        "button#btnConsultaTraspasos": {
            click: 'showConsultaTraspasos'
        },
        "button#btnShowPedidos": {
            click: 'showPedidos'
        },
        "button#btnImportarCompra": {
            click: 'showDialogImportarCompra'
        }
    },

    loadProveedores: function(component, eOpts) {
        var request = new Object(); request.method="impuestos"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            cmbStore = Ext.StoreManager.get("StoreComboImpuestos");
            cmbStore.loadData(response.items);
            //Ext.ComponentMgr.get("comboImpuesto").getPicker().loadMask.hide();

            var request = new Object(); request.method="listaieps"; request.params=[];
            request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
            almacen.getApplication().loadData(request,function(response){
                cmbStore = Ext.StoreManager.get("StoreTasasIEPS");
                cmbStore.loadData(response);
                var request = new Object(); request.method="proveedores"; request.params=[];
                request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                almacen.getApplication().loadData(request,function(response){
                    component.getStore().loadData(response.proveedores);
                    component.getStore().sort('nombreProveedor','ASC');
                    //Ext.ComponentMgr.get("comboProveedor").getPicker().loadMask.hide();
                    var request = new Object(); request.method="impuestosie"; request.params=[];
                    request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                    almacen.getApplication().loadData(request,function(response){
                        cmbStore = Ext.StoreManager.get("StoreComboIE");
                        cmbStore.loadData(response.items);
                    });
                });
            });
        });
    },

    filtraProveedor: function(queryPlan, eOpts) {
        console.log("filtrando proveedores");
        queryPlan.query = new RegExp(queryPlan.query, 'i');
                 queryPlan.forceAll = true;
    },

    loadTipoPago: function(component, eOpts) {
                     var request = new Object(); request.method="tipospago"; request.params=[];
                                    request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                                    almacen.getApplication().loadData(request,function(response){
                                        component.getStore().loadData(response.items);
                                        component.getStore().sort('nombreProveedor','ASC');
                                        component.getStore().fireEvent('load', component.getStore(), [], true, {});
                                        //Ext.ComponentMgr.get("comboTipoPago").getPicker().loadMask.hide();

                                    });
    },

    loadClasificacion: function(component, eOpts) {
                                    var request = new Object(); request.method="clasificaciones"; request.params=[];
                                    request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                                    almacen.getApplication().loadData(request,function(response){
                                    component.getStore().loadData(response.productos);
                                    component.getStore().sort('nombreproducto','ASC');
                                        //Ext.ComponentMgr.get("comboClasificacion").getPicker().loadMask.hide();

                                    });
    },

    loadComboProductos: function(combo, records, eOpts) {
        console.log("loadComboProdutos");
        var request = new Object(); request.method="productoscompra"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId},
                            {"name":"clasificacion","value":combo.getValue()});
        almacen.getApplication().loadData(request,function(response){
            Ext.ComponentMgr.get("comboProductos").getStore().loadData(response.productos);
            Ext.ComponentMgr.get("comboProductos").getStore().sort('nombreproducto','ASC');
            //Ext.ComponentMgr.get("comboProducto").getPicker().loadMask.hide();
            for(var a in Ext.ComponentMgr.get("comboProductos").getStore()){
                console.log("a: " + a );
            }

        });
    },

    revisaTipoPago: function(combo, records, eOpts) {
        if(combo.getValue()=='17'){
            Ext.ComponentMgr.get("labelTCValue").getEl().show();
            Ext.ComponentMgr.get("labelTC").getEl().show();
        }else{
            Ext.ComponentMgr.get("labelTCValue").getEl().hide();
            Ext.ComponentMgr.get("labelTC").getEl().hide();
        }
    },

    loadProductosProveedores: function(combo, records, eOpts) {
        console.log("loadProductosProveedores");
        if(window.AjustesRealizados !== null){
            console.log("Ya existen ajustes");
            window.AjustesRealizadosCompras = {}; //Se limpian los ajustes
        }else{
            console.log("Sin ajustes");
        }

        var request = new Object(); request.method="productoscompra"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId},
                            {"name":"proveedor","value":combo.getValue()});
        almacen.getApplication().loadData(request,function(response){
            console.log(response);
            Ext.ComponentMgr.get("gridproductos").getStore().removeAll();
            Ext.ComponentMgr.get("gridproductos").getStore().loadData(response.productos);
            Ext.ComponentMgr.get("gridproductos").getStore().sort('nombreproducto','ASC');
        });
    },

    filtraClasificaciones: function(queryPlan, eOpts) {
                        queryPlan.query = new RegExp(queryPlan.query, 'i');
                         queryPlan.forceAll = true;
    },

    filtraProductos: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
        queryPlan.forceAll = true;
    },

    agregaProductos: function(button, e, eOpts) {
        var recs = Ext.ComponentMgr.get("comboProductos").getValueRecords();
        console.log(recs);
        var recsAgregar = [];
        for (var i = 0;i < recs.length;i++){
            console.log("Count del store: " + Ext.ComponentMgr.get("gridproductos").getStore().getCount());
            if (Ext.ComponentMgr.get("gridproductos").getStore().getCount() > 0){
                var agrega = true;
                Ext.ComponentMgr.get("gridproductos").getStore().each(function(record, id){

                    console.log("comparando " + recs[i].get("claveproducto") + " con " + record.get("claveproducto") + " = "+ record.get("claveproducto").indexOf(recs[i].get("claveproducto")) < 0);
                    if (record.get("claveproducto") == recs[i].get("claveproducto")){
                        agrega=false;
                    }
                });
                if (agrega){
                    recsAgregar.push(recs[i]);
                    Ext.ComponentMgr.get("gridproductos").getStore().loadData([recs[i]], true);
                }
            }else{
                recsAgregar.push(recs[i]);
                Ext.ComponentMgr.get("gridproductos").getStore().loadData([recs[i]], true);
            }

        }
        Ext.ComponentMgr.get("gridproductos").getStore().sort('nombreproducto','ASC');
        //Ext.ComponentMgr.get("gridproductos").getStore().loadData(recsAgregar, true);
        Ext.ComponentMgr.get("comboProductos").records = [];
        Ext.ComponentMgr.get("comboProductos").clearValue();
        //Ext.ComponentMgr.get("gridproductos").getStore().sort('nombreproducto','ASC');
    },

    aplicaDescuentoCantidad: function(textfield, e, eOpts) {
        if (e.getKey()==Ext.event.Event.ENTER){
            this.AplicarDescuento(true);
        }
    },

    aplicaRetencionesCantidad: function(textfield, e, eOpts) {
        if (e.getKey()==Ext.event.Event.ENTER){
            console.log("triggerEanter");
            this.AplicarRetenciones();
        }
    },

    aplicaRetencionesCantidadIVA: function(textfield, e, eOpts) {
        if (e.getKey()==Ext.event.Event.ENTER){
            console.log("triggerEanter");
            this.AplicarRetenciones();
        }
    },

    aplicaRetencionesCantidadISR: function(textfield, e, eOpts) {
        if (e.getKey()==Ext.event.Event.ENTER){
            console.log("triggerEanter");
            this.AplicarRetenciones();
        }
    },

    aplicaRetencionesCantidadIEPS: function(textfield, e, eOpts) {
        if (e.getKey()==Ext.event.Event.ENTER){
            console.log("triggerEanter");
            this.AplicarRetenciones();
        }
    },

    aplicaRetencionesCantidadBlur: function(component, event, eOpts) {

            this.AplicarRetenciones();
    },

    aplicaRetencionesCantidadBlurIVA: function(component, event, eOpts) {

            this.AplicarRetenciones();
    },

    aplicaRetencionesCantidadBlurISR: function(component, event, eOpts) {

            this.AplicarRetenciones();
    },

    aplicaRetencionesCantidadBlurIEPS: function(component, event, eOpts) {

            this.AplicarRetenciones();
    },

    aplicaDescuentoCantidadBlur: function(component, event, eOpts) {
        this.AplicarDescuento(true);
    },

    aplicaDescuentoPorcentaje: function(textfield, e, eOpts) {
        if (e.getKey()==Ext.event.Event.ENTER){
                                this.AplicarDescuento(false);
                            }
    },

    aplicaDescuentoPorcentajeBlur: function(component, event, eOpts) {

            this.AplicarDescuento(false);
    },

    buscaCompra: function(button, e, eOpts) {
        var currentController = this;
        var request = new Object(); request.method="consultacompras"; request.params=[];
                                                        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                                                        almacen.getApplication().loadData(request,function(response){
                                                             var wnd = Ext.create("almacen.view.DlgBusquedaCompras", {id:"wndBusquedaCompras"});
                                                            wnd.parentController=currentController;
                                                            wnd.center();
                                                            wnd.show();
                                                            Ext.ComponentMgr.get("gridBusquedaCompras").getStore().loadData(response.compras);
                                                            //Ext.ComponentMgr.get("gridBusquedaCompras").getPicker().loadMask.hide();
                                                        });
    },

    agregarProductoCompra: function(button, e, eOpts) {
        var wnd = Ext.create("almacen.view.DlgAgregaProductos");
        wnd.center();
        wnd.show();
    },

    Limpiar2Click: function(button, e, eOpts) {
                    this.limpiarCompra();
    },

    guardarCompraClick: function(button, e, eOpts) {
        var controller = this;
        var option = true; // se inicia suponiendo que esta bien
        if(window.habilitaValidacionTotal){// se verifica si se tiene que validar
            option = controller.validarTasas();
        }
        if(option){
            console.log("No requiere autorizacion");
            controller.validaGuardarCompra();

        }else{
            console.log("Se requiere autorizacion"); // La compra se guardara a travez de DLGExistenciaAlertaImpuestoCambiado
        }
    },

    CancelarCompraClick: function(button, e, eOpts) {
         if (this.currentCompra > 0){
             var currentController=this;
             var request = new Object(); request.method="cancelarcompras"; request.params=[];
             request.params.push({"name":"imei","value":almacen.getApplication().SessionId},
             {"name":"COMPRA","value":this.currentCompra});
             almacen.getApplication().loadData(request,function(response){
                 currentController.limpiarCompra();
             });
             }
    },

    buscarRegistrosHistoricos: function(button, e, eOpts) {
                    var wnd = Ext.create("almacen.view.DlgBusquedaCompras1", {id:"wndBusquedaCompras1"});
                    wnd.parentController=this;
                    wnd.center();
                    wnd.show();
    },

    PrintCompra: function(button, e, eOpts) {
        var currentController = this;
        if (this.currentDataCompra != null){
           var tipocompra = "printcompra";
            if (!this.currentDataCompra.compra.puedeCancelar)tipocompra="printcompraremota";
            var request = {};
            request.method=tipocompra; request.params=[];
            request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
            request.params.push({"name":"clavecompra","value":this.currentDataCompra.compra.numero});
            almacen.getApplication().loadData(request,function(response){
                ///if (tipocompra == "printcompra")
                almacen.getApplication().downloadCompra(currentController.currentDataCompra.compra.numero, tipocompra);
                currentController.limpiarCompra();
            });

        }
    },

    showVentanaTraspasos: function(button, e, eOpts) {
         var wnd = Ext.create("almacen.view.panelcompras1", {id:"wndTraspasos"});
         wnd.parentController=this;
         wnd.center();
         wnd.show();
    },

    showConsultaTraspasos: function(button, e, eOpts) {
         var wnd = Ext.create("almacen.view.DlgConsultaTraspasos", {id:"wndConsultaTraspasos"});
        wnd.parentController=this;
        wnd.center();
        wnd.show();
    },

    showPedidos: function(button, e, eOpts) {
        var wnd=Ext.create("almacen.view.DlgPedidos", {id:"wndRegistroPedidos"});
        wnd.parentController=this;
        wnd.center();
        wnd.show();
    },

    showDialogImportarCompra: function(button, e, eOpts) {
        var wnd = Ext.create("almacen.view.DlgUploadCompra", {id:"wndUploadCompra"});
        wnd.parentController=this;
        wnd.center();
        Ext.ComponentMgr.get("gridXml").getStore().removeAll();
        wnd.show();
    },

    InitializeEnvironmentCompras: function(component, eOpts) {
        window.AjustesRealizadosCompras = {};
    },

    calculaImportesTotales: function(record) {
        console.log("calculaImportesTotales");
        var Iva = 0.0;
        var Descuento = 0.0;
        var PrecioU = 0.0;
        var Cantidad = 0.0;
        var Total = 0.0;
        var SubTotal = 0.0;
        var IvaAplicado = 0.0;
        var DescuentoAplicado = 0.0;
        var IEPS = 0.0;
        var IE = 0.0;
        var ieAplicado=0.0;

        //var TotalGeneral = 0.0;

        PrecioU = record.get("costoUnitario");
        Cantidad = record.get("cantidad");
        Descuento = record.get("Descuento");
        Iva = record.get("Impuesto");
        IE = record.get("ie");
        /* console.log("precio " + PrecioU);
                        console.log("cantidad " + Cantidad);
                        console.log("descuento " + Descuento);
                        console.log("iva " + Iva);*/

        SubTotal = (Cantidad  * PrecioU);
        DescuentoAplicado = (SubTotal * (Descuento / 100));

        //Calcula IE
        ieAplicado= (SubTotal - DescuentoAplicado) * (IE / 100);

        console.log("Cantidad: " + Cantidad);
        console.log("PrecioU: " +  parseFloat(PrecioU));

        if (record.get("tasa")){
            IEPS = almacen.getApplication().calculaIEPS(record.get("tasa"), Cantidad, PrecioU, Descuento, Iva);
            //SubTotal += IEPS;
        }

        IvaAplicado = (((SubTotal - DescuentoAplicado) + IEPS + ieAplicado)  * (Iva / 100));

        console.log("SubTotal: " + SubTotal);
        console.log("DescuentoAplicado: " + DescuentoAplicado);
        console.log("Iva: " + Iva);
        console.log("IEPS: " + IEPS);
        console.log("(Iva / 100): "+(Iva / 100));

        //Total = (SubTotal - DescuentoAplicado) + (IvaAplicado + IEPS);
        Total = (SubTotal - DescuentoAplicado) + (IvaAplicado + IEPS + ieAplicado);

        console.log("IvaAplicado: " + IvaAplicado);

        var ProporcionAplicar = 0.0;
        ProporcionAplicar = record.get("Proporcion") * Cantidad;
        record.beginEdit();
        record.set("importe", Total);
        record.set("ProporcionAplicar", ProporcionAplicar);
        record.endEdit();
        record.commit();
        console.log("Total  " + Total);
    },

    AplicarDescuento: function(monto) {
        var cantidad =0.0;
        //////debugger;
        var currentContext = this;
        var store =  Ext.ComponentMgr.get("gridproductos").getStore();
        if (monto){
            cantidad=Ext.ComponentMgr.get("descuentoCantidadValue").getValue();
            if (!(cantidad > 0)){
                Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue("0");
                store.each(function(record,id){
                    if (record.get("cantidad") > 0){
                        record.set("Descuento",0);
                        currentContext.calculaImportesTotales(record);
                    }
                });
                return;
            }
        }else{
            cantidad=Ext.ComponentMgr.get("descuentoPorcentajeValue").getValue();
            if (!(cantidad > 0)) {
                Ext.ComponentMgr.get("descuentoCantidadValue").setValue("0");
                store.each(function(record,id){
                    if (record.get("cantidad") > 0){
                        record.set("Descuento",0);
                        currentContext.calculaImportesTotales(record);
                    }
                });
                return;
            }
        }


        var TotalGeneral = 0.0;
        var PctjeDescuento = 0.0;
        var MontoDescuento = 0.0;

        store.each(function(record,id){
            if (record.get("cantidad") > 0){
                record.set("Descuento",0);
                currentContext.calculaImportesTotales(record);
            }
        });


        store.each(function(record,id){
            //TotalGeneral+=(record.get("cantidad") * record.get("costoUnitario"));
            TotalGeneral+=(record.get("importe"));
        });

        console.log("TotalGeneral " + TotalGeneral);
        console.log("monto " + monto);
        console.log("cantidad " + cantidad);
        if (TotalGeneral > 0){
            if (monto){


                MontoDescuento = cantidad;
                MontoDescuento = MontoDescuento > TotalGeneral ? Total : MontoDescuento;
                PctjeDescuento = (MontoDescuento / TotalGeneral) * 100;
            }else{

                PctjeDescuento = cantidad;
                PctjeDescuento = PctjeDescuento > 100 ? 100 : PctjeDescuento;
                MontoDescuento = ((PctjeDescuento * TotalGeneral) / 100);
            }

            Ext.ComponentMgr.get("descuentoCantidadValue").setValue(MontoDescuento);
            Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue(PctjeDescuento);
            store.each(function(record,id){
                if (record.get("cantidad") > 0){
                    record.set("Descuento",PctjeDescuento);
                    currentContext.calculaImportesTotales(record);
                }
            });


        }
    },

    validaGuardarCompra: function() {

        var ErrMsg="";
        var totalManual = 0;
        if (!Ext.ComponentMgr.get("comboProveedor").isValid()){

            ErrMsg+=" Seleccione un proveedor";
        }

        if (!Ext.ComponentMgr.get("comboTipoPago").isValid()){

            ErrMsg+=" Seleccione un tipo de pago";
        }

        if(window.habilitaValidacionTotal){
            console.log(Ext.ComponentMgr.get("comboTotalManual"));
            var val = Ext.ComponentMgr.get("comboTotalManual");
            if(val){
                if (Ext.ComponentMgr.get("comboTotalManual").getValue() >= 0){
                    totalManual = Ext.ComponentMgr.get("comboTotalManual").getValue();
                    console.log("panelCompras/validaGuardarCompra - totalManual: " + totalManual);
                } else{
                    ErrMsg+="Ingrese el total manualmente.";
                }
            }  else{
                    ErrMsg+="Ingrese el total manualmente.";
            }
        }

        if(Ext.ComponentMgr.get("comboTipoPago").getValue()=='17'){
            if(!Ext.ComponentMgr.get("labelTCValue").getValue()){
                ErrMsg+=" Ingrese los 4 digitos de la Tarjeta de Credito";
            }else{
                if(Ext.ComponentMgr.get("labelTCValue").getValue().toString().length!=4){
                    ErrMsg+=" Ingrese los 4 digitos de la Tarjeta de Credito";
                }
            }
        }

        if (ErrMsg > " "){
            Ext.Msg.show({
                title:'Verificar',
                message: ErrMsg,
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.QUESTION,
                fn: function(btn) {

                }
            });

        }else{

            var recsAgregar = [];
            var totalCompra = 0.0;

            Ext.ComponentMgr.get("gridproductos").getStore().each(function(record,id){

                totalCompra +=  record.get("importe"); // sumamos los totales individuales
                //console.log("record.get(IMPORTE)" + Ext.util.Format.currency(record.get("importe")));


                if (record.get("cantidad") > 0){
                    if(record.get("costominimo") > 0||record.get("costomaximo") > 0){
                        if(record.get("costoUnitario") < record.get("costominimo")||record.get("costoUnitario") > record.get("costomaximo")){
                            recsAgregar.push(record);
                        }
                    }

                }
            });

            totalretenciones = Ext.ComponentMgr.get("totalRetencionesValue").getValue();

            if(totalretenciones){
                totalCompra -= totalretenciones;
            }

            totalCompra = (Math.round(totalCompra * 100) / 100); // redondeo a dos DIGITOS
            console.log("El importe total de la compra es: " + totalCompra);


            if (totalManual == totalCompra || totalManual === 0){ // totalManual en 0 indica que no esta activa la validacion


                if (recsAgregar.length > 0){

                    //mostramos la validacion

                    var wnd = Ext.create("almacen.view.DlgPreciosAlerta");
                    wnd.parentController=this;
                    wnd.center();
                    wnd.show();
                    Ext.ComponentMgr.get("gridProductosPrecios").getStore().loadData(recsAgregar);
                }else{
                    this.guardaCompra();
                }
            }else{
                Ext.Msg.show({
                    title:'Verificar',
                    message: "La cantidad ingresada manualmente y la generada por el sistema no coinciden, verifique.",
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.QUESTION,
                    fn: function(btn) {

                    }
                });
            }
        }

    },

    guardaCompra: function() {
        var factura=0;
        var currentController=this;


        if (Ext.ComponentMgr.get("comboNoFactura").getValue() > " "){
            factura = Ext.ComponentMgr.get("comboNoFactura").getValue();
        }
        if (this.currentDataCompra != null){
            if (this.currentDataCompra.compra.solofolio){

                var request = new Object(); request.method="cambiafolio"; request.params=[];
                request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                request.params.push({"name":"clavecompra","value":this.currentDataCompra.compra.numero});
                request.params.push({"name":"folio","value":factura});
                almacen.getApplication().loadData(request,function(response){
                    currentController.limpiarCompra();
                });
            }else{
                return;

            }

        }else{
            var responseGuardaCompra = {};
            var responseCompra = {};
            var store =  Ext.ComponentMgr.get("gridproductos").getStore();

            var dateN=new Date();
            var dateC=Ext.getCmp('dtFechaValue').getValue();

            if(dateC>dateN){

                Ext.Msg.show({
                    title:'Verificar',
                    message: "La fecha de compra no puede ser mayor a la fecha actual.",
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.ERROR,
                    fn: function(btn) {

                    }
                });
                return;

            }

            var fechaC=Ext.util.Format.date(Ext.getCmp('dtFechaValue').getValue(), 'Y/m/d');

            fechaC=fechaC + " " + "00:00:00";

            console.log("Fecha Seleccionada", fechaC);

            var TotalGeneral = 0.0;
            var productosData = [];

            store.each(function(record,id){
                if (record.get("cantidad") > 0){
                    currentProducto = {};
                    currentProducto.Impuesto = record.get("Impuesto");
                    currentProducto.costoUnitario = record.get("costoUnitario");
                    currentProducto.nombreproducto = record.get("nombreproducto");
                    currentProducto.cantidad = record.get("cantidad");
                    currentProducto.Proporcion = record.get("Proporcion");
                    currentProducto.importe = record.get("importe");
                    currentProducto.Descuento = record.get("Descuento");
                    currentProducto.unidad = record.get("unidad");
                    currentProducto.ProporcionAplicar = record.get("ProporcionAplicar");
                    currentProducto.minimo = record.get("minimo");
                    currentProducto.maximo = record.get("maximo");
                    currentProducto.costomaximo = record.get("costomaximo");
                    currentProducto.costominimo = record.get("costominimo");
                    currentProducto.claveproducto=record.get("claveproducto");
                    currentProducto.idTasa = record.get("idTasa");
                    currentProducto.tasa = record.get("tasa");
                    currentProducto.ie = record.get("ie");
                    productosData.push(currentProducto);
                }
            });

            responseCompra.Total=TotalGeneral;
            responseCompra.digitosTarjetaCredito=Ext.ComponentMgr.get("labelTCValue").getValue();
            responseCompra.claveproveedor=Ext.ComponentMgr.get("comboProveedor").getValue();
            responseCompra.tipopago=Ext.ComponentMgr.get("comboTipoPago").getValue();
            responseCompra.numeroFactura=factura;
            responseGuardaCompra.productos=productosData;
            responseGuardaCompra.compra=responseCompra;
            responseCompra.claveusuario=almacen.getApplication().ClaveUsuario;
            ////////debugger;
            responseCompra.fechaedicion=""; //almacen.getApplication().getToday();
            responseCompra.usuarioasigna="";
            responseCompra.totalRetenciones = Ext.ComponentMgr.get("totalRetencionesValue").getValue() ? Ext.ComponentMgr.get("totalRetencionesValue").getValue() : 0 ;
            responseCompra.totalRetencionesIVA = Ext.ComponentMgr.get("totalRetencionesIVA").getValue() ? Ext.ComponentMgr.get("totalRetencionesIVA").getValue() : 0;
            responseCompra.totalRetencionesISR = Ext.ComponentMgr.get("totalRetencionesISR").getValue() ? Ext.ComponentMgr.get("totalRetencionesISR").getValue() : 0;
            responseCompra.totalRetencionesIEPS = Ext.ComponentMgr.get("totalRetencionesIEPS").getValue() ? Ext.ComponentMgr.get("totalRetencionesIEPS").getValue() : 0;
            var currentController = this;
            var request = new Object(); request.method="compras"; request.params=[];
            request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
            request.params.push({"name":"COMPRA","value":Ext.encode(responseGuardaCompra)});
            request.params.push({"name":"FECHA","value":fechaC});
            if (window.currentCompraXML){
                request.params.push({"name":"factura","value":Ext.encode(window.currentCompraXML)});
            }



            console.log("request");console.log(request);
            almacen.getApplication().loadData(request,function(response){
                console.log(response);
                almacen.getApplication().downloadCompra(response.clave, "printcompra");
                currentController.limpiarCompra();
                window.AjustesRealizadosCompras = {}; //limpiar los ajustes
            });
        }

    },

    limpiarCompra: function() {

        this.currentDataCompra=null;
        Ext.ComponentMgr.get("lblNoCompra").setText(" ");
        //Ext.ComponentMgr.get("totalRetencionesValue").setReadOnly(false);
        Ext.ComponentMgr.get("totalRetencionesIVA").setReadOnly(false);
        Ext.ComponentMgr.get("totalRetencionesISR").setReadOnly(false);
        Ext.ComponentMgr.get("totalRetencionesIEPS").setReadOnly(false);

        Ext.ComponentMgr.get("totalRetencionesValue").setValue(""); // Debe ser el primero para que al momento de quitar los productos el total sea el correcto y no vaya a negativo
        Ext.ComponentMgr.get("totalRetencionesIVA").setValue("");
        Ext.ComponentMgr.get("totalRetencionesISR").setValue("");
        Ext.ComponentMgr.get("totalRetencionesIEPS").setValue("");

        Ext.ComponentMgr.get("addProductoCompra").setDisabled(false);
        Ext.ComponentMgr.get("cleanProductoCompra").setDisabled(false);
        Ext.ComponentMgr.get("comboNoFactura").setReadOnly(false);
        Ext.ComponentMgr.get("comboProveedor").setReadOnly(false);
        Ext.ComponentMgr.get("comboTipoPago").setReadOnly(false);
        //Ext.ComponentMgr.get("gridproductos").setReadOnly(false);
        Ext.ComponentMgr.get("descuentoCantidad").setDisabled(false);
        Ext.ComponentMgr.get("descuentoCantidadValue").setDisabled(false);
        Ext.ComponentMgr.get("descuentoPorcentaje").setDisabled(false);
        Ext.ComponentMgr.get("descuentoPorcentajeValue").setDisabled(false);
        Ext.ComponentMgr.get("pagarCompra").setDisabled(false);
        Ext.ComponentMgr.get("cancelarCompra").setDisabled(false);
        Ext.ComponentMgr.get("comboNoFactura").setValue("");
        Ext.ComponentMgr.get("comboTotalManual").setValue("");
        Ext.ComponentMgr.get("comboProveedor").clearValue();
        Ext.ComponentMgr.get("comboTipoPago").clearValue();
        Ext.ComponentMgr.get("gridproductos").getStore().removeAll();
        Ext.ComponentMgr.get("descuentoCantidadValue").setValue("");
        Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue("");
        Ext.ComponentMgr.get("comboProductos").clearValue();
        Ext.ComponentMgr.get("comboClasificacion").clearValue();
        Ext.ComponentMgr.get("comboProductos").setReadOnly(false);
        Ext.ComponentMgr.get("comboClasificacion").setReadOnly(false);
        Ext.ComponentMgr.get("lblNoCompra").setText('');
        this.readOnly = false;
        window.currentCompraXML=null;
        this.currentCompra=0;
    },

    cargarCompra: function(data) {
        console.log(data);
        Ext.ComponentMgr.get("addProductoCompra").setDisabled(true);
        // Ext.ComponentMgr.get("cleanProductoCompra").setDisabled(true);
        Ext.ComponentMgr.get("comboNoFactura").setReadOnly(!data.compra.solofolio);
        Ext.ComponentMgr.get("comboProveedor").setReadOnly(true);
        Ext.ComponentMgr.get("comboTipoPago").setReadOnly(true);
        //Ext.ComponentMgr.get("gridproductos").setReadOnly(true);
        Ext.ComponentMgr.get("descuentoCantidad").setDisabled(true);
        Ext.ComponentMgr.get("descuentoCantidadValue").setDisabled(true);
        Ext.ComponentMgr.get("descuentoPorcentaje").setDisabled(true);
        Ext.ComponentMgr.get("descuentoPorcentajeValue").setDisabled(true);
        Ext.ComponentMgr.get("pagarCompra").setDisabled(!data.compra.solofolio);

        Ext.ComponentMgr.get("cancelarCompra").setDisabled(data.compra.estado<0);
        if(!data.compra.puedeCancelar)Ext.ComponentMgr.get("cancelarCompra").setDisabled(true);

        Ext.ComponentMgr.get("comboNoFactura").setValue(data.compra.factura);
        Ext.ComponentMgr.get("comboProveedor").setValue(data.compra.proveedor);
        Ext.ComponentMgr.get("comboTipoPago").setValue(""+data.compra.pago);
        Ext.ComponentMgr.get("gridproductos").getStore().removeAll();
        Ext.ComponentMgr.get("gridproductos").getStore().loadData(data.productos);
        Ext.ComponentMgr.get("gridproductos").getStore().sort('nombreproducto','ASC');
        Ext.ComponentMgr.get("descuentoCantidadValue").setValue("");
        Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue("");
        Ext.ComponentMgr.get("comboProductos").clearValue();
        Ext.ComponentMgr.get("comboClasificacion").clearValue();
        Ext.ComponentMgr.get("comboProductos").setReadOnly(true);
        Ext.ComponentMgr.get("comboClasificacion").setReadOnly(true);
        Ext.ComponentMgr.get("totalRetencionesValue").setValue(data.compra.totalRetenciones);
        Ext.ComponentMgr.get("totalRetencionesValue").setReadOnly(true);
        Ext.ComponentMgr.get("totalRetencionesISR").setReadOnly(true);
        Ext.ComponentMgr.get("totalRetencionesIVA").setReadOnly(true);
        Ext.ComponentMgr.get("totalRetencionesIEPS").setReadOnly(true);
        this.AplicarRetenciones(); // Se usa para actualizar el total con la retenciones
        Ext.ComponentMgr.get("lblNoCompra").update('<font color="white">Compra no:' + data.compra.numero + '</font>');
        this.currentCompra=data.compra.numero;
        this.currentDataCompra = data;
        this.readOnly = true;
    },

    ImportaCompra: function(data, compraXML) {
        this.limpiarCompra();

        Ext.ComponentMgr.get("comboNoFactura").setValue(data.compra.factura);
        Ext.ComponentMgr.get("comboProveedor").setValue(data.compra.proveedor);
        Ext.ComponentMgr.get("comboTipoPago").setValue(""+data.compra.pago);
        Ext.ComponentMgr.get("gridproductos").getStore().removeAll();
        Ext.ComponentMgr.get("gridproductos").getStore().loadData(data.productos);
        Ext.ComponentMgr.get("gridproductos").getStore().sort('nombreproducto','ASC');
        Ext.ComponentMgr.get("descuentoCantidadValue").setValue("");
        Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue("");
        Ext.ComponentMgr.get("comboProductos").clearValue();
        Ext.ComponentMgr.get("comboClasificacion").clearValue();
        Ext.ComponentMgr.get("comboProductos").setReadOnly(true);
        Ext.ComponentMgr.get("comboClasificacion").setReadOnly(true);
        Ext.ComponentMgr.get("totalRetencionesValue").setValue(data.compra.totalRetenciones);
        Ext.ComponentMgr.get("totalRetencionesISR").setValue(data.compra.totalRetencionesISR);
        Ext.ComponentMgr.get("totalRetencionesIVA").setValue(data.compra.totalRetencionesIVA);
        Ext.ComponentMgr.get("totalRetencionesIEPS").setValue(data.compra.totalRetencionesIEPS);
        this.AplicarRetenciones(); // Se usa para actualizar el total con la retenciones
        Ext.ComponentMgr.get("lblNoCompra").update('<font color="white"></font>');
        this.currentCompra=data.compra.numero;

        this.currentDataCompra=null;
        this.readOnly = true;
        if (compraXML)
            window.currentCompraXML = compraXML;


    },

    CalculaImporteUnitario: function(record) {
        var Descuento = 0.0;
        var PrecioU = 0.0;
        var Cantidad = 0.0;
        var Total = 0.0;
        var SubTotal = 0.0;
        var Iva = 0.0;
        var DescuentoAplicado = 0.0;
        var ImporteTotal=0.0;
        var Ieps = 0.0;
        //var TotalGeneral = 0.0;

        PrecioU = record.get("costoUnitario");
        Cantidad = record.get("cantidad");
        Descuento = record.get("Descuento");
        Iva = record.get("Impuesto");
        Total = record.get("importe");

        if (Descuento >= 100)
            Descuento=0.0;
        if (record.get("tasa")){
            Ieps = record.get("tasa")["ImportePctje"];
            console.log("ATENCION!!!!!!!!!!! LA TASA IEPS ES ......", Ieps);
        }


        Ext.ComponentMgr.get("descuentoCantidadValue").setValue("");
        Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue("");

        PrecioU=(((Total/(1+((Iva)/100)) ) /(1+((Ieps)/100)) )/(1-(Descuento/100)))/Cantidad;//formula para calculo del costo unitarioo
        record.beginEdit();
        record.set("costoUnitario", PrecioU);
        record.set("Descuento", Descuento);

        //record.set("ProporcionAplicar", ProporcionAplicar);
        record.endEdit();
        record.commit();
    },

    validarTasas: function() {
        var retVal = true;
        var impuestosCambiados = [];
        for(var claveprod in window.AjustesRealizadosCompras){
            var prod = window.AjustesRealizadosCompras[claveprod];
            console.log("prod: " + prod);
            var initial_value = prod.Initial_Value;
            console.log("initial_value: " + initial_value);
            var new_value = prod.impuestoCambiadoValidacion;
            console.log("new_value: " + new_value);

            if (initial_value != new_value){ //Se esta cambiando el impuesto
                //se debe mostrar la ventana de contraseña del supervisor
                console.log("se cambian impuestos");
                impuestosCambiados.push(prod);
            }

        }


        if (impuestosCambiados.length > 0){

            //return true
            var wnd = Ext.create("almacen.view.DlgExistenciaAlertaImpuestoCambiado", {id:"wndPreciosAlerta2"});
            wnd.parentController=this;
            wnd.center();
            wnd.show();
            Ext.ComponentMgr.get("gridProductosTasas").getStore().loadData(impuestosCambiados);
            return false;
        }else {
            return true;
        }

    },

    AplicarRetenciones: function() {

        var totalretencionesIVA = Ext.ComponentMgr.get("totalRetencionesIVA").getValue();
        console.log(totalretencionesIVA);

        var totalretencionesISR = Ext.ComponentMgr.get("totalRetencionesISR").getValue();
        console.log(totalretencionesISR);

        var totalretencionesIEPS = Ext.ComponentMgr.get("totalRetencionesIEPS").getValue();
        console.log(totalretencionesIEPS);

        var totalretenciones = totalretencionesIVA + totalretencionesISR + totalretencionesIEPS;

        Ext.ComponentMgr.get("totalRetencionesValue").setValue(totalretenciones);

        //var totalretenciones = Ext.ComponentMgr.get("totalRetencionesValue").getValue();
        totalretenciones = totalretenciones ? totalretenciones : 0;
        if(totalretenciones >= 0){
            console.log(totalretenciones);
            var grid = Ext.ComponentMgr.get("gridproductos");
            var record = grid.getStore().getAt(0);
            if(record){
                record.beginEdit();
                record.set("importe", record.get("importe"));
                record.endEdit();
                record.commit();
            }
        } else {
            Ext.ComponentMgr.get("totalRetencionesValue").setValue(0);
            this.AplicarRetenciones();
        }
    },

    onDtFechaValueAfterRender: function(component, eOpts) {
        var date=new Date();
        Ext.ComponentMgr.get("dtFechaValue").setValue(date);

        var activar=almacen.getApplication().currentSession.habilitaFechaCompra;

        console.log(activar);

        if(activar){
            Ext.ComponentMgr.get("dtFechaValue").show();
        }else{
            Ext.ComponentMgr.get("dtFechaValue").hide();
        }
    },

    onContainerBeforeRender: function(component, eOpts) {
        component.add(Ext.create("almacen.view.DlgAgregaProductos"));
    },

    onCmbImpuestoBeforeRender: function(component, eOpts) {
        var request = new Object(); request.method="impuestos"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            component.getStore().loadData(response.items);
            //Ext.ComponentMgr.get("comboImpuesto").getPicker().loadMask.hide();
        });
    },

    onCmbImpuestoBeforeQuery: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
        queryPlan.forceAll = true;
    },

    onCmbImpuestoIEBeforeQuery: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
        queryPlan.forceAll = true;
    },

    onCmbImpuestoIEBeforeRender: function(component, eOpts) {
        var request = new Object(); request.method="impuestosie"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            component.getStore().loadData(response.items);
            //Ext.ComponentMgr.get("comboImpuesto").getPicker().loadMask.hide();
        });
    },

    onColumnIEBeforeRender: function(component, eOpts) {
        var activar=almacen.getApplication().currentSession.habilitaImpuestoIE;

        if(activar){
            Ext.ComponentMgr.get("columnIE").show();
        }else{
            Ext.ComponentMgr.get("columnIE").hide();
        }

    }

});
