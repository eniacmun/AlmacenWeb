/*
 * File: app/view/panelcomprasViewController1.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.panelcomprasViewController1', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panelcompras1',

    config: {
        currentCompra: null
    },

    control: {
        "#comboProveedor1": {
            beforerender: 'loadProveedores',
            beforequery: 'filtraProveedor',
            select: 'loadProductosProveedores'
        },
        "#comboTipoPago": {
            beforerender: 'loadTipoPago'
        },
        "#comboClasificacion1": {
            beforerender: 'loadClasificacion',
            select: 'loadComboProductos',
            beforequery: 'filtraClasificaciones'
        },
        "#comboProductos": {
            beforequery: 'filtraProductos'
        },
        "button#addProductoCompra1": {
            click: 'agregaProductos'
        },
        "#descuentoCantidadValue": {
            keyup: 'aplicaDescuentoCantidad',
            blur: 'aplicaDescuentoCantidadBlur'
        },
        "#descuentoPorcentajeValue": {
            keyup: 'aplicaDescuentoPorcentaje',
            blur: 'aplicaDescuentoPorcentajeBlur'
        },
        "button#btnBuscarCompra1": {
            click: 'buscaCompra'
        },
        "button#cleanProductoCompra1": {
            click: 'Limpiar2Click'
        },
        "button#pagarCompra1": {
            click: 'guardarCompraClick'
        },
        "button#cancelarCompra1": {
            click: 'CancelarCompraClick'
        },
        "button#btnHistorico": {
            click: 'buscarRegistrosHistoricos'
        },
        "button#btnPrintCompra": {
            click: 'PrintCompra'
        }
    },

    loadProveedores: function(component, eOpts) {
        var request = new Object(); request.method="sucursales"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        almacen.getApplication().loadData(request,function(response){
            component.getStore().loadData(response.proveedores);
            component.getStore().sort('nombreProveedor','ASC');
            //Ext.ComponentMgr.get("comboProveedor").getPicker().loadMask.hide();


        });
    },

    filtraProveedor: function(queryPlan, eOpts) {
                 queryPlan.query = new RegExp(queryPlan.query, 'i');
                 queryPlan.forceAll = true;
    },

    loadTipoPago: function(component, eOpts) {
                     var request = new Object(); request.method="tipospago"; request.params=[];
                                    request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                                    almacen.getApplication().loadData(request,function(response){
                                        component.getStore().loadData(response.items);
                                        component.getStore().sort('nombreProveedor','ASC');
                                        component.getStore().fireEvent('load', component.getStore(), [], true, {});
                                        //Ext.ComponentMgr.get("comboTipoPago").getPicker().loadMask.hide();

                                    });
    },

    loadClasificacion: function(component, eOpts) {
                                    var request = new Object(); request.method="clasificaciones"; request.params=[];
                                    request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
                                    almacen.getApplication().loadData(request,function(response){
                                    component.getStore().loadData(response.productos);
                                    component.getStore().sort('nombreproducto','ASC');
                                        //Ext.ComponentMgr.get("comboClasificacion").getPicker().loadMask.hide();

                                    });
    },

    loadComboProductos: function(combo, records, eOpts) {
        var request = new Object(); request.method="productoscompra"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId},
                            {"name":"clasificacion","value":combo.getValue()});
        almacen.getApplication().loadData(request,function(response){
            Ext.ComponentMgr.get("comboProductos1").getStore().loadData(response.productos);
            Ext.ComponentMgr.get("comboProductos1").getStore().sort('nombreproducto','ASC');
            //Ext.ComponentMgr.get("comboProducto").getPicker().loadMask.hide();

        });
    },

    loadProductosProveedores: function(combo, records, eOpts) {
                var request = new Object(); request.method="productoscompra"; request.params=[];
                                        request.params.push({"name":"imei","value":almacen.getApplication().SessionId},
                                        {"name":"proveedor","value":combo.getValue()});
                                        almacen.getApplication().loadData(request,function(response){
                                            Ext.ComponentMgr.get("gridproductos1").getStore().removeAll();
                                            Ext.ComponentMgr.get("gridproductos1").getStore().loadData(response.productos);
                                            Ext.ComponentMgr.get("gridproductos1").getStore().sort('nombreproducto','ASC');
                                        });
    },

    filtraClasificaciones: function(queryPlan, eOpts) {
                        queryPlan.query = new RegExp(queryPlan.query, 'i');
                         queryPlan.forceAll = true;
    },

    filtraProductos: function(queryPlan, eOpts) {
        queryPlan.query = new RegExp(queryPlan.query, 'i');
                         queryPlan.forceAll = true;
    },

    agregaProductos: function(button, e, eOpts) {
        var recs = Ext.ComponentMgr.get("comboProductos1").getValueRecords();
        console.log(recs);
        var recsAgregar = [];
        for (var i = 0;i < recs.length;i++){
            console.log("Count del store: " + Ext.ComponentMgr.get("gridproductos1").getStore().getCount());
            if (Ext.ComponentMgr.get("gridproductos1").getStore().getCount() > 0){
                var agrega = true;
                Ext.ComponentMgr.get("gridproductos1").getStore().each(function(record, id){

                    console.log("comparando " + recs[i].get("claveproducto") + " con " + record.get("claveproducto") + " = "+ record.get("claveproducto").indexOf(recs[i].get("claveproducto")) < 0);
                    if (record.get("claveproducto") == recs[i].get("claveproducto")){
                        agrega=false;
                    }
                });
                if (agrega){
                    recsAgregar.push(recs[i]);
                    Ext.ComponentMgr.get("gridproductos1").getStore().loadData([recs[i]], true);
                }
            }else{


                recsAgregar.push(recs[i]);
                Ext.ComponentMgr.get("gridproductos1").getStore().loadData([recs[i]], true);
            }

        }
        Ext.ComponentMgr.get("gridproductos1").getStore().sort('nombreproducto','ASC');
        //Ext.ComponentMgr.get("gridproductos").getStore().loadData(recsAgregar, true);
        Ext.ComponentMgr.get("comboProductos1").records = [];
        Ext.ComponentMgr.get("comboProductos1").clearValue();
        //Ext.ComponentMgr.get("gridproductos").getStore().sort('nombreproducto','ASC');
    },

    aplicaDescuentoCantidad: function(textfield, e, eOpts) {
        if (e.getKey()==Ext.event.Event.ENTER){
            this.AplicarDescuento(true);
        }
    },

    aplicaDescuentoCantidadBlur: function(component, event, eOpts) {
              this.AplicarDescuento(true);
    },

    aplicaDescuentoPorcentaje: function(textfield, e, eOpts) {
                        if (e.getKey()==Ext.event.Event.ENTER){
                                this.AplicarDescuento(false);
                            }
    },

    aplicaDescuentoPorcentajeBlur: function(component, event, eOpts) {
                 this.AplicarDescuento(false);
    },

    buscaCompra: function(button, e, eOpts) {
        var wnd = Ext.create("almacen.view.DlgConsultaTraspasos", {id:"wndConsultaTraspasos"});
        wnd.parentController=this;
        wnd.center();
        wnd.show();
    },

    Limpiar2Click: function(button, e, eOpts) {
                    this.limpiarCompra();
    },

    guardarCompraClick: function(button, e, eOpts) {
        var controller = this;

        if(almacen.getApplication().currentSession.habilitaTraspasoEfectivo){
            Ext.MessageBox.show({
                title:'Confirmación',
                message: '¿Desea continuar con el traspaso a Crédito o pasar a Efectivo?',
                buttons: Ext.Msg.YESNOCANCEL,
                buttonText: {
                    yes: 'Continuar a Crédito',
                    no: 'Pasar a Efectivo',
                    cancel: 'Cancelar'
                },
                fn: function(btn){
                    if (btn === 'yes'){
                        console.log("Cobrando a crédito");
                        controller.validaGuardarCompra(14);
                        return;
                    }
                    if (btn === 'no'){
                        console.log("Pasando a Efectivo");
                        controller.validaGuardarCompra(15);
                        return;
                    }
                    if (btn === 'cancel'){
                        return;
                    }
                }
            });
        } else {
            controller.validaGuardarCompra(14);
        }


    },

    CancelarCompraClick: function(button, e, eOpts) {
         /*if (this.currentCompra > 0){
             var currentController=this;
             var request = new Object(); request.method="cancelarcompras"; request.params=[];
             request.params.push({"name":"imei","value":almacen.getApplication().SessionId},
             {"name":"COMPRA","value":this.currentCompra});
             almacen.getApplication().loadData(request,function(response){
                 currentController.limpiarCompra();
             });
             }*/
        var winTraspasos = Ext.WindowManager.get("wndTraspasos");
        winTraspasos.close();
    },

    buscarRegistrosHistoricos: function(button, e, eOpts) {
        var wnd = Ext.create("almacen.view.DlgBusquedaCompras1", {id:"wndBusquedaCompras1"});
        wnd.parentController=this;
        wnd.center();
        wnd.show();
    },

    PrintCompra: function(button, e, eOpts) {
        var currentController = this;
        if (this.currentDataCompra != null){
           var tipocompra = "printcompra";
            if (!this.currentDataCompra.compra.puedeCancelar)tipocompra="printcompraremota";
            var request = {};
            request.method=tipocompra; request.params=[];
            request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
            request.params.push({"name":"clavecompra","value":this.currentDataCompra.compra.numero});
            almacen.getApplication().loadData(request,function(response){
                    currentController.limpiarCompra();
            });

        }
    },

    calculaImportesTotales: function(record) {
         var Iva = 0.0;
                    	var Descuento = 0.0;
                    	var PrecioU = 0.0;
                    	var Cantidad = 0.0;
                    	var Total = 0.0;
                    	var SubTotal = 0.0;
                    	var IvaAplicado = 0.0;
                    	var DescuentoAplicado = 0.0;
                    	//var TotalGeneral = 0.0;

                        PrecioU = record.get("costoUnitario");
                        Cantidad = record.get("cantidad");
                        Descuento = record.get("Descuento");
                        Iva = record.get("Impuesto");
                       /* console.log("precio " + PrecioU);
                        console.log("cantidad " + Cantidad);
                        console.log("descuento " + Descuento);
                        console.log("iva " + Iva);*/

                        SubTotal = (Cantidad  * PrecioU);
                        DescuentoAplicado = (SubTotal * (Descuento / 100));
                        IvaAplicado = ((SubTotal - DescuentoAplicado) * (Iva / 100));
                        Total = (SubTotal - DescuentoAplicado) + IvaAplicado;
                        var ProporcionAplicar = 0.0;
                        ProporcionAplicar = record.get("Proporcion") * Cantidad;
                        record.beginEdit();
                        record.set("importe", Total);
                        record.set("ProporcionAplicar", ProporcionAplicar);
                        record.endEdit();
                        record.commit();
                        console.log("Total  " + Total);
    },

    AplicarDescuento: function(monto) {
         var cantidad =0.0;
        var currentContext = this;
                var store =  Ext.ComponentMgr.get("gridproductos").getStore();
                        if (monto){
                            cantidad=Ext.ComponentMgr.get("descuentoCantidadValue").getValue();
                            if (!(cantidad > 0)){
                                Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue("0");
                                store.each(function(record,id){
                                    if (record.get("cantidad") > 0){
                                        record.set("Descuento",0);
                                        currentContext.calculaImportesTotales(record);
                                     }
                                });
                                return;
                            }
                        }else{
                            cantidad=Ext.ComponentMgr.get("descuentoPorcentajeValue").getValue();
                            if (!(cantidad > 0)) {
                                Ext.ComponentMgr.get("descuentoCantidadValue").setValue("0");
                                store.each(function(record,id){
                                    if (record.get("cantidad") > 0){
                                        record.set("Descuento",0);
                                        currentContext.calculaImportesTotales(record);
                                     }
                                });
                                return;
                            }
                        }


                        var TotalGeneral = 0.0;
                        var PctjeDescuento = 0.0;
                        var MontoDescuento = 0.0;

                        store.each(function(record,id){
                            if (record.get("cantidad") > 0){
                                record.set("Descuento",0);
                                currentContext.calculaImportesTotales(record);
                             }
                        });


                        store.each(function(record,id){
                            //TotalGeneral+=(record.get("cantidad") * record.get("costoUnitario"));
                            TotalGeneral+=(record.get("importe"));
                        });

                        console.log("TotalGeneral " + TotalGeneral);
                        console.log("monto " + monto);
                        console.log("cantidad " + cantidad);
                        if (TotalGeneral > 0){
                            if (monto){


                                MontoDescuento = cantidad;
                                MontoDescuento = MontoDescuento > TotalGeneral ? Total : MontoDescuento;
                                PctjeDescuento = (MontoDescuento / TotalGeneral) * 100;
                            }else{

                                PctjeDescuento = cantidad;
                                PctjeDescuento = PctjeDescuento > 100 ? 100 : PctjeDescuento;
                          MontoDescuento = ((PctjeDescuento * TotalGeneral) / 100);
                            }

                             Ext.ComponentMgr.get("descuentoCantidadValue").setValue(MontoDescuento);
                             Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue(PctjeDescuento);
                             store.each(function(record,id){
                             if (record.get("cantidad") > 0){
                                 record.set("Descuento",PctjeDescuento);
                                 currentContext.calculaImportesTotales(record);
                             }
                             });


                        }
    },

    validaGuardarCompra: function(tipoPago) {
        var ErrMsg="";
        if (!Ext.ComponentMgr.get("comboProveedor1").isValid()){
            ErrMsg+=" Seleccione un proveedor";
        }
        var isDirty=false;
        var recsAgregar = [];
        Ext.ComponentMgr.get("gridproductos1").getStore().each(function(record,id){
        if (record.get("cantidad") > 0){
            isDirty=true;
            if( (record.get("costominimo") > 0||record.get("costomaximo") > 0) && record.get("costoTraspaso") === 0){
                if(record.get("costoUnitario") < record.get("costominimo")||record.get("costoUnitario") > record.get("costomaximo")){
                    recsAgregar.push(record);
                  }
                 }
                }
        });
        if (!isDirty){
            ErrMsg+="\nCapture por lo menos un producto";
        }

        if (ErrMsg > " "){
            Ext.Msg.show({
            title:'Verificar',
            message: ErrMsg,
            buttons: Ext.Msg.OK,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {

            }});
            return;

        }
        if (recsAgregar.length > 0){
        //mostramos la validacion
            var wnd = Ext.create("almacen.view.DlgPreciosAlerta");
            wnd.parentController=this;
            wnd.center();
            wnd.show();
            Ext.ComponentMgr.get("gridProductosPrecios").getStore().loadData(recsAgregar);
        }else{
            this.guardaCompra(tipoPago);
        }


    },

    guardaCompra: function(tipoPago) {
        var factura=0;
        var currentController=this;
        var responseGuardaCompra = {};
        var responseCompra = {};
        var store =  Ext.ComponentMgr.get("gridproductos1").getStore();


        var TotalGeneral = 0.0;
        var productosData = [];

        store.each(function(record,id){
            if (record.get("cantidad") > 0){
                currentProducto = {};
                currentProducto.Impuesto = record.get("Impuesto");
                currentProducto.costoUnitario = record.get("costoUnitario");
                currentProducto.nombreproducto = record.get("nombreproducto");
                currentProducto.cantidad = record.get("cantidad");
                currentProducto.Proporcion = record.get("Proporcion");
                currentProducto.importe = record.get("importe");
                currentProducto.Descuento = record.get("Descuento");
                currentProducto.unidad = record.get("unidad");
                currentProducto.ProporcionAplicar = record.get("ProporcionAplicar");
                currentProducto.minimo = record.get("minimo");
                currentProducto.maximo = record.get("maximo");
                currentProducto.costomaximo = record.get("costomaximo");
                currentProducto.costominimo = record.get("costominimo");
                currentProducto.claveproducto=record.get("claveproducto");
                TotalGeneral+=currentProducto.importe;
                productosData.push(currentProducto);
            }
        });

        responseCompra.Total=TotalGeneral;
        responseCompra.claveproveedor=Ext.ComponentMgr.get("comboProveedor1").getValue();
        responseCompra.tipopago=0;//Ext.ComponentMgr.get("comboTipoPago").getValue();
        responseCompra.numeroFactura=factura;
        responseCompra.tipopago = tipoPago;
        responseGuardaCompra.productos=productosData;
        responseGuardaCompra.compra=responseCompra;

        var currentController = this;
        var request = new Object(); request.method="traspasos"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        request.params.push({"name":"COMPRA","value":Ext.encode(responseGuardaCompra)});

        almacen.getApplication().loadData(request,function(response){

            console.log(response);

            if(response.filepath){
                if(response.filepath.length == 1){
                    var curentFilepath = response.filepath[0];
                    console.log("Archivo a descargar: " + curentFilepath);
                    if(curentFilepath !== ""){
                        Ext.Msg.alert("Mensaje","Impresión correcta, se descargará su archivo.");
                        almacen.getApplication().downloadPedido(curentFilepath, 0); // 0 PDF 1 Excel 2 Ambos
                    }else{
                        Ext.Msg.alert("Mensaje","No se pudo generar su archivo. Reintente");
                    }
                }/*else{
                                       Ext.Msg.alert("Mensaje","No se pudo generar su archivo.");
                                   }*/
            }

            currentController.limpiarCompra();

        }, function(response){
            if (!response.registros)
                Ext.Msg.alert('',response.msg);
            else
                currentController.despliegaErrorProductoTraspasos(response.registros);

        });

    },

    limpiarCompra: function() {
        this.currentDataCompra=null;
        Ext.ComponentMgr.get("lblNoCompra1").setText(" ");
                		  Ext.ComponentMgr.get("addProductoCompra1").setDisabled(false);
                		  Ext.ComponentMgr.get("cleanProductoCompra1").setDisabled(false);
                		  //Ext.ComponentMgr.get("comboNoFactura1").setReadOnly(false);
                		  Ext.ComponentMgr.get("comboProveedor1").setReadOnly(false);
                		  //Ext.ComponentMgr.get("comboTipoPago1").setReadOnly(false);
                		  //Ext.ComponentMgr.get("gridproductos1").setReadOnly(false);
                		  /*
                          Ext.ComponentMgr.get("descuentoCantidad1").setDisabled(false);
                		  Ext.ComponentMgr.get("descuentoCantidadValue1").setReadOnly(false);
                		  Ext.ComponentMgr.get("descuentoPorcentaje1").setDisabled(false);
                		  Ext.ComponentMgr.get("descuentoPorcentajeValue1").setReadOnly(false);
                          */
                		  Ext.ComponentMgr.get("pagarCompra1").setDisabled(false);
                		  Ext.ComponentMgr.get("cancelarCompra1").setDisabled(false);
                		  //Ext.ComponentMgr.get("comboNoFactura1").setValue("");
                		  Ext.ComponentMgr.get("comboProveedor1").clearValue();
                		  //Ext.ComponentMgr.get("comboTipoPago1").clearValue();
                		  Ext.ComponentMgr.get("gridproductos1").getStore().removeAll();

                		  //Ext.ComponentMgr.get("descuentoCantidadValue1").setValue("");
                		  //Ext.ComponentMgr.get("descuentoPorcentajeValue1").setValue("");
                		  Ext.ComponentMgr.get("comboProductos1").clearValue();
                		  Ext.ComponentMgr.get("comboClasificacion1").clearValue();
                		  Ext.ComponentMgr.get("comboProductos1").setReadOnly(false);
                		  Ext.ComponentMgr.get("comboClasificacion1").setReadOnly(false);
                          Ext.ComponentMgr.get("lblNoCompra1").setText('');
                          this.readOnly = false;
                          this.currentCompra=0;
    },

    cargarCompra: function(data) {
        console.log(data);
        Ext.ComponentMgr.get("addProductoCompra").setDisabled(true);
        // Ext.ComponentMgr.get("cleanProductoCompra").setDisabled(true);
        Ext.ComponentMgr.get("comboNoFactura").setReadOnly(!data.compra.solofolio);
        Ext.ComponentMgr.get("comboProveedor").setReadOnly(true);
        Ext.ComponentMgr.get("comboTipoPago").setReadOnly(true);
        //Ext.ComponentMgr.get("gridproductos").setReadOnly(true);
        Ext.ComponentMgr.get("descuentoCantidad").setDisabled(true);
        Ext.ComponentMgr.get("descuentoCantidadValue").setReadOnly(true);
        Ext.ComponentMgr.get("descuentoPorcentaje").setDisabled(true);
        Ext.ComponentMgr.get("descuentoPorcentajeValue").setReadOnly(true);
        Ext.ComponentMgr.get("pagarCompra").setDisabled(!data.compra.solofolio);

        Ext.ComponentMgr.get("cancelarCompra").setDisabled(data.compra.estado<0);
        if(!data.compra.puedeCancelar)Ext.ComponentMgr.get("cancelarCompra").setDisabled(true);

        Ext.ComponentMgr.get("comboNoFactura").setValue(data.compra.factura);
        Ext.ComponentMgr.get("comboProveedor").setValue(data.compra.proveedor);
        Ext.ComponentMgr.get("comboTipoPago").setValue(""+data.compra.pago);
        Ext.ComponentMgr.get("gridproductos").getStore().removeAll();
        Ext.ComponentMgr.get("gridproductos").getStore().loadData(data.productos);
        Ext.ComponentMgr.get("gridproductos").getStore().sort('nombreproducto','ASC');
        Ext.ComponentMgr.get("descuentoCantidadValue").setValue("");
        Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue("");
        Ext.ComponentMgr.get("comboProductos").clearValue();
        Ext.ComponentMgr.get("comboClasificacion").clearValue();
        Ext.ComponentMgr.get("comboProductos").setReadOnly(true);
        Ext.ComponentMgr.get("comboClasificacion").setReadOnly(true);
        Ext.ComponentMgr.get("lblNoCompra").update('<font color="white">Compra no:' + data.compra.numero + '</font>');
        this.currentCompra=data.compra.numero;
        this.currentDataCompra = data;
        this.readOnly = true;
    },

    CalculaImporteUnitario: function(record) {
        var Descuento = 0.0;
        var PrecioU = 0.0;
        var Cantidad = 0.0;
        var Total = 0.0;
        var SubTotal = 0.0;
        var Iva = 0.0;
        var DescuentoAplicado = 0.0;
        var ImporteTotal=0.0;
        //var TotalGeneral = 0.0;

        PrecioU = record.get("costoUnitario");
        Cantidad = record.get("cantidad");
        Descuento = record.get("Descuento");
        Iva = record.get("Impuesto");
        Total = record.get("importe");

        if (Descuento >= 100)
                Descuento=0.0;

        Ext.ComponentMgr.get("descuentoCantidadValue").setValue("");
        Ext.ComponentMgr.get("descuentoPorcentajeValue").setValue("");
        PrecioU=((Total/(1+(Iva/100)))/(1-(Descuento/100)))/Cantidad;//formula para calculo del costo unitarioo
        record.beginEdit();
        record.set("costoUnitario", PrecioU);
        record.set("Descuento", Descuento);

        //record.set("ProporcionAplicar", ProporcionAplicar);
        record.endEdit();
        record.commit();
    },

    despliegaErrorProductoTraspasos: function(data) {
         var wnd = Ext.create("almacen.view.DlgValidacionProdCompra");
            wnd.parentController=this;
            wnd.center();
            wnd.show();
            Ext.ComponentMgr.get("gridValidacionProdCompra").getStore().loadData(data);
    }

});
