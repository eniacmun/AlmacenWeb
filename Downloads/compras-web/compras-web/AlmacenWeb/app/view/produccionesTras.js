/*
 * File: app/view/produccionesTras.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.produccionesTras', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.produccionestras',

    requires: [
        'almacen.view.produccionesTrasViewModel',
        'almacen.view.produccionesTrasViewController',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.filters.filter.Number',
        'Ext.grid.filters.filter.List',
        'Ext.grid.column.Number',
        'Ext.form.field.ComboBox',
        'Ext.grid.column.Date',
        'Ext.grid.filters.filter.Date',
        'Ext.grid.plugin.CellEditing',
        'Ext.grid.filters.Filters',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.Fill',
        'Ext.ux.DateTimeField',
        'Ext.button.Button'
    ],

    controller: 'produccionestras',
    viewModel: {
        type: 'produccionestras'
    },
    height: 678,
    width: 1021,
    layout: 'fit',
    title: 'Producciones',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'gridpanel',
            id: 'gridProduccionesTras',
            allowDeselect: true,
            store: 'StoreProduccionesTras',
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 76,
                    dataIndex: 'claveproduccion',
                    text: 'No. Producción',
                    filter: {
                        type: 'number'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 122,
                    dataIndex: 'claveProducto',
                    text: 'Cve. Producto',
                    filter: {
                        type: 'list'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'concepto',
                    text: 'Descripción',
                    filter: {
                        type: 'list'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'nombreEmpleado',
                    text: 'Empleado',
                    filter: {
                        type: 'list'
                    }
                },
                {
                    xtype: 'numbercolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        console.log("-----" + value);
                        if(value){
                            return Ext.util.Format.currency(value);
                        }
                        return value;
                    },
                    dataIndex: 'importe',
                    text: 'Importe'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'unidad',
                    text: 'Unidad',
                    filter: {
                        type: 'list'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        rec = this.columns[colIndex].getEditor().getStore().findRecord("value", value);
                        console.log(rec);
                        if (rec) {
                            return rec.get("label");
                        } else {
                            return "";
                        }
                    },
                    dataIndex: 'estado',
                    text: 'Estado',
                    editor: {
                        xtype: 'combobox',
                        displayField: 'label',
                        store: 'StoreEstadosProducciones',
                        valueField: 'value'
                    },
                    filter: {
                        type: 'list',
                        idField: 'value',
                        labelField: 'label'
                    },
                    listeners: {
                        headertriggerclick: 'onGridcolumnHeadertriggerClick'
                    }
                },
                {
                    xtype: 'datecolumn',
                    dataIndex: 'fechaRegistro',
                    text: 'F. Registro',
                    format: 'j/n/Y h:i:s A',
                    filter: {
                        type: 'date'
                    }
                },
                {
                    xtype: 'datecolumn',
                    width: 108,
                    dataIndex: 'fechaTerminacion',
                    text: 'F. Terminación',
                    format: 'j/n/Y h:i:s A',
                    filter: {
                        type: 'date'
                    }
                },
                {
                    xtype: 'datecolumn',
                    width: 114,
                    dataIndex: 'fechaCancelacion',
                    text: 'F. Cancelado',
                    format: 'j/n/Y h:i:s A',
                    filter: {
                        type: 'date'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        rec = this.columns[colIndex].getEditor().getStore().findRecord("value", value);
                        console.log(rec);
                        if (rec) {
                            return rec.get("label");
                        } else {
                            return "";
                        }
                    },
                    width: 120,
                    dataIndex: 'cveUsrRegistro',
                    text: 'Usr. Registro',
                    editor: {
                        xtype: 'combobox',
                        displayField: 'label',
                        store: 'StoreUsuarios',
                        valueField: 'value'
                    },
                    filter: {
                        type: 'list'
                    },
                    listeners: {
                        headertriggerclick: 'onGridcolumnHeadertriggerClick1'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        rec = this.columns[colIndex].getEditor().getStore().findRecord("value", value);
                        console.log(rec);
                        if (rec) {
                            return rec.get("label");
                        } else {
                            return "";
                        }
                    },
                    width: 128,
                    dataIndex: 'cveUsrTerminacion',
                    text: 'Usr. Terminación',
                    editor: {
                        xtype: 'combobox',
                        displayField: 'label',
                        store: 'StoreUsuarios',
                        valueField: 'value'
                    },
                    filter: {
                        type: 'list'
                    },
                    listeners: {
                        headertriggerclick: 'onGridcolumnHeadertriggerClick2'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        rec = this.columns[colIndex].getEditor().getStore().findRecord("value", value);
                        console.log(rec);
                        if (rec) {
                            return rec.get("label");
                        } else {
                            return "";
                        }
                    },
                    width: 122,
                    dataIndex: 'cveUsrCancelacion',
                    text: 'Usr Cancelación',
                    editor: {
                        xtype: 'combobox',
                        displayField: 'label',
                        store: 'StoreUsuarios',
                        valueField: 'value'
                    },
                    filter: {
                        type: 'list'
                    },
                    listeners: {
                        headertriggerclick: 'onGridcolumnHeadertriggerClick3'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'descripcionEtapaActual',
                    text: 'Eta. Actual'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'descripcionEtapaSiguiente',
                    text: 'Eta. Siguiente'
                }
            ],
            listeners: {
                afterrender: {
                    fn: 'onGridProduccionesTrasAfterRender',
                    scope: 'controller'
                }
            },
            plugins: [
                {
                    ptype: 'cellediting',
                    listeners: {
                        edit: 'onCellEditingEdit',
                        beforeedit: 'onCellEditingBeforeEdit'
                    }
                },
                {
                    ptype: 'gridfilters'
                }
            ]
        }
    ],
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            items: [
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'datetimefield',
                    hidden: true,
                    fieldLabel: 'Label',
                    altFormats: 'm/d/Y H:i:s|c',
                    format: 'm/d/Y H:i'
                },
                {
                    xtype: 'button',
                    id: 'btnImprimeCostoManoObra',
                    icon: 'resources/print.png',
                    text: 'Costo Mano de Obra',
                    listeners: {
                        click: {
                            fn: 'onBtnImprimeCostoManoObraClick',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnNuevaProduccion',
                    icon: 'resources/playlist.png',
                    text: 'Nuevo',
                    listeners: {
                        click: {
                            fn: 'onBtnNuevaProduccionClick',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnTerminarProduccion',
                    icon: 'resources/Tick.png',
                    text: 'Terminar',
                    listeners: {
                        click: {
                            fn: 'onBtnTerminarProduccionClick',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnAvanzarProduccion',
                    icon: 'resources/transfer.png',
                    text: 'Avanzar',
                    listeners: {
                        click: {
                            fn: 'onBtnAvanzarProduccionClick',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnEliminarProduccion',
                    icon: 'resources/cancel-icon.png',
                    text: 'Eliminar',
                    listeners: {
                        click: {
                            fn: 'onBtnEliminarProduccionClick',
                            scope: 'controller'
                        }
                    }
                }
            ]
        }
    ],

    onGridcolumnHeadertriggerClick: function(ct, column, e, t, eOpts) {
        storeUsers = Ext.StoreManager.get("StoreEstadosProducciones");
        var options = [];
        storeUsers.each(function(rec){
            options.push({label:rec.data.label,value:"" + rec.data.value});
        });
        column.filter.store=storeUsers;
        column.filter.options=options;
        column.filter.labelField="label";
        column.filter.idField="value";
    },

    onGridcolumnHeadertriggerClick1: function(ct, column, e, t, eOpts) {
        storeUsers = Ext.StoreManager.get("StoreUsuarios");
        var options = [];
        storeUsers.each(function(rec){
            options.push(rec.data);
        });
        column.filter.store=storeUsers;
        column.filter.options=options;
        column.filter.labelField="label";
        column.filter.idField="value";
    },

    onGridcolumnHeadertriggerClick2: function(ct, column, e, t, eOpts) {
        storeUsers = Ext.StoreManager.get("StoreUsuarios");
        var options = [];
        storeUsers.each(function(rec){
            options.push(rec.data);
        });
        column.filter.store=storeUsers;
        column.filter.options=options;
        column.filter.labelField="label";
        column.filter.idField="value";
    },

    onGridcolumnHeadertriggerClick3: function(ct, column, e, t, eOpts) {
        storeUsers = Ext.StoreManager.get("StoreUsuarios");
        var options = [];
        storeUsers.each(function(rec){
            options.push(rec.data);
        });
        column.filter.store=storeUsers;
        column.filter.options=options;
        column.filter.labelField="label";
        column.filter.idField="value";
    },

    onCellEditingEdit: function(editor, context, eOpts) {
        return false;
    },

    onCellEditingBeforeEdit: function(editor, context, eOpts) {
        return false;
    }

});