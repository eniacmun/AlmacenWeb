/*
 * File: app/view/produccionesViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.produccionesViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.producciones',

    control: {
        "#cmbProductosProduccion": {
            beforerender: 'loadProducciones',
            beforequery: 'filtraProducciones',
            select: 'seleccionProducto'
        },
        "#txtCantidad": {
            keyup: 'capturaCantidad'
        },
        "button#btnAgregarProducto": {
            click: 'clickBtnAgregar'
        },
        "button#btnLimpiar": {
            click: 'btnLimpiarClick'
        },
        "button#btnGuardar": {
            click: 'btnGuardarClick'
        },
        "button#btnHistorial": {
            click: 'btnHistorialClick'
        }
    },

    loadProducciones: function(component, eOpts) {
        this.cargaProducciones(component, "");
    },

    filtraProducciones: function(queryPlan, eOpts) {
                queryPlan.query = new RegExp(queryPlan.query, 'i');
                queryPlan.forceAll = true;
    },

    seleccionProducto: function(combo, records, eOpts) {
        combo.record = records[0];
        Ext.ComponentManager.get("txtCantidad").focus();

    },

    capturaCantidad: function(textfield, e, eOpts) {
                if (e.getKey() == Ext.event.Event.ENTER){
                    this.agregaProductoProducir();
                }
    },

    clickBtnAgregar: function(button, e, eOpts) {
                        this.agregaProductoProducir();
    },

    btnLimpiarClick: function(button, e, eOpts) {
            this.limpiaProducciones();
    },

    btnGuardarClick: function(button, e, eOpts) {
        this.guardaProducciones();
    },

    btnHistorialClick: function(button, e, eOpts) {
                this.wndProducciones();
    },

    agregaProductoProducir: function() {
        var combo = Ext.ComponentMgr.get("cmbProductosProduccion");
        var fldCantidad = Ext.ComponentMgr.get("txtCantidad");
        var gridProducciones = Ext.ComponentMgr.get("panelProduccion");
        var storeProducciones = gridProducciones.getStore();
        console.log("agregamos el producto a producir"+combo.record);
        if (combo.isValid() && fldCantidad.isValid()){
            if (fldCantidad.getValue() == 0) return;
            combo.clearValue();

            var existentRecord = null;
            storeProducciones.each(function(record){
                console.log("comparando " + record.get("claveproducto") + " " + combo.record.get("claveproducto"));
                if (record.get("claveproducto") == combo.record.get("claveproducto")){
                    existentRecord = record;
                }
            });
            if (existentRecord != null){
                var currentCantidad = parseFloat(existentRecord.get("cantidad"));
                console.log("Cantidad Actual " + currentCantidad);
                console.log("Cantidad a Agregar " + fldCantidad.getValue());
                currentCantidad += fldCantidad.getValue();
                console.log("Resultado " + fldCantidad.getValue());
                existentRecord.beginEdit();
                existentRecord.set("cantidad", currentCantidad);
                existentRecord.endEdit();
                existentRecord.commit();
                if (existentRecord.get("cantidad") <= 0){

                    storeProducciones.remove([existentRecord]);
                }

            }else{
                if(fldCantidad.getValue()>0){
                     combo.record.set("cantidad", fldCantidad.getValue());
                     storeProducciones.loadData([combo.record], true);
                }
            }

            storeProducciones.sort("nombreproducto", "ASC");

            fldCantidad.setValue("");
            //console.log(combo.record);
            this.generaConsumoMateria();

            combo.focus();
        }
    },

    generaConsumoMateria: function() {
                var gridProducciones = Ext.ComponentMgr.get("panelProduccion");

                var storeProducciones = gridProducciones.getStore();

                var recsEnviar = [];
                var oRequest = {};
                storeProducciones.each(function(record){
                    var tmpProducto = {};
                        tmpProducto.cantidad = record.get("cantidad");
                        tmpProducto.claveproducto = record.get("claveproducto");
                        recsEnviar.push(tmpProducto);
                });

                oRequest.productos=recsEnviar;
                var request = new Object(); request.method="consultamateriasconsumidas"; request.params=[];
                request.params.push({"name":"imei","value":almacen.getApplication().SessionId},{"name":"productos", "value":Ext.encode(oRequest)});
                almacen.getApplication().loadData(request,function(response){
                    /*Ext.ComponentMgr.get("gridBusquedaCompras").getStore().loadData(response.compras);
                    Ext.ComponentMgr.get("gridBusquedaCompras").getPicker().loadMask.hide();*/
                    var gridConsumo = Ext.ComponentMgr.get("panelConsumo");
                    var storeConsumo = gridConsumo.getStore();
                    storeConsumo.loadData(response.productos,false);
                    storeConsumo.sort("nombreproducto", "ASC");
                });

    },

    guardaProducciones: function() {
             var gridProducciones = Ext.ComponentMgr.get("panelProduccion");

             var storeProducciones = gridProducciones.getStore();

             var recsEnviar = [];
             var oRequest = {};
             storeProducciones.each(function(record){
             var tmpProducto = {};
             tmpProducto.cantidad = record.get("cantidad");
             tmpProducto.claveproducto = record.get("claveproducto");
             recsEnviar.push(tmpProducto);
             });
             if (recsEnviar.length <= 0){
                 Ext.Msg.alert('Aviso','Por favor capture por lo menos un producto a producir');
                        return;

             }
             Ext.getCmp('btnGuardar').disable();
             oRequest.productos=recsEnviar;
             var currentController = this;
             var request = new Object(); request.method="guardarProducciones"; request.params=[];
             request.params.push({"name":"imei","value":almacen.getApplication().SessionId},{"name":"productos", "value":Ext.encode(oRequest)});
             almacen.getApplication().loadData(request,function(response){
                 currentController.limpiaProducciones();
                 Ext.getCmp('btnGuardar').enable();

                 console.log(response);

                 if(response.filepath){
                     if(response.filepath.length == 1){
                         var curentFilepath = response.filepath[0];
                         console.log("Archivo a descargar: " + curentFilepath);
                         if(curentFilepath !== ""){
                             Ext.Msg.alert("Mensaje","Impresión correcta, se descargará su archivo.");
                             almacen.getApplication().downloadPedido(curentFilepath, 0); // 0 PDF 1 Excel 2 Ambos
                         }else{
                             Ext.Msg.alert("Mensaje","No se pudo generar su archivo. Reintente");
                         }
                     }/*else{
                         Ext.Msg.alert("Mensaje","No se pudo generar su archivo.");
                     }*/
                 }


               }, function(){
                   // se habilita en caso de un fallo mayor
                   Ext.getCmp('btnGuardar').enable();
               });

    },

    limpiaProducciones: function() {
             var gridProducciones = Ext.ComponentMgr.get("panelProduccion");
             var storeProducciones = gridProducciones.getStore();
             var gridConsumo = Ext.ComponentMgr.get("panelConsumo");
             var storeConsumo = gridConsumo.getStore();
                 storeProducciones.removeAll();
                 storeConsumo.removeAll();
             var combo = Ext.ComponentMgr.get("cmbProductosProduccion");
             var fldCantidad = Ext.ComponentMgr.get("txtCantidad");
             fldCantidad.setValue("");
             combo.clearValue();
    },

    wndProducciones: function() {
        //Ext.ComponentMgr.get("toolbar").collapse(Ext.Component.DIRECTION_TOP, true);
        this.limpiaProducciones();
        var wnd = Ext.create("almacen.view.dlgHistorico");
        wnd.center();
        wnd.show();
    },

    cargaProducciones: function(combo, claveClasificacion) {
        var request = new Object(); request.method="consultaproductosproducir"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId});
        request.params.push({"name":"claveClasificacion","value":claveClasificacion});
        almacen.getApplication().loadData(request,function(response){
            /*Ext.ComponentMgr.get("gridBusquedaCompras").getStore().loadData(response.compras);
            Ext.ComponentMgr.get("gridBusquedaCompras").getPicker().loadMask.hide();*/
            combo.getStore().loadData(response.productos,false);
            combo.getStore().sort("nombreproducto", "ASC");
        });

        this.limpiaProducciones();
    }

});
