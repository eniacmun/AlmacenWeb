/*
 * File: app/view/tbAjustesViewController3.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('almacen.view.tbAjustesViewController3', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tbtransferencia',

    control: {
        "button#btnAjustes3": {
            afterrender: 'InitializeEnvironment',
            click: 'Ajustar'
        }
    },

    InitializeEnvironment: function(component, eOpts) {
        window.tipoInvenario = 4;
        Ext.ComponentMgr.get("gridConsultaClasificaciones").columns[4].setText("Cantidad a transferir");;
        window.InventariosBeforeEdit = this.BeforeEdit;
        window.InventariosAfterEdit = this.AfterEdit;
        window.AjustesRealizados = {};
    },

    Ajustar: function(button, e, eOpts) {
        if(window.claveAlmacen == window.claveAlmacenDestino){
            Ext.Msg.alert("", "Seleccione un almacén distinto.");
            return;
        }
        var option = this.validarAjustes();
        if (option){
            this.realizaAjustes();
        }
    },

    BeforeEdit: function(editor, context, eOpts) {
        console.log(record);
        var record = context.record;
        if(record.get("editable")){
            return true;
        } else{
            return false;
        }
    },

    AfterEdit: function(editor, context, Opts) {
        var Existencia = context.value;
        var ClaveProducto = context.record.get("Clave");
        var Concepto = context.record.get("Concepto");
        var Unidad = context.record.get("Unidad");
        var InventarioDiario = context.record.get("InventarioDiario");
        var Clasificacion = context.record.get("Clasificacion");
        var CantExistencia = parseFloat(Existencia);
        var currentExistencia =context.record.get("CurrentExistencia");
        var maximoPermitido =context.record.get("maximoPermitido");
        if (CantExistencia > 0){
            //se guarda en el objeto de AjustesRealizados
            if (context.value != context.originalValue){ //es diferente de la existencia
                window.AjustesRealizados[ClaveProducto] = {"Clave":ClaveProducto,"Existencia":Existencia,
                                                           "Concepto":Concepto,"Unidad":Unidad,
                                                           "InventarioDiario":InventarioDiario,
                                                           "Clasificacion":Clasificacion, "CurrentExistencia":currentExistencia,
                                                           "maximoPermitido":maximoPermitido};
            }
            editor.completeEdit();
            editor.startEditByPosition({
                row: context.rowIdx+1,
                column: context.colIdx
            });
        }else{
            if(CantExistencia < 0 ){
                context.record.beginEdit();
                context.record.set("Existencia", context.originalValue);
                context.record.commit();
                editor.cancelEdit();
            } else {
                context.record.beginEdit();
                context.record.set("Existencia", "");
                context.record.commit();
                editor.cancelEdit();
                delete window.AjustesRealizados[ClaveProducto];
            }
            return false;
        }
    },

    validarAjustes: function() {
        var retVal = true;
        var ajustesExcedidos = [];
        for(var claveprod in window.AjustesRealizados){
            var prod = window.AjustesRealizados[claveprod];
            var cantidad = parseFloat(prod.Existencia);
            var existencia = parseFloat(Ext.util.Base64.decode(prod.CurrentExistencia));
            var cantidadMaximaPermitida = prod.maximoPermitido;

            if (existencia <= cantidadMaximaPermitida){ //la existencia actual es menor a la permitida se tiene que aplicar la validacion
                if (cantidad > cantidadMaximaPermitida){
                    //se debe mostrar la ventana de contraseña del supervisor
                    prod.cantidadMaximaValidacion = cantidadMaximaPermitida;
                    ajustesExcedidos.push(prod);
                }
            }else if (existencia > cantidadMaximaPermitida){
                if (cantidad > existencia){
                    prod.cantidadMaximaValidacion = existencia;
                    ajustesExcedidos.push(prod);
                }
            }

        }

        if (ajustesExcedidos.length > 0){

            //return true
            var wnd = Ext.create("almacen.view.DlgExistenciaAlerta", {id:"wndPreciosAlerta"});
            wnd.parentController=this;
            wnd.center();
            wnd.show();
            Ext.ComponentMgr.get("gridProductosPrecios1").getStore().loadData(ajustesExcedidos);
            return false;
        }else {
            return true;
        }
    },

    registrarAjustes: function(noImpresiones, motivoAjuste) {
        var ajustesx = [];

        for (var claveprod in window.AjustesRealizados){
            prod = window.AjustesRealizados[claveprod];
            prod.CurrentExistencia = escape(prod.CurrentExistencia);
            ajustesx.push(window.AjustesRealizados[claveprod]);
        }

        var objAjustes = {
            tipoAjuste:motivoAjuste,
            noImpresiones:noImpresiones,
            ajustes:ajustesx
        };
        var decoded = Ext.encode(objAjustes);


        var request = {}; request.method="registratransferencia"; request.params=[];
        request.params.push({"name":"imei","value":almacen.getApplication().SessionId},{"name":"AJUSTE","value":decoded});
        request.params.push({"name":"claveAlmacen","value":window.claveAlmacen});
        request.params.push({"name":"claveAlmacenDestino","value":window.claveAlmacenDestino});
        almacen.getApplication().loadData(request,function(response){
            if(response.filepath){
                if(response.filepath.length == 2){
                    var curentFilepath = response.filepath[0];
                    var curentFilepath2 = response.filepath[1];
                    console.log("Archivo a descargar: " + curentFilepath);
                    if(curentFilepath !== "" && curentFilepath2 !== ""){
                        Ext.Msg.alert("Mensaje","Impresión correcta, se descargará su archivo.");
                        almacen.getApplication().downloadPedido(curentFilepath, 0); // 0 PDF 1 Excel 2 Ambos
                        setTimeout(function (){
                            almacen.getApplication().downloadPedido(curentFilepath2, 0); // 0 PDF 1 Excel 2 Ambos
                        }, 1000);
                    }else{
                        Ext.Msg.alert("Mensaje","No se pudo generar su archivo. Reintente");
                    }
                }
            }
            //se acualiza toda la interfaz
            Ext.ComponentManager.get("currentView").mycontroller.loadExistencias(null,null,null);
            window.AjustesRealizados={};

        });

    },

    preguntarNoImpresiones: function(motivoAjuste) {

        if(almacen.getApplication().currentSession.habilitaNoImprimirAjustes){
            this.registrarAjustes(0, motivoAjuste);
        } else {
            var wnd = Ext.create("almacen.view.DlgNoImpresionesAjustes", {id:"wndPreguntaImpresiones"});
            wnd.parentController=this;
            wnd.currentMotivoAjuste=motivoAjuste;
            wnd.center();
            wnd.show();

        }

    },

    preguntarMotivos: function(tipoMotivo) {
        var wnd = Ext.create("almacen.view.DlgMotivosAjustes", {id:"wndPreguntaMotivos"});
        wnd.parentController=this;
        wnd.currentMotivoAjuste=tipoMotivo;
        wnd.center();
        wnd.show();
    },

    realizaAjustes: function() {
        this.preguntarMotivos("TRANSFERENCIA");
    }

});
