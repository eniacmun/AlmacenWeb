{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "dlgpedidos",
        "designer|userClassName": "DlgPedidosViewController"
    },
    "designerId": "9e9ef74d-e7d9-4f78-80ee-3dc9a2a69c52",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#cmbProveedorCedis",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "cargaProveedorCedis",
                "implHandler": [
                    "",
                    "console.log(\"se cargan los cedis\");",
                    "var el = component.getEl();",
                    "el.mask(\"cargando\");",
                    "",
                    "Ext.ComponentMgr.get(\"enableProveedor\").setDisabled(true);",
                    "",
                    "var request = new Object(); request.method=\"consultacedis\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    console.log(\"response\");console.log(response);",
                    "    component.getStore().loadData(response.proveedores);",
                    "    component.getStore().sort('nombreProveedor','ASC');",
                    "    if (almacen.getApplication().currentSession.esCedi){",
                    "        component.setDisabled(true);",
                    "        component.setValue(almacen.getApplication().currentSession.claveSucursal);",
                    "    }",
                    "    Ext.ComponentMgr.get(\"enableProveedor\").setDisabled(false);",
                    "    el.unmask();",
                    "});"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "cargaProveedorCedis",
            "designerId": "e512b2c1-f6b1-42c2-b88e-f7a8864d3ac9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#cmbSucursal",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "cargaSucursalesPedido",
                "implHandler": [
                    "console.log(\"se cargan los sucursales: \" + almacen.getApplication().currentSession.esCedi);",
                    "if (!almacen.getApplication().currentSession.esCedi){",
                    "    component.setVisible(false);",
                    "    return;",
                    "",
                    "};",
                    "var request = new Object(); request.method=\"sucursales\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    component.getStore().loadData(response.proveedores);",
                    "    component.getStore().sort('nombreProveedor','ASC');",
                    "",
                    "});"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "cargaSucursalesPedido",
            "designerId": "74381bab-cded-4a26-b14c-ba04992b4116"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#cmbProveedorCedis",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "filtraComboCedis",
                "implHandler": [
                    "queryPlan.query = new RegExp(queryPlan.query, 'i');",
                    "queryPlan.forceAll = true;"
                ],
                "name": "beforequery",
                "scope": "me"
            },
            "name": "filtraComboCedis",
            "designerId": "8b307234-359f-4c4b-bfd0-b8b69e2c26a5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnConsultarPedidos",
                "designer|targetType": "Ext.button.Button",
                "fn": "ConsultaProductosSugeridos",
                "implHandler": [
                    "if (!Ext.ComponentMgr.get(\"cmbProveedorCedis\").isValid() ){",
                    "    Ext.Msg.alert('', 'Por favor especifique un proveedor antes de realizar la busqueda.');",
                    "    return;",
                    "}",
                    "",
                    "// SE ocultan columnas",
                    "this.ocultarColumnas();",
                    "",
                    "var controller = this;",
                    "",
                    "if(typeof window.winOption != 'undefined'){",
                    "    window.winOption.close();",
                    "}",
                    "window.winOption =  Ext.create('Ext.window.Window', {",
                    "    title: 'Seleccione el método de consulta',",
                    "    height: 150,",
                    "    width: 500,",
                    "    layout: 'fit',",
                    "    modal:true,",
                    "    bodyPadding: 20,",
                    "    border: 2,",
                    "    buttons: [",
                    "        {",
                    "            text: 'CONFIRMAR',",
                    "            scale: 'medium',",
                    "            cls: 'btn-delete-yes',",
                    "            listeners: {",
                    "                click: function() {",
                    "",
                    "                    var radio1 = Ext.getCmp('ss'),",
                    "",
                    "                        radio2 = Ext.getCmp('ss1'),",
                    "                        radio3 = Ext.getCmp('ss2');",
                    "                    radio4 = Ext.getCmp('ss3');",
                    "",
                    "                    //if L is selected, change to M",
                    "                    if (radio1.getValue()) {",
                    "                        controller.consultaProductos(button, e, eOpts, 1);",
                    "                        window.winOption.close();",
                    "                        return;",
                    "                    }",
                    "",
                    "                    //if XL is selected, change to L",
                    "                    if (radio2.getValue()) {",
                    "                        controller.consultaProductos(button, e, eOpts, 2);",
                    "                        window.winOption.close();",
                    "                        return;",
                    "                    }",
                    "",
                    "                    //if XL is selected, change to L",
                    "                    if (radio3.getValue()) {",
                    "                        controller.consultaProductos(button, e, eOpts, 3);",
                    "                        window.winOption.close();",
                    "                        return;",
                    "                    }",
                    "",
                    "                    //if XL is selected, change to L",
                    "                    if (radio4.getValue()) {",
                    "                        controller.consultaProductos(button, e, eOpts, 4);",
                    "                        window.winOption.close();",
                    "                        return;",
                    "                    }",
                    "",
                    "                }",
                    "            }",
                    "        }, '->',",
                    "        {",
                    "            text: 'CANCELAR',",
                    "            scale: 'medium',",
                    "            cls: 'btn-delete-no',",
                    "            listeners: {",
                    "                click: function() {",
                    "                    window.winOption.close();",
                    "                }",
                    "            }",
                    "        }",
                    "    ],",
                    "    items: [",
                    "        {",
                    "            xtype      : 'fieldcontainer',",
                    "            fieldLabel : '',",
                    "            defaultType: 'radiofield',",
                    "            defaults: {",
                    "                flex: 1",
                    "            },",
                    "            layout: 'hbox',",
                    "            items: [",
                    "                {",
                    "                    boxLabel  : 'Venta<br>Esperada',",
                    "                    checked: true,",
                    "                    name      : 'size',",
                    "                    inputValue: '1',",
                    "                    id        : 'ss'",
                    "                }, {",
                    "                    boxLabel  : 'Máximo',",
                    "                    name      : 'size',",
                    "                    inputValue: '2',",
                    "                    id        : 'ss1'",
                    "                }, {",
                    "                    boxLabel  : 'Mínimo',",
                    "                    name      : 'size',",
                    "                    inputValue: '3',",
                    "                    id        : 'ss2'",
                    "                }, {",
                    "                    boxLabel  : 'Proyección',",
                    "                    name      : 'size',",
                    "                    inputValue: '4',",
                    "                    id        : 'ss3'",
                    "                }",
                    "            ]",
                    "        }",
                    "    ]",
                    "});",
                    "",
                    "if(typeof window.currentSelectedProveedor === 'undefined' || window.currentSelectedProveedor.data.esCedi){",
                    "    controller.consultaProductos(button, e, eOpts, 2);",
                    "}else{",
                    "    window.winOption.show();",
                    "}",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "ConsultaProductosSugeridos",
            "designerId": "812c50ed-797a-46c8-9c14-2b1ed1d86b9a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnWndPedidosCerrar",
                "designer|targetType": "Ext.button.Button",
                "fn": "cerrarVentana",
                "implHandler": [
                    " var wnd =Ext.WindowMgr.get(\"wndRegistroPedidos\"); ",
                    " wnd.close();",
                    " "
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "cerrarVentana",
            "designerId": "36861985-e5e5-4fd2-8a5f-008edad96079"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnWndConsultarPedidos1",
                "designer|targetType": "Ext.button.Button",
                "fn": "ConsultarPedidos",
                "implHandler": [
                    "var wnd=Ext.create(\"almacen.view.DlgConsultaTraspasos2\", {id:\"wndConsultaPedidos2\"});",
                    "wnd.parentController=this;",
                    "wnd.center();",
                    "wnd.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "ConsultarPedidos",
            "designerId": "474c113a-4941-418a-9039-43c1835d5e1f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnSavePedido",
                "designer|targetType": "Ext.button.Button",
                "fn": "GuardaPedido",
                "implHandler": [
                    "if (window.currentPedido){",
                    "",
                    "    var grid=Ext.ComponentMgr.get(\"gridCedis\");",
                    "    var productos = [];",
                    "    var Total = 0;",
                    "",
                    "    /*****MOSTRAR MENSAJE SI NO SE CALCULÓ CORRECTAMENTE EL IMPORTE DE ALGÚN PRODUCTO*****/",
                    "    var productosImporteNull = [];//Agregaremos los productos que no se calculen correctamente su IMPORTE",
                    "    var productoImporteNull;//Objeto que representará el producto con IMPORTE erroneo",
                    "    var msjNoImporte = \"\";//Mensaje que se mostrará al usuario",
                    "    var importeValidar;",
                    "    grid.getStore().each(function (rec) {",
                    "        if (rec.get(\"CantidadSucursal\") > 0 && rec.get(\"Agregar\")) {",
                    "            importeValidar = rec.get(\"Importe\");",
                    "            //Validamos si el IMPORTE no es númerico lo agregamos a la lista de productos con IMPORTE mal calculado",
                    "            if(typeof importeValidar !== 'number'){",
                    "                productosImporteNull.push(rec.data);//Agregamos los productos que no se calcularon correctamente su IMPORTE",
                    "            }",
                    "        }",
                    "    });",
                    "",
                    "    //Verificamos si hay algún producto con IMPORTE mal calculado",
                    "    if(productosImporteNull.length > 0){",
                    "        msjNoImporte += \"<table><tr><td>CLAVE </td><td>PRODUCTO </td><tr>\";",
                    "        //recorremos los productos con IMPORTE erroneo para obtener los datos y mostrarlos al usuario",
                    "        for (i = 0; i < productosImporteNull.length; i++) {",
                    "            productoImporteNull = productosImporteNull[i];",
                    "            msjNoImporte += \"<hr /><tr><td> \" + productoImporteNull.claveproducto + \"</td><td> \" + productoImporteNull.NombreProducto + \"</td></tr>\";",
                    "        }",
                    "        msjNoImporte += \"</table>\";",
                    "        Ext.Msg.alert('', 'No se pudo calcular el IMPORTE de los siguientes productos, verificar que \"Proporción\" sea mayor a cero. Comuníquese con el área de implementaciones para poder actualizar la información de los productos.\\n\\n' + msjNoImporte);",
                    "        return;//Detenemos el flujo del evento GuardaPedido",
                    "    }",
                    "    /*************************************************************************************/",
                    "",
                    "    grid.getStore().each(function(rec){",
                    "        if (rec.get(\"CantidadSucursal\") > 0 && rec.get(\"Agregar\")){",
                    "            var prod = rec.data;",
                    "            //Verificamos si el IMPORTE no es numérico agregamos 0 para cada producto en el pedido",
                    "            if(typeof prod.Importe !== 'number'){",
                    "                prod.Importe = 0;",
                    "            }",
                    "            productos.push(prod);",
                    "            Total += prod.Importe;",
                    "        }",
                    "    });",
                    "",
                    "    /*",
                    "        Eliminar despues de pruebas generar productos duplicados",
                    "    */",
                    "    /*",
                    "    grid.getStore().each(function(rec){",
                    "        if (rec.get(\"CantidadSucursal\") > 0 && rec.get(\"Agregar\")){",
                    "            if (rec.get(\"claveproducto\") == '113'){",
                    "                rec.data.cantidad=7;",
                    "                productos.push(rec.data);",
                    "                Total+=rec.get(\"Importe\");",
                    "            }else{",
                    "                productos.push(rec.data);",
                    "                Total+=rec.get(\"Importe\");",
                    "            }",
                    "        }",
                    "    });*/",
                    "    /*",
                    "       FIN Eliminar despues de pruebas generar productos duplicados",
                    "    */",
                    "",
                    "    var request = new Object(); request.method=\"guardarpedidos\"; request.params=[];",
                    "    if (almacen.getApplication().currentSession.esCedi) {",
                    "        if (!Ext.ComponentMgr.get(\"cmbSucursal\").isValid()){",
                    "            Ext.Msg.alert('', 'Por favor especifique una sucursal antes de realizar la busqueda.');",
                    "            return;",
                    "        }",
                    "        request.params.push({\"name\":\"filtroSucursal\",\"value\":Ext.ComponentMgr.get(\"cmbSucursal\").getValue()});",
                    "    }",
                    "",
                    "    window.currentPedido.Total=Total;",
                    "    window.currentPedido.productos = productos;",
                    "    var currentController=this;",
                    "",
                    "",
                    "    var existeProducto = {};",
                    "    var productosDuplicados=[];",
                    "    var iflag=0;",
                    "    for (i = 0; i < window.currentPedido.productos.length; i++){",
                    "        currentProducto=window.currentPedido.productos[i];",
                    "        // if (existeProducto[currentProducto.claveproducto]){",
                    "        //   productosDuplicados.push(existeProducto[currentProducto.claveproducto]);",
                    "        productosDuplicados.push(currentProducto);",
                    "        iflag++;",
                    "        //}",
                    "        //existeProducto[currentProducto.claveproducto]=currentProducto;",
                    "    }",
                    "    var cantidadesproducto={};",
                    "    if (iflag > 0){",
                    "        for (i=0; i < productosDuplicados.length; i++){",
                    "            currentProducto=productosDuplicados[i];",
                    "            currentProducto.CantidadSucursal = Number.parseFloat(currentProducto.CantidadSucursal).toFixed(5);// manejar 5 decimales",
                    "            var cant = 0;",
                    "            if (cantidadesproducto[currentProducto.claveproducto]){",
                    "                cant = cantidadesproducto[currentProducto.claveproducto].cantidad;",
                    "            }else{",
                    "                cantidadesproducto[currentProducto.claveproducto] = {cantidad:currentProducto.CantidadSucursal,nombre:currentProducto.NombreProducto,clave:currentProducto.claveproducto};",
                    "                cant = currentProducto.CantidadSucursal;",
                    "",
                    "            }",
                    "            if ((cant != currentProducto.CantidadSucursal)){",
                    "                cantidadesproducto[currentProducto.claveproducto].cantidad += cant;",
                    "            }",
                    "        }",
                    "        var imessage = \"\";",
                    "        var prodOrdenados = {};",
                    "        var aProdOrdenados= [];",
                    "        for (var c in cantidadesproducto){",
                    "            currentProducto=cantidadesproducto[c];",
                    "            prodOrdenados[currentProducto.nombre] = currentProducto;",
                    "            aProdOrdenados.push(currentProducto.nombre);",
                    "        }",
                    "        aProdOrdenados.sort();/*",
                    "        for (i=0; i < aProdOrdenados.length; i++)",
                    "        {",
                    "            currentProducto=prodOrdenados[aProdOrdenados[i]];",
                    "            imessage+=\"<li> \" + currentProducto.clave +  \" \" + currentProducto.nombre + \" Cant. \" + currentProducto.cantidad + \" </li>\";",
                    "",
                    "        }*/",
                    "        imessage += \"<table><tr><td>CLAVE </td><td>PRODUCTO </td><td>CANTIDAD </td><tr>\";",
                    "        for (i = 0; i < aProdOrdenados.length; i++) {",
                    "            currentProducto = prodOrdenados[aProdOrdenados[i]];",
                    "            imessage += \"<tr><td> \" + currentProducto.clave + \"</td><td> \" + currentProducto.nombre + \"</td> <td  style='text-align:right'>\" + currentProducto.cantidad + \" </td></tr>\";",
                    "        }",
                    "        imessage += \"</table>\";",
                    "        Ext.Msg.show({",
                    "            title: 'Pedidos',",
                    "            message: \"¿Las siguientes cantidades para los productos son correctos?:<ul>\" + imessage+\"</ul>\",",
                    "            width: 600,",
                    "            cls:'productos-cls',",
                    "            buttons: Ext.Msg.OKCANCEL,",
                    "            fn: function(buttonId){",
                    "                if (buttonId==\"ok\"){",
                    "                    if(typeof window.currentSelectedProveedor !== 'undefined'){ // Se esta en Sucursal",
                    "                        if (!window.currentSelectedProveedor.data.esCedi){ // Pedido a Proveedor",
                    "                            // Se genera la ventana que lee que correos",
                    "                            var wnd=Ext.create(\"almacen.view.DlgCorreo\", {id:\"wndCorreo\",currentRecord:\"response\"});",
                    "                            wnd.parentController=currentController;",
                    "                            wnd.currentRecord=\"response\";",
                    "                            wnd.center();",
                    "                            wnd.show();",
                    "                        }",
                    "                        else{ // Pedido a Cedis",
                    "                            //return record.get(\"esInventariado\") ? \"\" : \"no-inventory\";",
                    "                            currentController.guardaPedido(currentController);",
                    "                        }",
                    "                    }",
                    "                    else{ // Se esta en CEDIS",
                    "                        currentController.guardaPedido(currentController);",
                    "                    }",
                    "                }",
                    "            },",
                    "            animateTarget: 'btnSavePedido',",
                    "            icon: Ext.window.MessageBox.INFO",
                    "        });",
                    "        return;",
                    "",
                    "    }",
                    "",
                    "    // almacen.getApplication().showLoader({'peso':'1','mensaje':'Guardando pedidos, espere por favor...'});",
                    "",
                    "    /*request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "    request.params.push({\"name\":\"Pedido\",\"value\":Ext.encode(window.currentPedido)});",
                    "    var fechaRecibe = \"\";",
                    "    var dt = Ext.ComponentMgr.get(\"dtRecepcionCedis\");",
                    "",
                    "    if (dt.isValid()){",
                    "        fechaRecibe = dt.getRawValue();",
                    "        request.params.push({\"name\":\"fecharecep\",\"value\":fechaRecibe});",
                    "    }",
                    "",
                    "    almacen.getApplication().loadData(request,function(response){",
                    "        currentController.Limpiar();",
                    "        window.currentPedido = null;",
                    "",
                    "    });*/",
                    "",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "GuardaPedido",
            "designerId": "d160ab40-4aef-44ed-bae8-8a7edde2a46f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "Limpiar",
                "implHandler": [
                    "Ext.ComponentMgr.get(\"gridCedis\").getStore().removeAll();",
                    "if (!almacen.getApplication().currentSession.esCedi){",
                    "    Ext.ComponentMgr.get(\"cmbProveedorCedis\").clearValue();",
                    "}else{",
                    "    // solo se limpia si existe el campo y no se tiene habilitado el check de proveedor externos",
                    "    // o si no esta definido el campo, es decir, que se esta como sucursal, por el anterior condicional si o si debe de exister, pero se deja por cualquier problema.",
                    "    enableProveedor = Ext.ComponentMgr.get(\"enableProveedor\");",
                    "    if(enableProveedor){",
                    "        console.log(\"existe el campo\");",
                    "        if(!enableProveedor.getValue()){",
                    "            Ext.ComponentMgr.get(\"cmbSucursal\").clearValue();",
                    "        }",
                    "    }else{",
                    "        Ext.ComponentMgr.get(\"cmbSucursal\").clearValue();",
                    "    }",
                    "",
                    "}",
                    ""
                ]
            },
            "name": "Limpiar",
            "designerId": "3473f831-280d-474c-8309-03c6a7a292a9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#cmbDiasTendencia",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "consultaDiasTendencia",
                "implHandler": [
                    "var request = new Object(); request.method=\"diastendencia\"; request.params=[];",
                    "        request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "        almacen.getApplication().loadData(request,function(response){",
                    "            component.getStore().loadData(response.items);",
                    "            component.getStore().sort('nombreProveedor','ASC');",
                    "        });"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "consultaDiasTendencia",
            "designerId": "7b4d2cd3-d51b-4dfa-a792-783d68cb7d59"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#cmbDiasConsumo",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "consultaDiasConsumo",
                "implHandler": [
                    "var request = new Object(); request.method=\"diasconsumo\"; request.params=[];",
                    "        request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "        almacen.getApplication().loadData(request,function(response){",
                    "            component.getStore().loadData(response.items);",
                    "            component.getStore().sort('nombreProveedor','ASC');",
                    "        });"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "consultaDiasConsumo",
            "designerId": "158a4191-c8cc-4857-bbac-56ae5bb379e7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#gridCedis",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "inicializaGrid",
                "implHandler": [
                    "console.log(\"Este es el grid\");",
                    "console.log(component);",
                    "var dt = Ext.Date.add(new Date(), Ext.Date.DAY, -6);",
                    "var objdias = [];",
                    "objdias['Monday']='Lunes';",
                    "objdias['Tuesday']='Martes';",
                    "objdias['Thursday']='Jueves';",
                    "objdias['Wednesday']='Miercoles';",
                    "objdias['Friday']='Viernes';",
                    "objdias['Saturday']='Sabado';",
                    "objdias['Sunday']='Domnigo';",
                    "var dia = Ext.Date.format(dt,\"l\");",
                    "var texto=objdias[dia] + \" \" + Ext.Date.format(dt,\"d/m/Y\");",
                    "console.log(\"Texto \" + texto);",
                    "component.columns[almacen.getApplication().columnaSemana].setText(texto);",
                    "",
                    "component.updateLayout();"
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "name": "inicializaGrid",
            "designerId": "264fc7d6-a8b9-4d88-8eaf-dfba5cbe654f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "e",
                    "eOpts",
                    "option"
                ],
                "fn": "consultaProductos",
                "implHandler": [
                    "Ext.ComponentMgr.get(\"gridCedis\").getStore().clearFilter();",
                    "var store= Ext.ComponentMgr.get(\"gridCedis\").getStore();",
                    "store.remove(store.getRange());",
                    "Ext.ComponentMgr.get(\"checkuncheckAll\").setValue(false);",
                    "",
                    "",
                    "",
                    "var request = new Object(); request.method=\"consultaproductossugeridos\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "if (almacen.getApplication().currentSession.esCedi) {",
                    "    if (!Ext.ComponentMgr.get(\"cmbSucursal\").isValid()){",
                    "        Ext.Msg.alert('', 'Por favor especifique una sucursal antes de realizar la busqueda.');",
                    "        return;",
                    "    }",
                    "    request.params.push({\"name\":\"filtroSucursal\",\"value\":Ext.ComponentMgr.get(\"cmbSucursal\").getValue()});",
                    "}",
                    "request.params.push({\"name\":\"filtroCedis\",\"value\":Ext.ComponentMgr.get(\"cmbProveedorCedis\").getValue()});",
                    "var filtroDias = Ext.ComponentMgr.get(\"cmbDiasTendencia\").isValid()  ? Ext.ComponentMgr.get(\"cmbDiasTendencia\").getValue() : \"7\";",
                    "var filtroDiasP = Ext.ComponentMgr.get(\"cmbDiasConsumo\").isValid()  ? Ext.ComponentMgr.get(\"cmbDiasConsumo\").getValue() : \"7\";",
                    "request.params.push({\"name\":\"diasconsumo\",\"value\":filtroDias});",
                    "request.params.push({\"name\":\"diastendencia\",\"value\":filtroDiasP});",
                    "",
                    "",
                    "if(typeof window.currentSelectedProveedor !== 'undefined'){",
                    "    console.log(\"asdasdasd\");",
                    "    console.log(window.currentSelectedProveedor);",
                    "    request.params.push({\"name\":\"esCedi\",\"value\":window.currentSelectedProveedor.data.esCedi});",
                    "    request.params.push({\"name\":\"option\",\"value\":option}); // 1 venta generada 2 maximo 3 minimo",
                    "}",
                    "",
                    "",
                    "",
                    "var component=Ext.ComponentMgr.get(\"gridCedis\");",
                    "window.currentPedido=null;",
                    "var comboSugerido = Ext.ComponentMgr.get(\"cmbCantidadSugerida\");",
                    "",
                    "console.log(\"comboSugerido\");",
                    "console.log(comboSugerido.getValue());",
                    "",
                    "var comboFiltro = Ext.ComponentMgr.get(\"cmbClasificacion\");",
                    "var comboTipo = Ext.ComponentMgr.get(\"checkDiario\");",
                    "",
                    "//comboFiltro.getStore().removeAll();",
                    "",
                    "var myMask = new Ext.LoadMask({",
                    "    msg    : 'Consultando productos, espere por favor...',",
                    "    target : component",
                    "});",
                    "",
                    "myMask.show();",
                    "",
                    "var controller = this;",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    console.log(response);",
                    "    // this.ocultarColumnas();",
                    "",
                    "    var items={};",
                    "    var items1={};",
                    "    for (i=0; i < response.productos.length; i++){",
                    "        var cantidadAplicar = 0;",
                    "",
                    "        if (comboSugerido.getValue() == \"Sugerido\") cantidadAplicar = response.productos[i].Sugerido;",
                    "        if (comboSugerido.getValue() == \"Promedio\") cantidadAplicar = response.productos[i].ConsumoPromedio;",
                    "        if (comboSugerido.getValue() == \"Semana\") cantidadAplicar = response.productos[i].ConsumoSemanaPasada;",
                    "",
                    "        response.productos[i].CantidadSucursal = cantidadAplicar < 0 ? 0:cantidadAplicar;",
                    "        response.productos[i].Importe = response.productos[i].CantidadSucursal * response.productos[i].Costo;",
                    "",
                    "",
                    "        // para proveedores externos",
                    "        if(typeof window.currentSelectedProveedor !== 'undefined' && !window.currentSelectedProveedor.data.esCedi){",
                    "            response.productos[i].Agregar = response.productos[i].CantidadSucursal > 0 ? true: false;",
                    "            var Iva = response.productos[i].Impuesto;",
                    "            var Descuento = response.productos[i].Descuento;",
                    "            var PrecioU = response.productos[i].Costo;",
                    "            var Cantidad = (Math.round((response.productos[i].CantidadSucursal / response.productos[i].Proporcion) * 100)/100);",
                    "            var tasa = response.productos[i].tasa;",
                    "            response.productos[i].Importe = controller.calculaImportesTotales(Iva, Descuento, PrecioU, Cantidad, tasa);",
                    "            response.productos[i].CantidadMinima = response.productos[i].CantidadSucursal;",
                    "            response.productos[i].CantidadSucursal =  Cantidad;//response.productos[i].CantidadSucursal / response.productos[i].Proporcion;",
                    "        }",
                    "",
                    "        items[response.productos[i].clasificacionSucursal]=response.productos[i].clasificacionSucursal;",
                    "        items1[response.productos[i].clasificacionCedi]=response.productos[i].clasificacionCedi;",
                    "        //items.push({label:response.productos[i].clasificacionSucursal,value:response.productos[i].clasificacionSucursal});",
                    "",
                    "",
                    "    }",
                    "    var oItems =[];",
                    "    oItems.push({label:\"TODOS\",value:\"-1\"});",
                    "    for (var i in items){",
                    "        oItems.push({label:i,value:i});",
                    "    }",
                    "    comboFiltro.getStore().loadData(oItems);",
                    "    comboFiltro.selectedIndex = -1;",
                    "    comboFiltro.getValue(\"TODOS\");",
                    "",
                    "    comboFiltro.desactivarFiltroClasificaciones();",
                    "",
                    "",
                    "    var oItems =[];",
                    "    oItems.push({label:\"TODOS\",value:\"-1\"});",
                    "    for (var i in items1){",
                    "        oItems.push({label:items1[i],value:items1[i]});",
                    "    }",
                    "    var comboFiltro1 = Ext.ComponentMgr.get(\"cmbClasificacionPadre\");",
                    "    comboFiltro1.getStore().loadData(oItems);",
                    "    comboFiltro1.selectedIndex = -1;",
                    "    comboFiltro1.getValue(\"TODOS\");",
                    "",
                    "",
                    "    //comboTipo.activarFiltroDiario(true);",
                    "    component.getStore().removeAll();",
                    "    component.getStore().loadData(response.productos);",
                    "    component.getStore().sort(\"NombreProducto\", \"ASC\");",
                    "    component.view.refresh();",
                    "",
                    "    // Ext.ComponentMgr.get(\"cmbClasificacionPadre\").cargarClasificacionesPadre();",
                    "",
                    "    window.currentPedido=response;",
                    "    myMask.hide();",
                    "",
                    "    //Verificamos los productos que tienen proporción 0 y los mostramos al usuario;",
                    "    if(response && response.productos && response.productos.length > 0){",
                    "        var productoTemp;",
                    "        var cantidadProdPorcionCero = 0;",
                    "        var msjNoProporcion = \"<hr /><table><tr><td>CLAVE </td><td>PRODUCTO </td><tr>\";",
                    "        //Recorremos los productos y filtramos los que tienen IMPORTE erroneo o cero para obtener los datos y mostrarlos al usuario",
                    "        for (i = 0; i < response.productos.length; i++) {",
                    "            productoTemp = response.productos[i];",
                    "            if(productoTemp.Proporcion === 0){",
                    "                cantidadProdPorcionCero ++;",
                    "                msjNoProporcion += \"<tr><td> \" + productoTemp.claveproducto + \"</td><td> \" + productoTemp.NombreProducto + \"</td></tr>\";",
                    "            }",
                    "        }",
                    "        msjNoProporcion += \"</table>\";",
                    "        if(cantidadProdPorcionCero > 0){",
                    "            Ext.Msg.alert('', 'Los siguientes productos tiene Proporción \"0\", para poder agregarlos a un pedido la proporción debe ser mayor a \"0\", comuníquese con el área de implementaciones para poder actualizar la información de los productos.\\n' + msjNoProporcion);",
                    "        }",
                    "    }",
                    "},function(){",
                    "",
                    "    almacen.getApplication().Reconectar(almacen.getApplication().currentSession,",
                    "                                        function(obj,res){",
                    "                                            myMask.hide();",
                    "                                            Ext.Msg.alert('',\"Se ha restablecido la conexión con el servidor\");",
                    "                                        });",
                    "",
                    "});"
                ]
            },
            "name": "consultaProductos",
            "designerId": "a62a99b4-f6e0-4249-a7e4-6c4f94351b89"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "Iva",
                    "Descuento",
                    "PrecioU",
                    "Cantidad",
                    "tasa"
                ],
                "fn": "calculaImportesTotales",
                "implHandler": [
                    "console.log(\"Iva\");",
                    "console.log(Iva);",
                    "console.log(\"Descuento\");",
                    "console.log(Descuento);",
                    "console.log(\"PrecioU\");",
                    "console.log(PrecioU);",
                    "console.log(\"Cantidad\");",
                    "console.log(Cantidad);",
                    "console.log(\"tasa\");",
                    "console.log(tasa);",
                    "// se lee iva y eps, junto con descuento",
                    "var Total = 0.0;",
                    "var SubTotal = 0.0;",
                    "var IvaAplicado = 0.0;",
                    "var DescuentoAplicado = 0.0;",
                    "",
                    "SubTotal = (Cantidad  * PrecioU);",
                    "",
                    "DescuentoAplicado = (SubTotal * (Descuento / 100));",
                    "if (tasa){",
                    "    IEPS = almacen.getApplication().calculaIEPS(tasa, Cantidad, PrecioU, Descuento, Iva);",
                    "    SubTotal += IEPS;",
                    "}",
                    "",
                    "IvaAplicado = ((SubTotal - DescuentoAplicado) * (Iva / 100));",
                    "",
                    "Total = (SubTotal - DescuentoAplicado) + IvaAplicado;",
                    "",
                    "return (Math.round(Total * 100) / 100);",
                    "",
                    ""
                ]
            },
            "name": "calculaImportesTotales",
            "designerId": "85aa8054-d71d-4abc-a00d-2ea3ad223000"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "currentController",
                    "correoRecords"
                ],
                "fn": "guardaPedido",
                "implHandler": [
                    "var grid = Ext.ComponentMgr.get(\"gridCedis\");",
                    "var clavecedisR=Ext.ComponentMgr.get(\"cmbProveedorCedis\").getValue();",
                    "var request = new Object(); request.method=\"guardarpedidos\"; request.params=[];",
                    "if (almacen.getApplication().currentSession.esCedi) {",
                    "    if (!Ext.ComponentMgr.get(\"cmbSucursal\").isValid()){",
                    "        Ext.Msg.alert('', 'Por favor especifique una sucursal antes de realizar la busqueda.');",
                    "        return;",
                    "    }",
                    "    request.params.push({\"name\":\"filtroSucursal\",\"value\":Ext.ComponentMgr.get(\"cmbSucursal\").getValue()});",
                    "}",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "request.params.push({\"name\":\"Pedido\",\"value\":Ext.encode(window.currentPedido)});",
                    "",
                    "// se rellenan los correos",
                    "",
                    "var a = {};",
                    "",
                    "if(typeof window.currentSelectedProveedor !== 'undefined' && typeof correoRecords !== 'undefined'){",
                    "    request.params.push({\"name\":\"esPedidoCedi\",\"value\":window.currentSelectedProveedor.data.esCedi});",
                    "    if(correoRecords.length > 0){",
                    "        var correos = [];",
                    "        for(var iter = 0; iter < correoRecords.length; iter++){",
                    "            var currentRecord = correoRecords[iter];",
                    "            console.log(\"currentRecord\");",
                    "            console.log(currentRecord);",
                    "            console.log(currentRecord.get(\"label\"));",
                    "            if(currentRecord.get(\"label\") !== ''){",
                    "                correos.push({",
                    "                    \"label\" : currentRecord.get(\"label\"),",
                    "                    \"value\" : currentRecord.get(\"value\"),",
                    "                });",
                    "            }",
                    "        }",
                    "        a.correos = correos;",
                    "        request.params.push({\"name\":\"correos\",\"value\":Ext.encode(a)});",
                    "    }",
                    "}",
                    "",
                    "var fechaRecibe = \"\";",
                    "var dt = Ext.ComponentMgr.get(\"dtRecepcionCedis\");",
                    "",
                    "if (dt.isValid()){",
                    "    fechaRecibe = dt.getRawValue();",
                    "    request.params.push({\"name\":\"fecharecep\",\"value\":fechaRecibe});",
                    "}",
                    "",
                    "var myMask = new Ext.LoadMask({",
                    "    msg    : 'Guardando Pedidos, espere por favor...',",
                    "    target : grid",
                    "});",
                    "",
                    "myMask.show();",
                    "console.log(\"---------request--------\");",
                    "console.log(request);",
                    "",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    //  almacen.getApplication().hideLoader({'peso':'1','mensaje':'Guardando pedidos, espere por favor...'});",
                    "    if(response.status){",
                    "        currentController.Limpiar();",
                    "        window.currentPedido = null;",
                    "    }",
                    "    //console.log(\"response guardarpedido\");",
                    "    //console.log(response);",
                    "    //console.log(response.filepath.length);",
                    "    if(response.filepath.length > 0){",
                    "        //console.log(\"Imprimiendo\");",
                    "        var currentPath = response.filepath[0];",
                    "        //console.log(currentPath);",
                    "        almacen.getApplication().downloadPedido(currentPath,0);",
                    "    }",
                    "    myMask.hide();",
                    "",
                    "    if (almacen.getApplication().currentSession.descargaReporteUbicacion && window.currentSelectedProveedor && window.currentSelectedProveedor.data.esCedi) {",
                    "        var wnd=Ext.create(\"almacen.view.DlgCorreoReporte\", {id:\"wndCorreoReporte\",currentRecord:\"response\"});",
                    "        wnd.parentController=currentController;",
                    "        wnd.currentRecord=\"response\";",
                    "        wnd.center();",
                    "        wnd.show();",
                    "",
                    "    }",
                    "",
                    "},function(response){",
                    "    console.log(\"Error\");",
                    "    console.log(response);",
                    "    myMask.hide();",
                    "    almacen.getApplication().Reconectar(almacen.getApplication().currentSession,",
                    "                                        function(obj,res){",
                    "                                            myMask.hide();",
                    "                                            Ext.Msg.alert('',\"Caja ocupada.</br></br>El pedido no fue guardado.</br>Presione el botón guardar nuevamente.\");",
                    "",
                    "                                        });",
                    "",
                    "});"
                ]
            },
            "name": "guardaPedido",
            "designerId": "4db17171-3390-45a5-8db6-bcd9308db9ab"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "currentController",
                    "correoRecords"
                ],
                "fn": "gestionaCorreos",
                "implHandler": [
                    "this.guardaPedido(currentController, correoRecords);"
                ]
            },
            "name": "gestionaCorreos",
            "designerId": "5bead9c4-2e16-4811-8edf-148049908a01"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "currentController",
                    "correoRecords"
                ],
                "fn": "gestionaCorreosReporte",
                "implHandler": [
                    "console.log(\"gestionaCorreosReporte\");",
                    "var grid = Ext.ComponentMgr.get(\"gridCedis\");",
                    "console.log(window.currentSelectedProveedor.data);",
                    "//var clavecedisR=Ext.ComponentMgr.get(\"cmbProveedorCedis\").getValue();",
                    "var clavecedisR=window.currentSelectedProveedor.data.esCedi ? window.currentSelectedProveedor.data.claveProveedor : -1;",
                    "var requestReporte = new Object(); requestReporte.method=\"reportecedisubicacion\"; requestReporte.params=[];",
                    "requestReporte.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "requestReporte.params.push({\"name\":\"clavecedi\",\"value\":clavecedisR});",
                    "",
                    "var a = {};",
                    "",
                    "if(typeof correoRecords !== 'undefined'){",
                    "    if(correoRecords.length > 0){",
                    "        var correos = [];",
                    "        for(var iter = 0; iter < correoRecords.length; iter++){",
                    "            var currentRecord = correoRecords[iter];",
                    "            console.log(\"currentRecord\");",
                    "            console.log(currentRecord);",
                    "            console.log(currentRecord.get(\"label\"));",
                    "            if(currentRecord.get(\"label\") !== ''){",
                    "                correos.push({",
                    "                    \"label\" : currentRecord.get(\"label\"),",
                    "                    \"value\" : currentRecord.get(\"value\"),",
                    "                });",
                    "            }",
                    "        }",
                    "        a.correos = correos;",
                    "        requestReporte.params.push({\"name\":\"correos\",\"value\":Ext.encode(a)});",
                    "    }",
                    "}",
                    "var myMask = new Ext.LoadMask({",
                    "    msg    : 'Generando reporte de ubicacion, espere por favor...',",
                    "    target : grid",
                    "});",
                    "myMask.show();",
                    "almacen.getApplication().loadData(requestReporte,function(response){",
                    "    if(response.status){",
                    "        currentController.Limpiar();",
                    "        window.currentPedido = null;",
                    "    }",
                    "    console.log('response',response);",
                    "    if(response.filepath.length > 0){",
                    "        //console.log(\"Imprimiendo\");",
                    "        var currentPath = response.filepath[0];",
                    "        //console.log(currentPath);",
                    "        almacen.getApplication().downloadPedido(currentPath,1);",
                    "",
                    "",
                    "",
                    "    }",
                    "    myMask.hide();",
                    "},function(response){",
                    "    console.log(\"Error\");",
                    "    console.log(response);",
                    "    myMask.hide();",
                    "    almacen.getApplication().Reconectar(almacen.getApplication().currentSession,",
                    "                                        function(obj,res){",
                    "                                            myMask.hide();",
                    "                                            Ext.Msg.alert('',\"Caja ocupada.</br></br>No se puede descargar el reporte .</br>\");",
                    "",
                    "                                        });",
                    "});"
                ]
            },
            "name": "gestionaCorreosReporte",
            "designerId": "6454f274-5e01-47b6-ac9d-6d26fcf603d6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "ocultarColumnas",
                "implHandler": [
                    "    var columns = Ext.ComponentMgr.get(\"gridCedis\").down(\"headercontainer\").getGridColumns();",
                    "    console.log(columns);",
                    "    var column_unidadmin = columns[4];",
                    "    var column_unidadcedis = columns[5];",
                    "    var column_cantidadminima = columns[6];",
                    "",
                    "    var column_vtaesperada = columns[15];",
                    "    var column_descuento = columns[16];",
                    "    var column_ieps = columns[17];",
                    "    var column_impuesto = columns[18];",
                    "",
                    "    column_unidadmin.show();",
                    "    column_unidadcedis.show();",
                    "    column_cantidadminima.show();",
                    "    column_vtaesperada.show();",
                    "    column_descuento.show();",
                    "    column_ieps.show();",
                    "    column_impuesto.show();",
                    "",
                    "",
                    "    if(typeof window.currentSelectedProveedor !== 'undefined' && !window.currentSelectedProveedor.data.esCedi){ // el cedis levanta el pedido de la sucursal",
                    "        // se ocultan a proveedor externo",
                    "        column_unidadcedis.hide();",
                    "",
                    "    }else{",
                    "        // se ocultan al cedis",
                    "        column_vtaesperada.hide();",
                    "        column_descuento.hide();",
                    "        column_ieps.hide();",
                    "        column_impuesto.hide();",
                    "        column_cantidadminima.hide();",
                    "    }",
                    "",
                    "    Ext.ComponentMgr.get(\"gridCedis\").view.refresh();"
                ]
            },
            "name": "ocultarColumnas",
            "designerId": "43409475-dc47-48c5-b19f-f49a94e6338a"
        }
    ]
}