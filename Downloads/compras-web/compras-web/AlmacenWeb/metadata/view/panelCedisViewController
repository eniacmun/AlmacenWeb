{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "panelcedis",
        "designer|userClassName": "panelCedisViewController"
    },
    "name": "panelInventariosViewController1",
    "designerId": "23ae0dbf-fd6d-4f37-80d6-4d9ad567a92d",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "panel",
                "designer|targetType": "panelCedis",
                "fn": "loadPedidosPendientes",
                "implHandler": [
                    "/*console.log(\"loadPedidosPendientes\");",
                    "        var request = new Object(); request.method=\"consultagrid\"; request.params=[];",
                    "                request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "                almacen.getApplication().loadData(request,function(response){",
                    "                    console.log(\"response pedidos pendientes\");",
                    "                    console.log(response);",
                    "                    //component.getStore().loadData(response.items);",
                    "                    //component.getStore().sort('nombreProveedor','ASC');",
                    "                });",
                    "",
                    "Ext.create('Ext.grid.Panel', {",
                    "        //store: mystore,",
                    "         columns: [",
                    "            {text: 'Static field A',  dataIndex:'staticA'},",
                    "            {text: 'Static field B',  dataIndex:'staticB'},",
                    "            {text: 'Color',  dataIndex:'dynamic.12345'},",
                    "            {text: 'Size',    dataIndex:'dynamic.12346'},",
                    "        // ...",
                    "            ]",
                    "        });*/"
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "name": "loadPedidosPendientes",
            "designerId": "1420c17e-5227-44ad-8310-5a50eb582720"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller",
                    "tipoActualizacion"
                ],
                "fn": "validaGuardarPedidos",
                "implHandler": [
                    "var winDelete =  Ext.create('Ext.window.Window', {",
                    "    title: 'Seleccione el método de impresión',",
                    "    height: 150,",
                    "    width: 500,",
                    "    layout: 'fit',",
                    "    modal:true,",
                    "    bodyPadding: 20,",
                    "    border: 2,",
                    "    buttons: [",
                    "        {",
                    "            text: 'CONFIRMAR',",
                    "            scale: 'medium',",
                    "            cls: 'btn-delete-yes',",
                    "            listeners: {",
                    "                click: function() {",
                    "",
                    "                    var radio1 = Ext.getCmp('radio1'),",
                    "",
                    "                    radio2 = Ext.getCmp('radio2'),",
                    "                    radio3 = Ext.getCmp('radio3');",
                    "                    radio4 = Ext.getCmp('radio4');",
                    "",
                    "                    //if L is selected, change to M",
                    "                    if (radio1.getValue()) {",
                    "                        controller.guardarPedidos(0,tipoActualizacion);",
                    "                        winDelete.close();",
                    "                        return;",
                    "                    }",
                    "",
                    "                    //if XL is selected, change to L",
                    "                    if (radio2.getValue()) {",
                    "                        controller.guardarPedidos(1,tipoActualizacion);",
                    "                        winDelete.close();",
                    "                        return;",
                    "                    }",
                    "",
                    "                    //if XL is selected, change to L",
                    "                    if (radio3.getValue()) {",
                    "                        controller.guardarPedidos(2,tipoActualizacion);",
                    "                        winDelete.close();",
                    "                        return;",
                    "                    }",
                    "",
                    "                    //if XL is selected, change to L",
                    "                    if (radio4.getValue()) {",
                    "                        controller.guardarPedidos(-1,tipoActualizacion);",
                    "                        winDelete.close();",
                    "                        return;",
                    "                    }",
                    "",
                    "                }",
                    "            }",
                    "        }, '->',",
                    "        {",
                    "            text: 'CANCELAR',",
                    "            scale: 'medium',",
                    "            cls: 'btn-delete-no',",
                    "            listeners: {",
                    "               click: function() {",
                    "                   winDelete.close();",
                    "               }",
                    "            }",
                    "        }",
                    "    ],",
                    "    items: [",
                    "            {",
                    "            xtype      : 'fieldcontainer',",
                    "            fieldLabel : '',",
                    "            defaultType: 'radiofield',",
                    "            defaults: {",
                    "                flex: 1",
                    "            },",
                    "            layout: 'hbox',",
                    "            items: [",
                    "                {",
                    "                    boxLabel  : 'PDF',",
                    "                    checked: true,",
                    "                    name      : 'size',",
                    "                    inputValue: '0',",
                    "                    id        : 'radio1'",
                    "                }, {",
                    "                    boxLabel  : 'EXCEL',",
                    "                    name      : 'size',",
                    "                    inputValue: 'l',",
                    "                    id        : 'radio2'",
                    "                }, {",
                    "                    boxLabel  : 'PDF y EXCEL',",
                    "                    name      : 'size',",
                    "                    inputValue: '2',",
                    "                    id        : 'radio3'",
                    "                }, {",
                    "                    boxLabel  : 'Sin Impresión',",
                    "                    name      : 'size',",
                    "                    inputValue: '2',",
                    "                    id        : 'radio4'",
                    "                }",
                    "            ]",
                    "        }",
                    "    ]",
                    "}).show();"
                ]
            },
            "name": "validaGuardarPedidos",
            "designerId": "7ec8dae5-4395-4413-8eac-6c38af394e83"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "opcionimpresion",
                    "tipoActualizacion"
                ],
                "fn": "guardarPedidos",
                "implHandler": [
                    "console.log(\"tipoActualizacion\" + tipoActualizacion);",
                    "",
                    "// guardara n numero de pedidos por columna equivalente al numero de sucursales que hayan realizado pedidos",
                    "var Pedidos = [];",
                    "",
                    "// se obtiene el grid por ID, este grid es el que contiene los productos.",
                    "var grid=Ext.ComponentMgr.get(\"GridProductosCedis\");",
                    "",
                    "",
                    "// se crea el vector de sucursales, un registro por cada sucursal.",
                    "var sucursales = [];",
                    "",
                    "// Se obtienen el numero de sucursales con pedidos por medido de una variable global,",
                    "// debido a que los metodos del grid no devolveran las columnas dinamicamente.",
                    "var number_columns = window.sucursales_con_pedidos.length;",
                    "console.log(\"window.sucursales_con_pedidos: \"); console.log(window.sucursales_con_pedidos);",
                    "",
                    "console.log(\"Numero de sucursales(columnas): \"  +number_columns);",
                    "",
                    "// Indice en donde empiezan las sucursales en el grid",
                    "var sucursales_start = 5;",
                    "",
                    "var sucursales_modificados = {};",
                    "",
                    "// se guardan los pedidos por columnas",
                    "for(var pedido = 0; pedido < number_columns; pedido ++){",
                    "",
                    "    // se definen el vector de los productos",
                    "    var productos = [];",
                    "",
                    "    // la siguiente es una muestra de como tiene que estructurarse",
                    "    /*productos.push({",
                    "               \t\t\t\t\"claveproducto\":\"TEQ.026\",",
                    "               \t\t\t\t\"cantidad\":3.25,",
                    "               \t\t\t\t\"Importe\":1353.9825,",
                    "               \t\t\t\t\"costo\":416.61,",
                    "               \t\t\t\t\"Concepto\":\"SIETE LEGUAS BLANCO 1 LT\",",
                    "               \t\t\t\t\"Unidad\":\"BOTELLA\"",
                    "",
                    "    });*/",
                    "",
                    "    var sucursal_name = \"\";",
                    "",
                    "    // se itera el grid para rellenar los productos",
                    "    grid.getStore().each(function(rec){",
                    "",
                    "",
                    "        // se obtiene el nombre de la sucursal",
                    "        var fields = rec.getFields();",
                    "        sucursal_name = fields[sucursales_start].name; // DEVPOLLO6;#1 23/01/2020,&965.0",
                    "",
                    "",
                    "        var edited = false;",
                    "        if(typeof rec.modified !== 'undefined'){",
                    "",
                    "            //console.log(\"record\");console.log(rec);",
                    "",
                    "            var modificados = rec.modified;",
                    "",
                    "            //console.log(\"modifcados\");console.log(modificados);",
                    "",
                    "            for(var col_name in modificados){",
                    "                if(sucursal_name == col_name){",
                    "                    //console.log(\"iter: \" + col_name + ' value: ' + modificados[col_name]);",
                    "                    var currentSucursal = almacen.getApplication().obtenerSucursal(col_name).sucursal;",
                    "                    if(currentSucursal in sucursales_modificados){",
                    "                        sucursales_modificados[currentSucursal] = sucursales_modificados[currentSucursal] + 1;",
                    "                    }else{",
                    "                        sucursales_modificados[currentSucursal] = 1;",
                    "                    }",
                    "                    edited = true;",
                    "                }",
                    "            }",
                    "",
                    "            //console.log(\"Productos Modificados\");",
                    "            //console.log(sucursales_modificados);",
                    "",
                    "        }",
                    "",
                    "",
                    "        // Se verifica que la cantidad en esa sucursal sea mayor que cero (verificar, puede que si se tengan que registrar los ceros)",
                    "        // actualizacion, se maneja cuales han sido modificadosy, y se valida si el modificado es con cantidad cero, para actualizar.",
                    "        if (rec.get(sucursal_name) >= 0 /* && rec.get(\"Agregar\")*/){",
                    "            if((rec.get(sucursal_name) === 0 && edited) || rec.get(sucursal_name) > 0){",
                    "                // se calcula el importe nuevamente, dado que sencha no guarda el importe en rec.get(\"importe\")",
                    "                // se aplica tambien redondeo",
                    "                var importe = rec.get(sucursal_name) * rec.get(\"precio\");",
                    "                //console.log(\"importe: \" + importe);",
                    "                importe = (Math.round(importe * 100) / 100); // redondeo a dos digitos",
                    "                // se ensambla el producto",
                    "                var current_record = {",
                    "                    \"claveproducto\": rec.get(\"claveproducto\"),",
                    "                    \"cantidad\":rec.get(sucursal_name),",
                    "                    \"Importe\": importe,",
                    "                    \"costo\":rec.get(\"precio\"),",
                    "                    \"Concepto\":rec.get(\"concepto\"),",
                    "                    \"Unidad\":\"unidad\"",
                    "                };",
                    "",
                    "                // se agrega el producto al vector",
                    "                productos.push(current_record);",
                    "            }",
                    "        }",
                    "    });",
                    "",
                    "    console.log(window.sucursales_con_pedidos[pedido].sucursal);",
                    "    console.log(\"Se modificaron: \" + sucursales_modificados[window.sucursales_con_pedidos[pedido].sucursal] + \" productos\");",
                    "",
                    "    if(window.sucursales_con_pedidos[pedido].sucursal in sucursales_modificados || tipoActualizacion === 0){",
                    "",
                    "",
                    "        // se ensambla la sucursal pasando los parametros necesarios.",
                    "        // el vector window.sucursales_con_pedidos se ensambla al cargar los productos del Cedis en onGridpanelBeforeRender",
                    "        sucursales.push({",
                    "            \"claveSucursal\": window.sucursales_con_pedidos[pedido].clavesucursal, // se toma la clave sucursal del vector global de pedidos de sucursales",
                    "            \"productos\" : productos,",
                    "            \"nombreSucursal\": window.sucursales_con_pedidos[pedido].sucursal.toUpperCase(), //sucursal_name.toUpperCase(),",
                    "            \"claveNota\":0,",
                    "            \"claveDocumentoSucursal\":0",
                    "        });",
                    "",
                    "    }",
                    "    // se agrega al vector de pedidos",
                    "    //Pedidos.push(sucursales);",
                    "",
                    "    // se pasa a la siguiente columna",
                    "    sucursales_start += 1;",
                    "}",
                    "",
                    "//console.log(\"Pedidos\");console.log(Pedidos);",
                    "console.log(\"sucursales\");console.log(sucursales);",
                    "",
                    "if(Object.entries(sucursales).length === 0){",
                    "    Ext.Msg.alert(\"Alerta\",\"No hay ninguna modificacion\");",
                    "    return;",
                    "}",
                    "",
                    "",
                    "//return;",
                    "",
                    "window.currentPedidoSurtir = {};",
                    "window.currentPedidoSurtir.sucursales = sucursales;",
                    "",
                    "",
                    "var mensaje = \"Pedidos surtidos correctamente. <br><br>\";",
                    "if( tipoActualizacion == 1){",
                    "    mensaje = 'Pedidos modificados correctamente. <br><br>';",
                    "}",
                    "",
                    "var request = new Object(); request.method=\"surtirpedidoscomprasweb\"; request.params=[];",
                    "",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "request.params.push({\"name\":\"opcionimpresion\",\"value\":opcionimpresion});",
                    "request.params.push({\"name\":\"Pedidos\",\"value\":Ext.encode(window.currentPedidoSurtir)});",
                    "request.params.push({\"name\":\"tipoActualizacion\",\"value\":tipoActualizacion});",
                    "",
                    "console.log(\"request\");console.log(request);",
                    "",
                    "var myMask = new Ext.LoadMask({",
                    "    msg    : 'Guardando Pedidos, espere por favor...',",
                    "    target : grid",
                    "});",
                    "",
                    "myMask.show();",
                    "",
                    "var archivos_por_imprimir = [];",
                    "//var actualizar_function = this.actualizarGrid;",
                    "var actualizar_function = this.ActualizarInterfaz;",
                    "",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    console.log(\"response\");console.log(response);",
                    "    archivos_por_imprimir = response.filepath;",
                    "    actualizar_function();",
                    "    if(!response.status){",
                    "        mensaje = response.msg;",
                    "    }else{",
                    "        mensaje = mensaje + '\\n Las impresiones se veran reflejadas en un instante más si eligió impresiones. \\n Igualmente puede consultarlas en el apartado de Consulta Pedidos';",
                    "    }",
                    "    Ext.Msg.alert('Pedidos', mensaje);",
                    "    myMask.hide();",
                    "",
                    "    // impresiones",
                    "    almacen.getApplication().descargarArchivos(archivos_por_imprimir, opcionimpresion);",
                    "",
                    "",
                    "",
                    "},function(){",
                    "    myMask.hide();",
                    "    almacen.getApplication().Reconectar(almacen.getApplication().currentSession,",
                    "                                        function(obj,res){",
                    "                                            myMask.hide();",
                    "                                            Ext.Msg.alert('',\"Caja ocupada.</br></br>El pedido no fue guardado.</br>Presione el botón guardar nuevamente.\");",
                    "                                        });",
                    "",
                    "});",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            "name": "guardarPedidos",
            "designerId": "a6885b55-3203-4beb-9fe3-bf5e9e58d64f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "actualizarGrid",
                "implHandler": [
                    "//var component = Ext.ComponentMgr.get('GridProductosCedis'); // se obtiene el grid a actualizar",
                    "var component = Ext.ComponentMgr.get('gridContainer'); // se obtiene el grid a actualizar",
                    "var currentController = component.up().getController();",
                    "",
                    "var el = component.getEl();",
                    "// se da un espacio de tiempo corto para que el render del mask quede al centro.",
                    "setTimeout(function() {",
                    "    el.mask(\"Realizando Consulta.\");",
                    "},100);",
                    "",
                    "// estado a fija",
                    "var estado = 0;",
                    "",
                    "// se limpia el form",
                    "Ext.ComponentMgr.get(\"FormularioFiltro\").getForm().reset();",
                    "Ext.ComponentMgr.get(\"FormularioFiltro1\").getForm().reset();",
                    "",
                    "",
                    "// se inicia el llamado",
                    "var request = new Object(); request.method=\"consultagrid\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "request.params.push({\"name\":\"claveusuario\",\"value\":almacen.getApplication().ClaveUsuario});",
                    "",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    console.log(\"response consulta grid\");",
                    "    console.log(response);",
                    "    el.unmask();",
                    "    if(response.columns.length < 3){",
                    "        //Ext.Msg.alert(\"Mensaje\", \"No hay pedidos que mostrar\");",
                    "        currentController.formarGrid(response);",
                    "    }else{",
                    "        if(response.retData.status){",
                    "            currentController.formarGrid(response);",
                    "            Ext.ComponentMgr.get(\"btnGuardarPedidos\").setDisabled(false);",
                    "",
                    "            var currentFilter = Ext.ComponentMgr.get(\"comboFechaBusqueda1\");",
                    "",
                    "            var parametros = {};",
                    "            parametros.value = estado;",
                    "            var label = currentController.obtenerLabelEstado(parametros);",
                    "",
                    "            currentFilter.setValue(label);",
                    "        }else{",
                    "            Ext.Msg.alert(\"Mensaje\", response.retData.msg);",
                    "        }",
                    "",
                    "    }",
                    "",
                    "}, function(response){",
                    "    el.unmask();",
                    "    Ext.Msg.alert(\"Mensaje\", \"Error en el servidor.\");",
                    "    console.log(response);",
                    "});",
                    ""
                ]
            },
            "name": "actualizarGrid",
            "designerId": "94915378-05bf-4cc7-ab52-dc261bd52d6a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "start_column",
                    "number_columns"
                ],
                "fn": "actualizarTotal",
                "implHandler": [
                    "var total_importe = 0.0;",
                    "var total_cantidad = 0.0;",
                    "",
                    "var grid = Ext.ComponentMgr.get(\"GridProductosCedis\");",
                    "var number_columns = window.sucursales_con_pedidos.length;",
                    "",
                    "grid.getStore().each(function(rec) {",
                    "    var fields = rec.getFields();",
                    "    for (var cliente = start_column; cliente < (start_column + number_columns ); cliente ++){",
                    "        total_cantidad += rec.get(fields[cliente].name);",
                    "    }",
                    "",
                    "    total_importe += total_cantidad * rec.get('precio');",
                    "    total_cantidad = 0.0;",
                    "",
                    "});",
                    "",
                    "//console.log(\"Total: \" + total_importe);",
                    "",
                    "Ext.ComponentMgr.get(\"totalField\").setValue(Ext.util.Format.currency(total_importe));"
                ]
            },
            "name": "actualizarTotal",
            "designerId": "0d490989-ad43-4c2e-a747-0c2e020bb26e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tipoReporte"
                ],
                "fn": "descargarReporte",
                "implHandler": [
                    "console.log(\"Va a descargar el reporte: \" + tipoReporte);",
                    "",
                    "var request = new Object(); request.method=\"printreporte\"; request.params=[];",
                    "request.params.push({\"name\":\"tipoReporte\",\"value\":tipoReporte});",
                    "request.params.push({\"name\":\"claveSucursal\",\"value\":tipoReporte});",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    console.log(\"response\");console.log(response);",
                    "    if(response.status){",
                    "        var curentFilepath = response.filepath[0];",
                    "        console.log(\"Archivo a descargar: \" + curentFilepath);",
                    "        if(curentFilepath !== \"\"){",
                    "            Ext.Msg.alert(\"Mensaje\",\"Impresión correcta, se descargará su archivo.\");",
                    "            almacen.getApplication().downloadPedido(curentFilepath, 1); // 0 PDF 1 Excel 2 Ambos",
                    "        }else{",
                    "            Ext.Msg.alert(\"Mensaje\",\"No se pudo generar su archivo. Reintente\");",
                    "        }",
                    "    }else{",
                    "        Ext.Msg.alert(\"Mensaje\",\"No se pudo generar su archivo.\");",
                    "    }",
                    "",
                    "",
                    "});"
                ]
            },
            "name": "descargarReporte",
            "designerId": "11a162b7-d8c0-4387-a2ab-cf8d2d6673d6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "FiltroEstado",
                    "FiltroFechas",
                    "FiltroTipoFecha"
                ],
                "fn": "loadConsultaTraspasos",
                "implHandler": [
                    "/*var winBusquedaCompra = Ext.WindowManager.get(\"GridProductosCedis\");",
                    "var el = winBusquedaCompra.getEl();",
                    "",
                    "el.mask('Realizando consulta, por favor espere');",
                    "",
                    "var request = new Object(); request.method=\"consultapedidos\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "",
                    "if (FiltroEstado)request.params.push({\"name\":\"filtroEstado\",\"value\":estado});",
                    "if (FiltroFechas)request.params.push({\"name\":\"filtroFecha\",\"value\":pFiltroFecha});",
                    "",
                    "var component = Ext.ComponentMgr.get(\"GridProductosCedis\");",
                    "",
                    "component.getStore().removeAll();",
                    "",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    console.log(\"response\");",
                    "    console.log(response);",
                    "  //  component.getStore().loadData(response.pedidos);",
                    "    el.unmask();",
                    "    //Ext.ComponentMgr.get(\"comboProveedor\").getPicker().loadMask.hide();",
                    "},function(response){",
                    "    el.unmask();",
                    "});*/",
                    "",
                    "//var winBusquedaCompra = Ext.ComponentMgr.get(\"GridProductosCedis\");",
                    "var winBusquedaCompra = Ext.ComponentMgr.get(\"gridContainer\");",
                    "var el = winBusquedaCompra.getEl();",
                    "el.mask('Realizando consulta, por favor espere');",
                    "//var request = new Object(); request.method=\"consultapedidosgrid\"; request.params=[];",
                    "var request = new Object(); request.method=\"consultagrid\"; request.params=[];",
                    "",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "request.params.push({\"name\":\"claveusuario\",\"value\":almacen.getApplication().ClaveUsuario});",
                    "",
                    "if (FiltroEstado)request.params.push({\"name\":\"filtroEstado\",\"value\":FiltroEstado});",
                    "if (FiltroFechas)request.params.push({\"name\":\"filtroFecha\",\"value\":FiltroFechas});",
                    "if (FiltroFechas)request.params.push({\"name\":\"filtroTipoFecha\",\"value\":FiltroTipoFecha});",
                    "",
                    "//var component = Ext.ComponentMgr.get(\"GridProductosCedis\");",
                    "var component = Ext.ComponentMgr.get(\"gridContainer\");",
                    "",
                    "var currentController = this;",
                    "",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    console.log(\"response\");console.log(response);",
                    "    console.log(response.columns.length);",
                    "//    if(response.columns.length == 2){ // solo viene con total e importe, es decir, no hay sucursales o pedidos",
                    "//        Ext.Msg.alert(\"Mensaje\", \"No hay pedidos que mostrar.\");",
                    "//    }else{",
                    "        currentController.formarGrid(response);",
                    "        var fechaBusqueda1 = Ext.ComponentMgr.get(\"idFecha1\");",
                    "        var tipoFecha1 = Ext.ComponentMgr.get(\"radioFechaBusqueda1\");",
                    "        var estado1 = Ext.ComponentMgr.get(\"comboFechaBusqueda1\");",
                    "",
                    "",
                    "",
                    "        var parametros = {};",
                    "        parametros.value = FiltroEstado;",
                    "        var label = currentController.obtenerLabelEstado(parametros);",
                    "",
                    "        console.log(\"FiltroEstado\");console.log(FiltroEstado);",
                    "        console.log(\"currentValue\");console.log(label);",
                    "",
                    "        var currentFilter = Ext.ComponentMgr.get(\"comboFechaBusqueda1\");",
                    "        currentFilter.setValue(label);",
                    "",
                    "        estado1.setValue(label);",
                    "        fechaBusqueda1.setValue(FiltroFechas);",
                    "        tipoFecha1.items.items[FiltroTipoFecha].setValue(true);",
                    "",
                    "        // se actualiza el plugin que se muesta actualmente",
                    "        /*var currentFilter = Ext.ComponentMgr.get(\"currentFilter\");",
                    "        var data = currentFilter.getStore().getData().items;",
                    "        currentFilter.getStore().each(function(record){",
                    "            var value = record.get(\"value\");",
                    "            console.log(\"value\");console.log(value);",
                    "            if(FiltroEstado == value ){",
                    "                var label = record.get(\"label\");",
                    "                console.log(\"label\");console.log(label);",
                    "                currentFilter.setValue(label);",
                    "            }",
                    "        });*/",
                    "",
                    "",
                    "//        if(FiltroEstado == 1 || FiltroEstado == 2 || FiltroEstado == 3 || FiltroEstado == -1){",
                    "        if(FiltroEstado == 2 || FiltroEstado == 3 || FiltroEstado == -1){",
                    "            Ext.ComponentMgr.get(\"btnGuardarPedidos\").setDisabled(true);",
                    "        }else{",
                    "            Ext.ComponentMgr.get(\"btnGuardarPedidos\").setDisabled(false);",
                    "        }",
                    "  //  }",
                    "    el.unmask();",
                    "    //Ext.ComponentMgr.get(\"comboProveedor\").getPicker().loadMask.hide();",
                    "},function(response){",
                    "    el.unmask();",
                    "",
                    "});",
                    ""
                ]
            },
            "name": "loadConsultaTraspasos",
            "designerId": "73381f04-320e-48d8-bcf2-f670d53568bf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "response"
                ],
                "fn": "formarGrid",
                "implHandler": [
                    "var component = Ext.ComponentMgr.get('GridProductosCedis'); // se obtiene el grid a actualizar",
                    "",
                    "// se limpia todo primero",
                    "//component.getStore().removeAll();",
                    "//component.getStore().sync();",
                    "//component.view.refresh();",
                    "",
                    "/*",
                    "                    columnNames: Array(8)",
                    "                        0: \"claveproducto\"",
                    "                        1: \"concepto\"",
                    "                        2: \"unidad\"",
                    "                        3: \"precio\"",
                    "                        4: \"existencia\"",
                    "                        5: \"maestros\"",
                    "                        6: \"total\"",
                    "                        7: \"importe\"",
                    "    */",
                    "var fields = [];",
                    "var headers = [];",
                    "var static_string_fields = 3;",
                    "var static_number_fields = 2;",
                    "window.start_column_grid = 5; // falta dar le implementacion",
                    "window.sucursales_con_pedidos = [];",
                    "for (var i = 0; i < response.columnNames.length ; i++){",
                    "    var column_name = response.columnNames[i];",
                    "    //console.log(column_name);",
                    "",
                    "    /*if (i === 0){",
                    "            fields.push({name: column_name, type: 'string'});",
                    "            // se generan las columnas de string",
                    "            headers.push({",
                    "                header: column_name[0].toUpperCase() +column_name.slice(1),",
                    "                xtype: 'gridcolumn',",
                    "                dataIndex: column_name,",
                    "                locked: true",
                    "            });",
                    "        }else{*/",
                    "    if (i < static_string_fields){",
                    "        fields.push({name: column_name, type: 'string'});",
                    "        // se generan las columnas de string",
                    "        headers.push({",
                    "            header: column_name[0].toUpperCase() +column_name.slice(1),",
                    "            xtype: 'gridcolumn',",
                    "            dataIndex: column_name,",
                    "            width: 150,",
                    "            locked: true",
                    "        });",
                    "    }else{",
                    "        fields.push({name: column_name, type: 'float'});",
                    "",
                    "        // se generan las columnas",
                    "",
                    "        // Se definen las columnas estaticas",
                    "        if(i <  (static_string_fields + static_number_fields) ){ // se omiten las dos ultimas filas",
                    "            headers.push({",
                    "                header:  column_name[0].toUpperCase() +column_name.slice(1),",
                    "                xtype: 'numbercolumn',",
                    "                summaryType: 'sum',",
                    "                dataIndex: column_name,",
                    "                text: column_name,",
                    "                format: '0,000.00',",
                    "                locked: true",
                    "            });",
                    "        }",
                    "",
                    "        // Se definen las columnas con sucursales",
                    "        if (i > (static_string_fields + static_number_fields - 1) && i < (response.columnNames.length-2)){",
                    "            var sucursal_data = almacen.getApplication().obtenerSucursal(response.columnNames[i]);",
                    "            //console.log(\"sucursal_data\");console.log(sucursal_data);",
                    "            var sucursal_name = sucursal_data.sucursal;",
                    "            var clavesucursal = sucursal_data.clavesucursal;",
                    "            var extra_data = sucursal_data.extra_data;",
                    "            var array = extra_data.split(\",\");",
                    "            var new_extra_data = \"\";",
                    "            for(var edata = 0; edata< array.length; edata++){",
                    "                var array2 = array[edata].split(\" \");",
                    "                var clavepedido = array2[0];",
                    "                var fecha = array2[1];",
                    "                //console.log(\"fecha\");console.log(fecha);",
                    "                //console.log(\"clavepedido\");console.log(clavepedido);",
                    "",
                    "                var today = new Date();",
                    "",
                    "                var dateParts = fecha.split(\"/\");",
                    "",
                    "                // month is 0-based, that's why we need dataParts[1] - 1",
                    "                var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);",
                    "",
                    "                if(today>dateObject)",
                    "                {",
                    "                    //console.log(\"greater\");",
                    "                    var label = \"<p style='color:#C45555;font-family:Sans-serif;margin:2px;padding:2px;'><b>\" + clavepedido +\" \" +fecha +\"</b></p>\";",
                    "",
                    "                    var link = '<a id=\"' + clavepedido.slice(1) + '\"' + 'href=\"#\" onClick=\"javascript:Ext.ComponentMgr.get(\\'gridContainer\\').up().getController().showDetailHeader(this.id);\">' + label + \"</a>\";",
                    "                    //var link = '<a href=\"#\" onClick=\"javascript:alert(\\'yeah\\');\">' + label + \"</a>\";",
                    "                    new_extra_data += link;",
                    "                }",
                    "                else",
                    "                {",
                    "                    //console.log(\"smaller\");",
                    "                    var label = \"<p style='font-family:Sans-serif;margin:2px;padding:2px;'><b>\" + clavepedido +\" \" +fecha +\"</b></p>\";",
                    "                    var link = '<a id=\"' + clavepedido.slice(1) + '\"' + 'href=\"#\" onClick=\"javascript:Ext.ComponentMgr.get(\\'gridContainer\\').up().getController().showDetailHeader(this.id);\">' + label + \"</a>\";",
                    "                    new_extra_data += link;",
                    "                }",
                    "",
                    "",
                    "            }",
                    "            window.sucursales_con_pedidos.push({sucursal: sucursal_name, clavesucursal:clavesucursal}); // se guardan cuantas sucursales hay con pedidos, para ser usadas en mas metodos, ya que el grid mantendra solo columnas definidas en estatico y no dinamico",
                    "            headers.push({",
                    "                header: \"<b>\" + sucursal_name + \"</b>\" + \"<br>\" + new_extra_data,",
                    "                xtype: 'numbercolumn',",
                    "                summaryType: 'sum',",
                    "                dataIndex: column_name,",
                    "                text: sucursal_name,",
                    "                format: '0,000.000',",
                    "                width: 150,",
                    "",
                    "                    //style: 'background-color: #D8D8D8;font-weight: bold;',",
                    "                    //tdCls: 'editable',",
                    "",
                    "",
                    "                editor: {",
                    "",
                    "                        xtype: 'numberfield',",
                    "                        selectOnFocus: true,",
                    "                        decimalPrecision: 3,",
                    "                        minValue: 0,",
                    "                    // listeners: {",
                    "                    /* afterrender: 'onNumcantidadAfterRender',",
                    "                                            keyup: 'onNumcantidadKeyup',",
                    "                                            blur: 'onNumcantidadBlur',",
                    "                                            focus: 'onNumcantidadFocus'*/",
                    "                    // }",
                    "                },",
                    "                //locked: true,",
                    "                sortable: false",
                    "            });",
                    "        }",
                    "",
                    "",
                    "",
                    "        // Se define la penultima columna TOTAL",
                    "        if(i === response.columnNames.length-2){",
                    "            headers.push({",
                    "                header:  column_name[0].toUpperCase() +column_name.slice(1),",
                    "                xtype: 'numbercolumn',",
                    "                renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {",
                    "                    var total = 0;",
                    "                    for (var cliente = (static_string_fields + static_number_fields); cliente < response.columnNames.length-2; cliente ++){",
                    "                        //console.log(response.columnNames[cliente]);",
                    "                        total += record.get(response.columnNames[cliente]);",
                    "                    }",
                    "                    return Ext.util.Format.number(total,'0.000');",
                    "                },",
                    "                dataIndex: column_name,",
                    "                text: column_name,",
                    "                format: '0,000.000',",
                    "                locked: true",
                    "            });",
                    "        }",
                    "",
                    "",
                    "        // Se define la ultima columna IMPORTE",
                    "        if(i === response.columnNames.length-1){",
                    "            headers.push({",
                    "                header:  column_name[0].toUpperCase() + column_name.slice(1),",
                    "                xtype: 'numbercolumn',",
                    "                renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {",
                    "                    var total = 0;",
                    "                    for (var cliente = (static_string_fields + static_number_fields); cliente < response.columnNames.length-2; cliente ++){",
                    "                        total += record.get(response.columnNames[cliente]);",
                    "                    }",
                    "                    var precio = record.get(\"precio\");",
                    "                    return Ext.util.Format.currency(total * precio);",
                    "                },",
                    "                summaryRenderer: function(val, params, data) {",
                    "                    console.log(\"sumando\");",
                    "                    console.log(\"val\");console.log(val);",
                    "                    console.log(\"params\");console.log(params);",
                    "                    console.log(\"data\");console.log(data);",
                    "                    return Ext.util.Format.currency(val);",
                    "                },",
                    "                summaryType: 'sum',",
                    "                dataIndex: column_name,",
                    "                text: column_name,",
                    "                format: '0,000.00',",
                    "                locked: true",
                    "            });",
                    "        }",
                    "",
                    "    }",
                    "    //}",
                    "",
                    "}",
                    "",
                    "//var model_products = almacen.getApplication().models.mdlProductosCedis;",
                    "",
                    "// Se verifica si existe ya el modelo, si existe solo se sobreescribe los campos.",
                    "if (typeof window.model_products === \"undefined\"){",
                    "    console.log(\"creando el modelo...\");",
                    "    window.model_products = Ext.define('almacen.model.mdlProductosCedisDinamico', {",
                    "        extend: 'Ext.data.Model',",
                    "        fields: fields,",
                    "    });",
                    "}else{",
                    "    console.log(\"Sobreescribiendo el modelo...\");",
                    "    window.model_products.fields = fields;",
                    "}",
                    "",
                    "// Se ensamblan los datos que tendrá el Store.",
                    "var data = [];",
                    "",
                    "// Se obtiene el numero de datos",
                    "var n_items = response.columns[0].data.length;",
                    "",
                    "for(var item = 0 ; item < n_items ; item++){",
                    "    var a = {}; // se define un nuevo diccionario",
                    "    for (var column = 0; column < response.columnNames.length ; column++){ // se intera por las columna",
                    "        var actual_column = response.columnNames[column];",
                    "        a[actual_column] = response.columns[column].data[item];",
                    "    }",
                    "    data.push(a);",
                    "}",
                    "",
                    "",
                    "console.log(\"data\");console.log(data);",
                    "",
                    "// Create the model",
                    "var store_products = Ext.create('Ext.data.Store', {",
                    "    model: model_products,",
                    "    data : data",
                    "});",
                    "",
                    "// Se verifica si ya existe, de ser asi, se elimina para que pueda ser creado nuevamente.",
                    "if(typeof Ext.getCmp('GridProductosCedis') !== 'undefined'){",
                    "    Ext.getCmp('GridProductosCedis').destroy();",
                    "}",
                    "",
                    "// Se crea el grid",
                    "var panel = Ext.create('Ext.grid.Panel', {",
                    "    title: '',",
                    "    store: store_products,",
                    "    id: 'GridProductosCedis',",
                    "    enableLocking: true,",
                    "    columns    : headers,",
                    "    plugins: [",
                    "        {",
                    "            ptype: 'cellediting',",
                    "            listeners: {",
                    "",
                    "                edit: function(editor, context, eOpts) {",
                    "                    // se actualiza el total, se tiene que recalcular debido a que el importe viene con 0, y el store no es actualizado con data,",
                    "                    // ademas, el summary no hace su funcion.",
                    "                    var number_columns = window.sucursales_con_pedidos.length;",
                    "                    var columns_start = 5;",
                    "                    controller = Ext.ComponentMgr.get(\"gridContainer\").up().getController();",
                    "                    controller.actualizarTotal(columns_start, number_columns);",
                    "",
                    "                },",
                    "",
                    "                beforeedit: function(editor, context, eOpts) {",
                    "                    var currentFilter = Ext.ComponentMgr.get(\"comboFechaBusqueda1\");",
                    "                    var value = currentFilter.getValue();",
                    "",
                    "                    if(value == \"REGISTRADO\" || value == \"APROBADO\"){",
                    "                        return true;",
                    "                    }else{",
                    "                        return false;",
                    "                    }",
                    "",
                    "                }",
                    "            }",
                    "        }",
                    "    ],",
                    "    selModel: {",
                    "        selType: 'cellmodel'",
                    "    }",
                    "    /*viewConfig: {",
                    "        height: 500,",
                    "        width: 500",
                    "    }*/",
                    "",
                    "});",
                    "",
                    "",
                    "var component = Ext.ComponentMgr.get(\"gridContainer\");",
                    "component.add([panel]);",
                    "console.log(\"component\");",
                    "console.log(component);",
                    "var grid = component.down(\"grid\");",
                    "console.log(grid);",
                    "",
                    "// se actualiza el total, se tiene que recalcular debido a que el importe viene con 0, y el store no es actualizado con data,",
                    "// ademas, el summary no hace su funcion.",
                    "",
                    "var number_columns = window.sucursales_con_pedidos.length;",
                    "var columns_start = 5;",
                    "controller = component.up().getController();",
                    "controller.actualizarTotal(columns_start, number_columns);",
                    "",
                    "var checkDetalles = Ext.ComponentMgr.get(\"checkDetalles\");",
                    "",
                    "if(checkDetalles.getValue()){",
                    "",
                    "    //checkDetalles.setValue(false);",
                    "",
                    "}else{",
                    "    // SE OCULTAN LAS FILAS DEL GRID",
                    "    if (response.columns.length > 2){ // se verifica que sean mas de dos columnas, es decir, haya sucursales",
                    "        var column_unidad = Ext.ComponentMgr.get(\"GridProductosCedis\").down('headercontainer').getGridColumns()[2];",
                    "        var column_precio = Ext.ComponentMgr.get(\"GridProductosCedis\").down('headercontainer').getGridColumns()[3];",
                    "        var column_existencia = Ext.ComponentMgr.get(\"GridProductosCedis\").down('headercontainer').getGridColumns()[4];",
                    "",
                    "        if(!almacen.getApplication().currentSession.habilitaMostrarUnidad)",
                    "            column_unidad.hide();",
                    "        column_precio.hide();",
                    "        column_existencia.hide();",
                    "    }",
                    "",
                    "}",
                    "",
                    "",
                    "//el.unmask();",
                    "",
                    "// Se crea el temporizados",
                    "/*",
                    "var runner = new Ext.util.TaskRunner(),",
                    "    clock, updateClock, task;",
                    "",
                    "if (typeof window.task != 'undefined'){ // se detiene si ya existe, para evitar conflictos",
                    "    window.task.stop();",
                    "}",
                    "",
                    "var miliseconds = 2000;",
                    "",
                    "var minutos_espera = window.minutosSurtirPedidos; // se lee la variable de configuracion",
                    "",
                    "",
                    "console.log(minutos_espera);",
                    "",
                    "var request = new Object(); request.method=\"actualizarfechaapartado\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "request.params.push({\"name\":\"claveusuario\",\"value\":almacen.getApplication().ClaveUsuario});",
                    "",
                    "console.log(\"request\");console.log(request);",
                    "",
                    "window.status = true;",
                    "updateClock = function() {",
                    "    console.log(\"Actualizando apartados\");",
                    "    if(window.status){",
                    "        almacen.getApplication().loadData(request, function(response){",
                    "            console.log(\"response\");console.log(response);",
                    "            if(!response.status){",
                    "                Ext.Msg.alert('Alerta',\"Ha perdido el derecho sobre los pedidos actuales. <br> No realiza ningun cambio, cierre sesión e ingrese nuevamente.\");",
                    "                window.status = false;",
                    "            }",
                    "        });",
                    "    }",
                    "",
                    "};",
                    "",
                    "task = runner.newTask({",
                    "    run: updateClock,",
                    "    interval: 10000",
                    "});",
                    "",
                    "window.task = task;",
                    "",
                    "window.task.start();",
                    "*/"
                ]
            },
            "name": "formarGrid",
            "designerId": "3df066ee-ae52-4fff-a341-01b6ac28509a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "clavepedido"
                ],
                "fn": "showDetailHeader",
                "implHandler": [
                    "console.log(\"solicitando el pedido: \" + clavepedido);",
                    "",
                    "var winBusquedaCompra = Ext.ComponentMgr.get(\"GridProductosCedis\");",
                    "var el = winBusquedaCompra.getEl();",
                    "el.mask('Realizando consulta del pedido: ' + clavepedido +', por favor espere.');",
                    "",
                    "// se lee en que estado se consulta el pedido, de acuerdo a la casilla estado deshabilitada",
                    "var FiltroEstado = Ext.ComponentMgr.get(\"comboFechaBusqueda1\").getValue();",
                    "var parametros = {};",
                    "parametros.label = FiltroEstado;",
                    "",
                    "console.log(\"estado del pedido before: \" + FiltroEstado);",
                    "",
                    "FiltroEstado = this.obtenerLabelEstado(parametros);",
                    "",
                    "console.log(\"estado del pedido after: \" + FiltroEstado);",
                    "",
                    "console.log(\"clavepedido: \" + clavepedido);",
                    "",
                    "var request = new Object(); request.method=\"consultapedidos\"; request.params=[];",
                    "",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "",
                    "if (FiltroEstado)request.params.push({\"name\":\"filtroEstado\",\"value\":FiltroEstado});",
                    "if (FiltroEstado)request.params.push({\"name\":\"clavepedido\",\"value\":clavepedido});",
                    "",
                    "//r component = Ext.ComponentMgr.get(\"gridConsultaTraspasos2\");",
                    "//mponent.getStore().removeAll();",
                    "",
                    "var currentComponent = Ext.ComponentMgr.get(\"gridContainer\").up().getController();",
                    "",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    //mponent.getStore().loadData(response.pedidos);",
                    "    console.log(\"response\");console.log(response);",
                    "    if(response.pedidos.length > 1 ){",
                    "        Ext.Msg.alert(\"Mensaje\", \"Error: Se obtuvieron mas pedidos de los solicitados.\");",
                    "        el.unmask();",
                    "    }else{",
                    "        //el.mask('Abriendo detalle del pedido, por favor espere.');",
                    "        var currentPedido = response.pedidos[0];",
                    "        console.log(\"currentPedido\"); console.log(currentPedido);",
                    "        console.log(\"currentComponent\"); console.log(currentComponent);",
                    "        // se pasa a mostrar la vista de detalles",
                    "        currentComponent.mostrarDetalles(currentPedido);",
                    "    }",
                    "    //Ext.ComponentMgr.get(\"comboProveedor\").getPicker().loadMask.hide();",
                    "},function(response){",
                    "    console.log(response);",
                    "    el.unmask();",
                    "",
                    "});",
                    ""
                ]
            },
            "name": "showDetailHeader",
            "designerId": "04aebdfe-7be0-4173-b14e-2cba109eb280"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "parametros"
                ],
                "fn": "obtenerLabelEstado",
                "implHandler": [
                    "var retorno;",
                    "",
                    "if(parametros.label){ // si viene label se obtiene el numero al que corresponde",
                    "   var currentFilter = Ext.ComponentMgr.get(\"comboFechaBusqueda\");",
                    "        var data = currentFilter.getStore().getData().items;",
                    "        currentFilter.getStore().each(function(record){",
                    "            var label = record.get(\"label\");",
                    "            if(parametros.label == label ){",
                    "                var value = record.get(\"value\");",
                    "                retorno = value;",
                    "                return false;",
                    "            }",
                    "        });",
                    "} else{ // si no, se asume que viene con numero y se obtiene el  label",
                    "    if(typeof parametros.value !== 'undefined'){",
                    "        var currentFilter = Ext.ComponentMgr.get(\"comboFechaBusqueda\");",
                    "        var data = currentFilter.getStore().getData().items;",
                    "        currentFilter.getStore().each(function(record){",
                    "            var value = record.get(\"value\");",
                    "            if(parametros.value == value ){",
                    "                var label = record.get(\"label\");",
                    "                retorno = label;",
                    "                return false;",
                    "            }",
                    "",
                    "        });",
                    "    }",
                    "}",
                    "",
                    "return retorno;"
                ]
            },
            "name": "obtenerLabelEstado",
            "designerId": "f686d617-d2de-4d15-95d2-199cf5cf63e1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "currentRecord"
                ],
                "fn": "mostrarDetalles",
                "implHandler": [
                    "",
                    "// metodo tomado de DlgConsultaTraspasos2",
                    "// cualquier modificacion aca se debe de considerar en ambos para mantener coherencia",
                    "",
                    "var winBusquedaCompra = Ext.ComponentMgr.get(\"GridProductosCedis\");",
                    "var el = winBusquedaCompra.getEl();",
                    "el.mask('Abriendo detalle del pedido: ' + currentRecord.clavePedido +', por favor espere');",
                    "",
                    "var request = new Object(); request.method=\"consultapedidos\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "request.params.push({\"name\":\"clavepedido\",\"value\":currentRecord.clavePedido});",
                    "request.params.push({\"name\":\"pedido\",\"value\":Ext.encode(currentRecord)});",
                    "//console.log(\"Pedido\");",
                    "//console.log(currentRecord));",
                    "window.currentPedido = null;",
                    "window.modificados = {}; // se define la variable que guardara los modificados en la ventana de detalles",
                    "var component = Ext.ComponentMgr.get(\"gridConsultaTraspasos2\");",
                    "//component.getStore().removeAll();",
                    "var currentController = this;",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    window.currentPedido = response;",
                    "    console.log(\"window.currentPedido\"); console.log(window.currentPedido);",
                    "    var wnd=Ext.create(\"almacen.view.DlgConsultaPedido1\", {id:\"wndDetallePedidos2\",modal: true,currentRecord:response});",
                    "    wnd.parentController=currentController;",
                    "    wnd.currentRecord=response;",
                    "    wnd.center();",
                    "    wnd.show();",
                    "    el.unmask();",
                    "    //Ext.ComponentMgr.get(\"comboProveedor\").getPicker().loadMask.hide();",
                    "},function(response){",
                    "    console.log(response);",
                    "    el.unmask();",
                    "",
                    "});"
                ]
            },
            "name": "mostrarDetalles",
            "designerId": "770ddebf-fa51-4d0d-9153-fad4f7731654"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "ModificaTraspaso",
                "implHandler": [
                    "",
                    "if (Ext.WindowManager.get(\"wndDetallePedidos2\"))",
                    "    Ext.WindowManager.get(\"wndDetallePedidos2\").close();",
                    "",
                    "this.ActualizarInterfaz();"
                ]
            },
            "name": "ModificaTraspaso",
            "designerId": "24d79f9a-335b-41c1-b05c-757718b57ce1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "CancelaTraspaso",
                "implHandler": [
                    "",
                    "console.log(\"button\");",
                    "console.log(button);",
                    "var currentController=this;",
                    "                Ext.Msg.confirm(\"Cancelar Pedido\", \"¿Desea cancelar el pedido \" + button.currentRecord.clavePedido,",
                    "",
                    "                function(buttonId){",
                    "                    if (buttonId == 'yes'){",
                    "                        var wnd = Ext.create(\"almacen.view.DlgValidaCancelaPedido\", {id:\"wndValidaCancelaPedido\"});",
                    "                        wnd.parentController= currentController; //this;",
                    "                        wnd.button = button;",
                    "                        wnd.center();",
                    "                        wnd.show();",
                    "                    }",
                    "                });"
                ]
            },
            "name": "CancelaTraspaso",
            "designerId": "75b5e54f-e887-45fd-b824-d0f7baad1ca7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "cancelarTraspaso",
                "implHandler": [
                    "                        // metodo tomado de DlgConsultaTraspasos2, se cambia solo la actualizacion de la interfaz",
                    "",
                    "                        var currentController=this;",
                    "",
                    "                        var winBusquedaCompra = Ext.WindowManager.get(\"wndDetallePedidos2\");",
                    "                        var el = winBusquedaCompra.getEl();",
                    "                        el.mask('Cancelando pedido, por favor espere');",
                    "                        var request = new Object(); request.method=\"cancelapedido\"; request.params=[];",
                    "                        request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "                        request.params.push({\"name\":\"pedido\",\"value\":Ext.encode(button.currentRecord)});",
                    "                        almacen.getApplication().loadData(request,function(response){",
                    "                            el.unmask();",
                    "                            currentController.ActualizarInterfaz(); // cambiado",
                    "                            if (Ext.WindowManager.get(\"wndDetallePedidos2\"))",
                    "                                Ext.WindowManager.get(\"wndDetallePedidos2\").close();",
                    "                        });"
                ]
            },
            "name": "cancelarTraspaso",
            "designerId": "93cae707-6d61-45bf-a0f3-5b22003823d7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "ActualizarInterfaz",
                "implHandler": [
                    "var form = Ext.ComponentMgr.get(\"FormularioFiltro1\").getForm();",
                    "//console.log(\"formulario values\");",
                    "",
                    "var values =  form.getValues();",
                    "//console.log(values);",
                    "",
                    "var currentController = Ext.ComponentMgr.get(\"gridContainer\").up().getController();",
                    "",
                    "var FiltroEstado = values['comboFechaBusqueda1-inputEl'];",
                    "var FiltroFechas = values['idFecha1-inputEl'];",
                    "var FiltroTipoFecha = values.radioFecha1;",
                    "",
                    "if(FiltroEstado === ''){ // no hay filtro aplicado, es decir, en la primera consulta llego vacio, a partir de la segunda consulta deben de existir",
                    "    FiltroEstado = 'REGISTRADO';",
                    "}",
                    "",
                    "//console.log(FiltroEstado);",
                    "//console.log(FiltroFechas);",
                    "//console.log(FiltroTipoFecha);",
                    "",
                    "if(typeof FiltroTipoFecha === 'undefined' && FiltroFechas === '' && FiltroEstado === 'REGISTRADO'){ // No se han aplicado filtros, flujo normal",
                    "    console.log(\"Se actualiza el grid con actualizarGrid\");",
                    "    currentController.actualizarGrid();",
                    "}else{",
                    "    console.log(\"Se actualiza el grid con load traspasos\");",
                    "    var parametros = {};",
                    "    parametros.label = FiltroEstado;",
                    "    FiltroEstado = currentController.obtenerLabelEstado(parametros);",
                    "    currentController.loadConsultaTraspasos(FiltroEstado,FiltroFechas,FiltroTipoFecha);",
                    "}"
                ]
            },
            "name": "ActualizarInterfaz",
            "designerId": "8268583c-8eb2-45ea-b102-e40ff5328861"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "FinalizaTraspasos",
                "implHandler": [
                    "        Ext.Msg.confirm(\"Finalizar Pedido\", \"¿Desea finalizar el pedido \" + button.currentRecord.clavePedido,",
                    "        function(buttonId){",
                    "            if (buttonId == 'yes'){",
                    "                var winBusquedaCompra = Ext.WindowManager.get(\"wndDetallePedidos2\");",
                    "                var el = winBusquedaCompra.getEl();",
                    "                el.mask('Finalizando pedido, por favor espere');",
                    "                var request = new Object(); request.method=\"finalizapedidos\"; request.params=[];",
                    "                request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "                request.params.push({\"name\":\"pedido\",\"value\":Ext.encode(button.currentRecord)});",
                    "                almacen.getApplication().loadData(request,function(response){",
                    "                    el.unmask();",
                    "                    if (Ext.WindowManager.get(\"wndDetallePedidos2\"))",
                    "                        Ext.WindowManager.get(\"wndDetallePedidos2\").close();",
                    "                    //Ext.ComponentMgr.get(\"comboProveedor\").getPicker().loadMask.hide();",
                    "                    Ext.ComponentMgr.get(\"gridContainer\").up().getController().ActualizarInterfaz();",
                    "                });",
                    "            }",
                    "        });"
                ]
            },
            "name": "FinalizaTraspasos",
            "designerId": "9c818a5c-fd99-44d0-8dec-45fdf82f8142"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "clock",
                "implHandler": [
                    "var runner = new Ext.util.TaskRunner(),",
                    "    clock, updateClock, task;",
                    "",
                    "/*clock = Ext.getBody().appendChild({",
                    "    id: 'clock'",
                    "});*/",
                    "",
                    "",
                    "//window.task",
                    "// Start a simple clock task that updates a div once per second",
                    "updateClock = function() {",
                    "    var request = new Object(); request.method=\"leesucursalespedidos\"; request.params=[];",
                    "    request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "    almacen.getApplication().loadData(request,function(response){",
                    "        if(response.status || response.clave !== ''){",
                    "            var clock = Ext.ComponentMgr.get(\"clock\");",
                    "            //clock.setText(text + response.clave);",
                    "            //clock.setHtml(text + response.clave);",
                    "            clock.update(\"Sucursales con pedidos realizados: \" + response.clave);",
                    "        }",
                    "    });",
                    "};",
                    "",
                    "task = runner.newTask({",
                    "    run: updateClock,",
                    "    interval:180000 ",
                    "});",
                    "",
                    "task.start();"
                ]
            },
            "name": "clock",
            "designerId": "efc31b66-25f4-4939-8e0d-0f68fdb7fbe3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "cerrarVentanas",
                "implHandler": [
                    "if (Ext.WindowManager.get(\"wndDetallePedidos2\"))",
                    "    Ext.WindowManager.get(\"wndDetallePedidos2\").close();",
                    "",
                    "if (Ext.WindowManager.get(\"wndConsultaPedidos2\"))",
                    "    Ext.WindowManager.get(\"wndConsultaPedidos2\").close();",
                    ""
                ]
            },
            "name": "cerrarVentanas",
            "designerId": "ea23f9d6-7eb2-4711-af08-ee72e4363690"
        }
    ]
}