{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "currentCompra": "`null`",
        "designer|userAlias": "panelcompras",
        "designer|userClassName": "panelcomprasViewController"
    },
    "configAlternates": {
        "currentDataCompra": "object"
    },
    "designerId": "7a2b110f-d0a4-4c39-8598-8634078f8f26",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "currentCompra",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "currentDataCompra",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboProveedor",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "loadProveedores",
                "implHandler": [
                    "var request = new Object(); request.method=\"impuestos\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    cmbStore = Ext.StoreManager.get(\"StoreComboImpuestos\");",
                    "    cmbStore.loadData(response.items);",
                    "    //Ext.ComponentMgr.get(\"comboImpuesto\").getPicker().loadMask.hide();",
                    "",
                    "    var request = new Object(); request.method=\"listaieps\"; request.params=[];",
                    "    request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "    almacen.getApplication().loadData(request,function(response){",
                    "        cmbStore = Ext.StoreManager.get(\"StoreTasasIEPS\");",
                    "        cmbStore.loadData(response);",
                    "        var request = new Object(); request.method=\"proveedores\"; request.params=[];",
                    "        request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "        almacen.getApplication().loadData(request,function(response){",
                    "            component.getStore().loadData(response.proveedores);",
                    "            component.getStore().sort('nombreProveedor','ASC');",
                    "            //Ext.ComponentMgr.get(\"comboProveedor\").getPicker().loadMask.hide();",
                    "            var request = new Object(); request.method=\"impuestosie\"; request.params=[];",
                    "            request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "            almacen.getApplication().loadData(request,function(response){",
                    "                cmbStore = Ext.StoreManager.get(\"StoreComboIE\");",
                    "                cmbStore.loadData(response.items);",
                    "            });",
                    "        });",
                    "    });",
                    "});"
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "name": "loadProveedores",
            "designerId": "9d04044f-bef1-4c9a-a9e4-ba700935d6f4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboProveedor",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "filtraProveedor",
                "implHandler": [
                    "console.log(\"filtrando proveedores\");",
                    "queryPlan.query = new RegExp(queryPlan.query, 'i');",
                    "         queryPlan.forceAll = true;"
                ],
                "name": "beforequery",
                "scope": "me"
            },
            "name": "filtraProveedor",
            "designerId": "2336edb2-4d82-4b6e-a1b9-7631430a2f68"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboTipoPago",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "loadTipoPago",
                "implHandler": [
                    "             var request = new Object(); request.method=\"tipospago\"; request.params=[];",
                    "                            request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "                            almacen.getApplication().loadData(request,function(response){",
                    "                                component.getStore().loadData(response.items);",
                    "                                component.getStore().sort('nombreProveedor','ASC');",
                    "                                component.getStore().fireEvent('load', component.getStore(), [], true, {});",
                    "                                //Ext.ComponentMgr.get(\"comboTipoPago\").getPicker().loadMask.hide();",
                    "",
                    "                            });"
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "name": "loadTipoPago",
            "designerId": "73c6c824-8297-469b-8b0e-0e2376965027"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboClasificacion",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "loadClasificacion",
                "implHandler": [
                    "                            var request = new Object(); request.method=\"clasificaciones\"; request.params=[];",
                    "                            request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "                            almacen.getApplication().loadData(request,function(response){",
                    "                            component.getStore().loadData(response.productos);",
                    "                            component.getStore().sort('nombreproducto','ASC');",
                    "                                //Ext.ComponentMgr.get(\"comboClasificacion\").getPicker().loadMask.hide();",
                    "",
                    "                            });"
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "name": "loadClasificacion",
            "designerId": "f88332d6-ab16-4f60-88b4-6625ecff2a79"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboClasificacion",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "loadComboProductos",
                "implHandler": [
                    "console.log(\"loadComboProdutos\");",
                    "var request = new Object(); request.method=\"productoscompra\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId},",
                    "                    {\"name\":\"clasificacion\",\"value\":combo.getValue()});",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    Ext.ComponentMgr.get(\"comboProductos\").getStore().loadData(response.productos);",
                    "    Ext.ComponentMgr.get(\"comboProductos\").getStore().sort('nombreproducto','ASC');",
                    "    //Ext.ComponentMgr.get(\"comboProducto\").getPicker().loadMask.hide();",
                    "    for(var a in Ext.ComponentMgr.get(\"comboProductos\").getStore()){",
                    "        console.log(\"a: \" + a );",
                    "    }",
                    "",
                    "});"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "loadComboProductos",
            "designerId": "6e9fb589-a986-4692-a6a7-bb1459a2add7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboTipoPago",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "revisaTipoPago",
                "implHandler": [
                    "if(combo.getValue()=='17'){",
                    "    Ext.ComponentMgr.get(\"labelTCValue\").getEl().show();",
                    "    Ext.ComponentMgr.get(\"labelTC\").getEl().show();",
                    "}else{",
                    "    Ext.ComponentMgr.get(\"labelTCValue\").getEl().hide();",
                    "    Ext.ComponentMgr.get(\"labelTC\").getEl().hide();",
                    "}"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "revisaTipoPago",
            "designerId": "bc422009-d5d7-4ac7-a791-39a36c5eab1a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboProveedor",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "loadProductosProveedores",
                "implHandler": [
                    "console.log(\"loadProductosProveedores\");",
                    "if(window.AjustesRealizados !== null){",
                    "    console.log(\"Ya existen ajustes\");",
                    "    window.AjustesRealizadosCompras = {}; //Se limpian los ajustes",
                    "}else{",
                    "    console.log(\"Sin ajustes\");",
                    "}",
                    "",
                    "var request = new Object(); request.method=\"productoscompra\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId},",
                    "                    {\"name\":\"proveedor\",\"value\":combo.getValue()});",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    console.log(response);",
                    "    Ext.ComponentMgr.get(\"gridproductos\").getStore().removeAll();",
                    "    Ext.ComponentMgr.get(\"gridproductos\").getStore().loadData(response.productos);",
                    "    Ext.ComponentMgr.get(\"gridproductos\").getStore().sort('nombreproducto','ASC');",
                    "});"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "loadProductosProveedores",
            "designerId": "a94797c9-9547-473e-8027-c74ee0bd480f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboClasificacion",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "filtraClasificaciones",
                "implHandler": [
                    "                queryPlan.query = new RegExp(queryPlan.query, 'i');",
                    "                 queryPlan.forceAll = true;"
                ],
                "name": "beforequery",
                "scope": "me"
            },
            "name": "filtraClasificaciones",
            "designerId": "19e9825a-55e3-4753-894c-605ecfdc87ca"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboProductos",
                "designer|targetType": "Ext.form.field.Tag",
                "fn": "filtraProductos",
                "implHandler": [
                    "queryPlan.query = new RegExp(queryPlan.query, 'i');",
                    "queryPlan.forceAll = true;"
                ],
                "name": "beforequery",
                "scope": "me"
            },
            "name": "filtraProductos",
            "designerId": "504c017c-e404-412b-93fb-8afac6277090"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#addProductoCompra",
                "designer|targetType": "Ext.button.Button",
                "fn": "agregaProductos",
                "implHandler": [
                    "var recs = Ext.ComponentMgr.get(\"comboProductos\").getValueRecords();",
                    "console.log(recs);",
                    "var recsAgregar = [];",
                    "for (var i = 0;i < recs.length;i++){",
                    "    console.log(\"Count del store: \" + Ext.ComponentMgr.get(\"gridproductos\").getStore().getCount());",
                    "    if (Ext.ComponentMgr.get(\"gridproductos\").getStore().getCount() > 0){",
                    "        var agrega = true;",
                    "        Ext.ComponentMgr.get(\"gridproductos\").getStore().each(function(record, id){",
                    "",
                    "            console.log(\"comparando \" + recs[i].get(\"claveproducto\") + \" con \" + record.get(\"claveproducto\") + \" = \"+ record.get(\"claveproducto\").indexOf(recs[i].get(\"claveproducto\")) < 0);",
                    "            if (record.get(\"claveproducto\") == recs[i].get(\"claveproducto\")){",
                    "                agrega=false;",
                    "            }",
                    "        });",
                    "        if (agrega){",
                    "            recsAgregar.push(recs[i]);",
                    "            Ext.ComponentMgr.get(\"gridproductos\").getStore().loadData([recs[i]], true);",
                    "        }",
                    "    }else{",
                    "        recsAgregar.push(recs[i]);",
                    "        Ext.ComponentMgr.get(\"gridproductos\").getStore().loadData([recs[i]], true);",
                    "    }",
                    "",
                    "}",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().sort('nombreproducto','ASC');",
                    "//Ext.ComponentMgr.get(\"gridproductos\").getStore().loadData(recsAgregar, true);",
                    "Ext.ComponentMgr.get(\"comboProductos\").records = [];",
                    "Ext.ComponentMgr.get(\"comboProductos\").clearValue();",
                    "//Ext.ComponentMgr.get(\"gridproductos\").getStore().sort('nombreproducto','ASC');"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "agregaProductos",
            "designerId": "f3123a0e-c5de-4e1b-b30a-efc5489f538f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "calculaImportesTotales",
                "implHandler": [
                    "console.log(\"calculaImportesTotales\");",
                    "var Iva = 0.0;",
                    "var Descuento = 0.0;",
                    "var PrecioU = 0.0;",
                    "var Cantidad = 0.0;",
                    "var Total = 0.0;",
                    "var SubTotal = 0.0;",
                    "var IvaAplicado = 0.0;",
                    "var DescuentoAplicado = 0.0;",
                    "var IEPS = 0.0;",
                    "var IE = 0.0;",
                    "var ieAplicado=0.0;",
                    "",
                    "//var TotalGeneral = 0.0;",
                    "",
                    "PrecioU = record.get(\"costoUnitario\");",
                    "Cantidad = record.get(\"cantidad\");",
                    "Descuento = record.get(\"Descuento\");",
                    "Iva = record.get(\"Impuesto\");",
                    "IE = record.get(\"ie\");",
                    "/* console.log(\"precio \" + PrecioU);",
                    "                console.log(\"cantidad \" + Cantidad);",
                    "                console.log(\"descuento \" + Descuento);",
                    "                console.log(\"iva \" + Iva);*/",
                    "",
                    "SubTotal = (Cantidad  * PrecioU);",
                    "DescuentoAplicado = (SubTotal * (Descuento / 100));",
                    "",
                    "//Calcula IE",
                    "ieAplicado= (SubTotal - DescuentoAplicado) * (IE / 100);",
                    "",
                    "console.log(\"Cantidad: \" + Cantidad);",
                    "console.log(\"PrecioU: \" +  parseFloat(PrecioU));",
                    "",
                    "if (record.get(\"tasa\")){",
                    "    IEPS = almacen.getApplication().calculaIEPS(record.get(\"tasa\"), Cantidad, PrecioU, Descuento, Iva);",
                    "    //SubTotal += IEPS;",
                    "}",
                    "",
                    "IvaAplicado = (((SubTotal - DescuentoAplicado) + IEPS + ieAplicado)  * (Iva / 100));",
                    "",
                    "console.log(\"SubTotal: \" + SubTotal);",
                    "console.log(\"DescuentoAplicado: \" + DescuentoAplicado);",
                    "console.log(\"Iva: \" + Iva);",
                    "console.log(\"IEPS: \" + IEPS);",
                    "console.log(\"(Iva / 100): \"+(Iva / 100));",
                    "",
                    "//Total = (SubTotal - DescuentoAplicado) + (IvaAplicado + IEPS);",
                    "Total = (SubTotal - DescuentoAplicado) + (IvaAplicado + IEPS + ieAplicado);",
                    "",
                    "console.log(\"IvaAplicado: \" + IvaAplicado);",
                    "",
                    "var ProporcionAplicar = 0.0;",
                    "ProporcionAplicar = record.get(\"Proporcion\") * Cantidad;",
                    "record.beginEdit();",
                    "record.set(\"importe\", Total);",
                    "record.set(\"ProporcionAplicar\", ProporcionAplicar);",
                    "record.endEdit();",
                    "record.commit();",
                    "console.log(\"Total  \" + Total);"
                ]
            },
            "name": "calculaImportesTotales",
            "designerId": "99963a4a-2433-460c-80b6-0c9b3a115f00"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#descuentoCantidadValue",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaDescuentoCantidad",
                "implHandler": [
                    "if (e.getKey()==Ext.event.Event.ENTER){",
                    "    this.AplicarDescuento(true);",
                    "}"
                ],
                "name": "keyup",
                "scope": "me"
            },
            "name": "aplicaDescuentoCantidad",
            "designerId": "ecff0d6f-bc1c-44a5-bc07-bb4e7384dc8b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#totalRetencionesValue",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaRetencionesCantidad",
                "implHandler": [
                    "if (e.getKey()==Ext.event.Event.ENTER){",
                    "    console.log(\"triggerEanter\");",
                    "    this.AplicarRetenciones();",
                    "}"
                ],
                "name": "keyup",
                "scope": "me"
            },
            "name": "aplicaRetencionesCantidad",
            "designerId": "1eec9db4-54d3-46db-a4c9-2851bd462258"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#totalRetencionesIVA",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaRetencionesCantidadIVA",
                "implHandler": [
                    "if (e.getKey()==Ext.event.Event.ENTER){",
                    "    console.log(\"triggerEanter\");",
                    "    this.AplicarRetenciones();",
                    "}"
                ],
                "name": "keyup",
                "scope": "me"
            },
            "name": "aplicaRetencionesCantidadIVA",
            "designerId": "9b6cdb0d-3d8a-4187-a579-97aadaaf7c7c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#totalRetencionesISR",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaRetencionesCantidadISR",
                "implHandler": [
                    "if (e.getKey()==Ext.event.Event.ENTER){",
                    "    console.log(\"triggerEanter\");",
                    "    this.AplicarRetenciones();",
                    "}"
                ],
                "name": "keyup",
                "scope": "me"
            },
            "name": "aplicaRetencionesCantidadISR",
            "designerId": "ece10b05-9e75-43f2-bafd-7310336a4832"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#totalRetencionesIEPS",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaRetencionesCantidadIEPS",
                "implHandler": [
                    "if (e.getKey()==Ext.event.Event.ENTER){",
                    "    console.log(\"triggerEanter\");",
                    "    this.AplicarRetenciones();",
                    "}"
                ],
                "name": "keyup",
                "scope": "me"
            },
            "name": "aplicaRetencionesCantidadIEPS",
            "designerId": "a74f52c3-c75a-4d56-8b70-484fdb1edba5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#totalRetencionesValue",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaRetencionesCantidadBlur",
                "implHandler": [
                    "",
                    "    this.AplicarRetenciones();"
                ],
                "name": "blur",
                "scope": "me"
            },
            "name": "aplicaRetencionesCantidadBlur",
            "designerId": "41e58e30-8351-4393-af44-e68da24d41bf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#totalRetencionesIVA",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaRetencionesCantidadBlurIVA",
                "implHandler": [
                    "",
                    "    this.AplicarRetenciones();"
                ],
                "name": "blur",
                "scope": "me"
            },
            "name": "aplicaRetencionesCantidadBlurIVA",
            "designerId": "40765836-fa7e-44fb-a9c4-296f5f9ad9d2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#totalRetencionesISR",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaRetencionesCantidadBlurISR",
                "implHandler": [
                    "",
                    "    this.AplicarRetenciones();"
                ],
                "name": "blur",
                "scope": "me"
            },
            "name": "aplicaRetencionesCantidadBlurISR",
            "designerId": "4aadb650-35ca-458c-b9e7-ec3954f08fd3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#totalRetencionesIEPS",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaRetencionesCantidadBlurIEPS",
                "implHandler": [
                    "",
                    "    this.AplicarRetenciones();"
                ],
                "name": "blur",
                "scope": "me"
            },
            "name": "aplicaRetencionesCantidadBlurIEPS",
            "designerId": "8d34c03e-0bbd-4934-ac2e-85a79731c5a6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "monto"
                ],
                "fn": "AplicarDescuento",
                "implHandler": [
                    "var cantidad =0.0;",
                    "//////debugger;",
                    "var currentContext = this;",
                    "var store =  Ext.ComponentMgr.get(\"gridproductos\").getStore();",
                    "if (monto){",
                    "    cantidad=Ext.ComponentMgr.get(\"descuentoCantidadValue\").getValue();",
                    "    if (!(cantidad > 0)){",
                    "        Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setValue(\"0\");",
                    "        store.each(function(record,id){",
                    "            if (record.get(\"cantidad\") > 0){",
                    "                record.set(\"Descuento\",0);",
                    "                currentContext.calculaImportesTotales(record);",
                    "            }",
                    "        });",
                    "        return;",
                    "    }",
                    "}else{",
                    "    cantidad=Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").getValue();",
                    "    if (!(cantidad > 0)) {",
                    "        Ext.ComponentMgr.get(\"descuentoCantidadValue\").setValue(\"0\");",
                    "        store.each(function(record,id){",
                    "            if (record.get(\"cantidad\") > 0){",
                    "                record.set(\"Descuento\",0);",
                    "                currentContext.calculaImportesTotales(record);",
                    "            }",
                    "        });",
                    "        return;",
                    "    }",
                    "}",
                    "",
                    "",
                    "var TotalGeneral = 0.0;",
                    "var PctjeDescuento = 0.0;",
                    "var MontoDescuento = 0.0;",
                    "",
                    "store.each(function(record,id){",
                    "    if (record.get(\"cantidad\") > 0){",
                    "        record.set(\"Descuento\",0);",
                    "        currentContext.calculaImportesTotales(record);",
                    "    }",
                    "});",
                    "",
                    "",
                    "store.each(function(record,id){",
                    "    //TotalGeneral+=(record.get(\"cantidad\") * record.get(\"costoUnitario\"));",
                    "    TotalGeneral+=(record.get(\"importe\"));",
                    "});",
                    "",
                    "console.log(\"TotalGeneral \" + TotalGeneral);",
                    "console.log(\"monto \" + monto);",
                    "console.log(\"cantidad \" + cantidad);",
                    "if (TotalGeneral > 0){",
                    "    if (monto){",
                    "",
                    "",
                    "        MontoDescuento = cantidad;",
                    "        MontoDescuento = MontoDescuento > TotalGeneral ? Total : MontoDescuento;",
                    "        PctjeDescuento = (MontoDescuento / TotalGeneral) * 100;",
                    "    }else{",
                    "",
                    "        PctjeDescuento = cantidad;",
                    "        PctjeDescuento = PctjeDescuento > 100 ? 100 : PctjeDescuento;",
                    "        MontoDescuento = ((PctjeDescuento * TotalGeneral) / 100);",
                    "    }",
                    "",
                    "    Ext.ComponentMgr.get(\"descuentoCantidadValue\").setValue(MontoDescuento);",
                    "    Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setValue(PctjeDescuento);",
                    "    store.each(function(record,id){",
                    "        if (record.get(\"cantidad\") > 0){",
                    "            record.set(\"Descuento\",PctjeDescuento);",
                    "            currentContext.calculaImportesTotales(record);",
                    "        }",
                    "    });",
                    "",
                    "",
                    "}"
                ]
            },
            "name": "AplicarDescuento",
            "designerId": "2ed8fae1-a7a7-47ad-be61-2eb6c592acf5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#descuentoCantidadValue",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaDescuentoCantidadBlur",
                "implHandler": [
                    "this.AplicarDescuento(true);"
                ],
                "name": "blur",
                "scope": "me"
            },
            "name": "aplicaDescuentoCantidadBlur",
            "designerId": "4702e78b-4f59-496d-a91c-0f4fdab44bca"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#descuentoPorcentajeValue",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaDescuentoPorcentaje",
                "implHandler": [
                    "if (e.getKey()==Ext.event.Event.ENTER){",
                    "                        this.AplicarDescuento(false);",
                    "                    }"
                ],
                "name": "keyup",
                "scope": "me"
            },
            "name": "aplicaDescuentoPorcentaje",
            "designerId": "cb1efe02-8deb-44be-88a5-d68335b825a9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#descuentoPorcentajeValue",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaDescuentoPorcentajeBlur",
                "implHandler": [
                    "",
                    "    this.AplicarDescuento(false);"
                ],
                "name": "blur",
                "scope": "me"
            },
            "name": "aplicaDescuentoPorcentajeBlur",
            "designerId": "be45071e-7297-4220-acf7-fab03c2a62f3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "validaGuardarCompra",
                "implHandler": [
                    "",
                    "var ErrMsg=\"\";",
                    "var totalManual = 0;",
                    "if (!Ext.ComponentMgr.get(\"comboProveedor\").isValid()){",
                    "",
                    "    ErrMsg+=\" Seleccione un proveedor\";",
                    "}",
                    "",
                    "if (!Ext.ComponentMgr.get(\"comboTipoPago\").isValid()){",
                    "",
                    "    ErrMsg+=\" Seleccione un tipo de pago\";",
                    "}",
                    "",
                    "if(window.habilitaValidacionTotal){",
                    "    console.log(Ext.ComponentMgr.get(\"comboTotalManual\"));",
                    "    var val = Ext.ComponentMgr.get(\"comboTotalManual\");",
                    "    if(val){",
                    "        if (Ext.ComponentMgr.get(\"comboTotalManual\").getValue() >= 0){",
                    "            totalManual = Ext.ComponentMgr.get(\"comboTotalManual\").getValue();",
                    "            console.log(\"panelCompras/validaGuardarCompra - totalManual: \" + totalManual);",
                    "        } else{",
                    "            ErrMsg+=\"Ingrese el total manualmente.\";",
                    "        }",
                    "    }  else{",
                    "            ErrMsg+=\"Ingrese el total manualmente.\";",
                    "    }",
                    "}",
                    "",
                    "if(Ext.ComponentMgr.get(\"comboTipoPago\").getValue()=='17'){",
                    "    if(!Ext.ComponentMgr.get(\"labelTCValue\").getValue()){",
                    "        ErrMsg+=\" Ingrese los 4 digitos de la Tarjeta de Credito\";",
                    "    }else{",
                    "        if(Ext.ComponentMgr.get(\"labelTCValue\").getValue().toString().length!=4){",
                    "            ErrMsg+=\" Ingrese los 4 digitos de la Tarjeta de Credito\";",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "if (ErrMsg > \" \"){",
                    "    Ext.Msg.show({",
                    "        title:'Verificar',",
                    "        message: ErrMsg,",
                    "        buttons: Ext.Msg.OK,",
                    "        icon: Ext.Msg.QUESTION,",
                    "        fn: function(btn) {",
                    "",
                    "        }",
                    "    });",
                    "",
                    "}else{",
                    "",
                    "    var recsAgregar = [];",
                    "    var totalCompra = 0.0;",
                    "",
                    "    Ext.ComponentMgr.get(\"gridproductos\").getStore().each(function(record,id){",
                    "",
                    "        totalCompra +=  record.get(\"importe\"); // sumamos los totales individuales",
                    "        //console.log(\"record.get(IMPORTE)\" + Ext.util.Format.currency(record.get(\"importe\")));",
                    "",
                    "",
                    "        if (record.get(\"cantidad\") > 0){",
                    "            if(record.get(\"costominimo\") > 0||record.get(\"costomaximo\") > 0){",
                    "                if(record.get(\"costoUnitario\") < record.get(\"costominimo\")||record.get(\"costoUnitario\") > record.get(\"costomaximo\")){",
                    "                    recsAgregar.push(record);",
                    "                }",
                    "            }",
                    "",
                    "        }",
                    "    });",
                    "",
                    "    totalretenciones = Ext.ComponentMgr.get(\"totalRetencionesValue\").getValue();",
                    "",
                    "    if(totalretenciones){",
                    "        totalCompra -= totalretenciones;",
                    "    }",
                    "",
                    "    totalCompra = (Math.round(totalCompra * 100) / 100); // redondeo a dos DIGITOS",
                    "    console.log(\"El importe total de la compra es: \" + totalCompra);",
                    "",
                    "",
                    "    if (totalManual == totalCompra || totalManual === 0){ // totalManual en 0 indica que no esta activa la validacion",
                    "",
                    "",
                    "        if (recsAgregar.length > 0){",
                    "",
                    "            //mostramos la validacion",
                    "",
                    "            var wnd = Ext.create(\"almacen.view.DlgPreciosAlerta\");",
                    "            wnd.parentController=this;",
                    "            wnd.center();",
                    "            wnd.show();",
                    "            Ext.ComponentMgr.get(\"gridProductosPrecios\").getStore().loadData(recsAgregar);",
                    "        }else{",
                    "            this.guardaCompra();",
                    "        }",
                    "    }else{",
                    "        Ext.Msg.show({",
                    "            title:'Verificar',",
                    "            message: \"La cantidad ingresada manualmente y la generada por el sistema no coinciden, verifique.\",",
                    "            buttons: Ext.Msg.OK,",
                    "            icon: Ext.Msg.QUESTION,",
                    "            fn: function(btn) {",
                    "",
                    "            }",
                    "        });",
                    "    }",
                    "}",
                    ""
                ]
            },
            "name": "validaGuardarCompra",
            "designerId": "1e90a793-a383-4135-b9e0-82eec8af82d6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "guardaCompra",
                "implHandler": [
                    "var factura=0;",
                    "var currentController=this;",
                    "",
                    "",
                    "if (Ext.ComponentMgr.get(\"comboNoFactura\").getValue() > \" \"){",
                    "    factura = Ext.ComponentMgr.get(\"comboNoFactura\").getValue();",
                    "}",
                    "if (this.currentDataCompra != null){",
                    "    if (this.currentDataCompra.compra.solofolio){",
                    "",
                    "        var request = new Object(); request.method=\"cambiafolio\"; request.params=[];",
                    "        request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "        request.params.push({\"name\":\"clavecompra\",\"value\":this.currentDataCompra.compra.numero});",
                    "        request.params.push({\"name\":\"folio\",\"value\":factura});",
                    "        almacen.getApplication().loadData(request,function(response){",
                    "            currentController.limpiarCompra();",
                    "        });",
                    "    }else{",
                    "        return;",
                    "",
                    "    }",
                    "",
                    "}else{",
                    "    var responseGuardaCompra = {};",
                    "    var responseCompra = {};",
                    "    var store =  Ext.ComponentMgr.get(\"gridproductos\").getStore();",
                    "",
                    "    var dateN=new Date();",
                    "    var dateC=Ext.getCmp('dtFechaValue').getValue();",
                    "",
                    "    if(dateC>dateN){",
                    "",
                    "        Ext.Msg.show({",
                    "            title:'Verificar',",
                    "            message: \"La fecha de compra no puede ser mayor a la fecha actual.\",",
                    "            buttons: Ext.Msg.OK,",
                    "            icon: Ext.Msg.ERROR,",
                    "            fn: function(btn) {",
                    "",
                    "            }",
                    "        });",
                    "        return;",
                    "",
                    "    }",
                    "",
                    "    var fechaC=Ext.util.Format.date(Ext.getCmp('dtFechaValue').getValue(), 'Y/m/d');",
                    "",
                    "    fechaC=fechaC + \" \" + \"00:00:00\";",
                    "",
                    "    console.log(\"Fecha Seleccionada\", fechaC);",
                    "",
                    "    var TotalGeneral = 0.0;",
                    "    var productosData = [];",
                    "",
                    "    store.each(function(record,id){",
                    "        if (record.get(\"cantidad\") > 0){",
                    "            currentProducto = {};",
                    "            currentProducto.Impuesto = record.get(\"Impuesto\");",
                    "            currentProducto.costoUnitario = record.get(\"costoUnitario\");",
                    "            currentProducto.nombreproducto = record.get(\"nombreproducto\");",
                    "            currentProducto.cantidad = record.get(\"cantidad\");",
                    "            currentProducto.Proporcion = record.get(\"Proporcion\");",
                    "            currentProducto.importe = record.get(\"importe\");",
                    "            currentProducto.Descuento = record.get(\"Descuento\");",
                    "            currentProducto.unidad = record.get(\"unidad\");",
                    "            currentProducto.ProporcionAplicar = record.get(\"ProporcionAplicar\");",
                    "            currentProducto.minimo = record.get(\"minimo\");",
                    "            currentProducto.maximo = record.get(\"maximo\");",
                    "            currentProducto.costomaximo = record.get(\"costomaximo\");",
                    "            currentProducto.costominimo = record.get(\"costominimo\");",
                    "            currentProducto.claveproducto=record.get(\"claveproducto\");",
                    "            currentProducto.idTasa = record.get(\"idTasa\");",
                    "            currentProducto.tasa = record.get(\"tasa\");",
                    "            currentProducto.ie = record.get(\"ie\");",
                    "            productosData.push(currentProducto);",
                    "        }",
                    "    });",
                    "",
                    "    responseCompra.Total=TotalGeneral;",
                    "    responseCompra.digitosTarjetaCredito=Ext.ComponentMgr.get(\"labelTCValue\").getValue();",
                    "    responseCompra.claveproveedor=Ext.ComponentMgr.get(\"comboProveedor\").getValue();",
                    "    responseCompra.tipopago=Ext.ComponentMgr.get(\"comboTipoPago\").getValue();",
                    "    responseCompra.numeroFactura=factura;",
                    "    responseGuardaCompra.productos=productosData;",
                    "    responseGuardaCompra.compra=responseCompra;",
                    "    responseCompra.claveusuario=almacen.getApplication().ClaveUsuario;",
                    "    ////////debugger;",
                    "    responseCompra.fechaedicion=\"\"; //almacen.getApplication().getToday();",
                    "    responseCompra.usuarioasigna=\"\";",
                    "    responseCompra.totalRetenciones = Ext.ComponentMgr.get(\"totalRetencionesValue\").getValue() ? Ext.ComponentMgr.get(\"totalRetencionesValue\").getValue() : 0 ;",
                    "    responseCompra.totalRetencionesIVA = Ext.ComponentMgr.get(\"totalRetencionesIVA\").getValue() ? Ext.ComponentMgr.get(\"totalRetencionesIVA\").getValue() : 0;",
                    "    responseCompra.totalRetencionesISR = Ext.ComponentMgr.get(\"totalRetencionesISR\").getValue() ? Ext.ComponentMgr.get(\"totalRetencionesISR\").getValue() : 0;",
                    "    responseCompra.totalRetencionesIEPS = Ext.ComponentMgr.get(\"totalRetencionesIEPS\").getValue() ? Ext.ComponentMgr.get(\"totalRetencionesIEPS\").getValue() : 0;",
                    "    var currentController = this;",
                    "    var request = new Object(); request.method=\"compras\"; request.params=[];",
                    "    request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "    request.params.push({\"name\":\"COMPRA\",\"value\":Ext.encode(responseGuardaCompra)});",
                    "    request.params.push({\"name\":\"FECHA\",\"value\":fechaC});",
                    "    if (window.currentCompraXML){",
                    "        request.params.push({\"name\":\"factura\",\"value\":Ext.encode(window.currentCompraXML)});",
                    "    }",
                    "",
                    "",
                    "",
                    "    console.log(\"request\");console.log(request);",
                    "    almacen.getApplication().loadData(request,function(response){",
                    "        console.log(response);",
                    "        almacen.getApplication().downloadCompra(response.clave, \"printcompra\");",
                    "        currentController.limpiarCompra();",
                    "        window.AjustesRealizadosCompras = {}; //limpiar los ajustes",
                    "    });",
                    "}",
                    ""
                ]
            },
            "name": "guardaCompra",
            "designerId": "877663ab-fdd9-438e-b619-60f47815e357"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "limpiarCompra",
                "implHandler": [
                    "",
                    "this.currentDataCompra=null;",
                    "Ext.ComponentMgr.get(\"lblNoCompra\").setText(\" \");",
                    "//Ext.ComponentMgr.get(\"totalRetencionesValue\").setReadOnly(false);",
                    "Ext.ComponentMgr.get(\"totalRetencionesIVA\").setReadOnly(false);",
                    "Ext.ComponentMgr.get(\"totalRetencionesISR\").setReadOnly(false);",
                    "Ext.ComponentMgr.get(\"totalRetencionesIEPS\").setReadOnly(false);",
                    "",
                    "Ext.ComponentMgr.get(\"totalRetencionesValue\").setValue(\"\"); // Debe ser el primero para que al momento de quitar los productos el total sea el correcto y no vaya a negativo",
                    "Ext.ComponentMgr.get(\"totalRetencionesIVA\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"totalRetencionesISR\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"totalRetencionesIEPS\").setValue(\"\");",
                    "",
                    "Ext.ComponentMgr.get(\"addProductoCompra\").setDisabled(false);",
                    "Ext.ComponentMgr.get(\"cleanProductoCompra\").setDisabled(false);",
                    "Ext.ComponentMgr.get(\"comboNoFactura\").setReadOnly(false);",
                    "Ext.ComponentMgr.get(\"comboProveedor\").setReadOnly(false);",
                    "Ext.ComponentMgr.get(\"comboTipoPago\").setReadOnly(false);",
                    "//Ext.ComponentMgr.get(\"gridproductos\").setReadOnly(false);",
                    "Ext.ComponentMgr.get(\"descuentoCantidad\").setDisabled(false);",
                    "Ext.ComponentMgr.get(\"descuentoCantidadValue\").setDisabled(false);",
                    "Ext.ComponentMgr.get(\"descuentoPorcentaje\").setDisabled(false);",
                    "Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setDisabled(false);",
                    "Ext.ComponentMgr.get(\"pagarCompra\").setDisabled(false);",
                    "Ext.ComponentMgr.get(\"cancelarCompra\").setDisabled(false);",
                    "Ext.ComponentMgr.get(\"comboNoFactura\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"comboTotalManual\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"comboProveedor\").clearValue();",
                    "Ext.ComponentMgr.get(\"comboTipoPago\").clearValue();",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().removeAll();",
                    "Ext.ComponentMgr.get(\"descuentoCantidadValue\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"comboProductos\").clearValue();",
                    "Ext.ComponentMgr.get(\"comboClasificacion\").clearValue();",
                    "Ext.ComponentMgr.get(\"comboProductos\").setReadOnly(false);",
                    "Ext.ComponentMgr.get(\"comboClasificacion\").setReadOnly(false);",
                    "Ext.ComponentMgr.get(\"lblNoCompra\").setText('');",
                    "this.readOnly = false;",
                    "window.currentCompraXML=null;",
                    "this.currentCompra=0;"
                ]
            },
            "name": "limpiarCompra",
            "designerId": "c3798144-cb74-445e-befd-6bd18636a151"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "data"
                ],
                "fn": "cargarCompra",
                "implHandler": [
                    "console.log(data);",
                    "Ext.ComponentMgr.get(\"addProductoCompra\").setDisabled(true);",
                    "// Ext.ComponentMgr.get(\"cleanProductoCompra\").setDisabled(true);",
                    "Ext.ComponentMgr.get(\"comboNoFactura\").setReadOnly(!data.compra.solofolio);",
                    "Ext.ComponentMgr.get(\"comboProveedor\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"comboTipoPago\").setReadOnly(true);",
                    "//Ext.ComponentMgr.get(\"gridproductos\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"descuentoCantidad\").setDisabled(true);",
                    "Ext.ComponentMgr.get(\"descuentoCantidadValue\").setDisabled(true);",
                    "Ext.ComponentMgr.get(\"descuentoPorcentaje\").setDisabled(true);",
                    "Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setDisabled(true);",
                    "Ext.ComponentMgr.get(\"pagarCompra\").setDisabled(!data.compra.solofolio);",
                    "",
                    "Ext.ComponentMgr.get(\"cancelarCompra\").setDisabled(data.compra.estado<0);",
                    "if(!data.compra.puedeCancelar)Ext.ComponentMgr.get(\"cancelarCompra\").setDisabled(true);",
                    "",
                    "Ext.ComponentMgr.get(\"comboNoFactura\").setValue(data.compra.factura);",
                    "Ext.ComponentMgr.get(\"comboProveedor\").setValue(data.compra.proveedor);",
                    "Ext.ComponentMgr.get(\"comboTipoPago\").setValue(\"\"+data.compra.pago);",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().removeAll();",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().loadData(data.productos);",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().sort('nombreproducto','ASC');",
                    "Ext.ComponentMgr.get(\"descuentoCantidadValue\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"comboProductos\").clearValue();",
                    "Ext.ComponentMgr.get(\"comboClasificacion\").clearValue();",
                    "Ext.ComponentMgr.get(\"comboProductos\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"comboClasificacion\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"totalRetencionesValue\").setValue(data.compra.totalRetenciones);",
                    "Ext.ComponentMgr.get(\"totalRetencionesValue\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"totalRetencionesISR\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"totalRetencionesIVA\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"totalRetencionesIEPS\").setReadOnly(true);",
                    "this.AplicarRetenciones(); // Se usa para actualizar el total con la retenciones",
                    "Ext.ComponentMgr.get(\"lblNoCompra\").update('<font color=\"white\">Compra no:' + data.compra.numero + '</font>');",
                    "this.currentCompra=data.compra.numero;",
                    "this.currentDataCompra = data;",
                    "this.readOnly = true;"
                ]
            },
            "name": "cargarCompra",
            "designerId": "b01ac43e-e672-4e61-a16d-38028300f640"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "data",
                    "compraXML"
                ],
                "fn": "ImportaCompra",
                "implHandler": [
                    "this.limpiarCompra();",
                    "",
                    "Ext.ComponentMgr.get(\"comboNoFactura\").setValue(data.compra.factura);",
                    "Ext.ComponentMgr.get(\"comboProveedor\").setValue(data.compra.proveedor);",
                    "Ext.ComponentMgr.get(\"comboTipoPago\").setValue(\"\"+data.compra.pago);",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().removeAll();",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().loadData(data.productos);",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().sort('nombreproducto','ASC');",
                    "Ext.ComponentMgr.get(\"descuentoCantidadValue\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"comboProductos\").clearValue();",
                    "Ext.ComponentMgr.get(\"comboClasificacion\").clearValue();",
                    "Ext.ComponentMgr.get(\"comboProductos\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"comboClasificacion\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"totalRetencionesValue\").setValue(data.compra.totalRetenciones);",
                    "Ext.ComponentMgr.get(\"totalRetencionesISR\").setValue(data.compra.totalRetencionesISR);",
                    "Ext.ComponentMgr.get(\"totalRetencionesIVA\").setValue(data.compra.totalRetencionesIVA);",
                    "Ext.ComponentMgr.get(\"totalRetencionesIEPS\").setValue(data.compra.totalRetencionesIEPS);",
                    "this.AplicarRetenciones(); // Se usa para actualizar el total con la retenciones",
                    "Ext.ComponentMgr.get(\"lblNoCompra\").update('<font color=\"white\"></font>');",
                    "this.currentCompra=data.compra.numero;",
                    "",
                    "this.currentDataCompra=null;",
                    "this.readOnly = true;",
                    "if (compraXML)",
                    "    window.currentCompraXML = compraXML;",
                    "",
                    ""
                ]
            },
            "name": "ImportaCompra",
            "designerId": "bf5a052e-997c-4be1-8959-c718ed9e8756"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnBuscarCompra",
                "designer|targetType": "Ext.button.Button",
                "fn": "buscaCompra",
                "implHandler": [
                    "var currentController = this;",
                    "var request = new Object(); request.method=\"consultacompras\"; request.params=[];",
                    "                                                request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "                                                almacen.getApplication().loadData(request,function(response){",
                    "                                                     var wnd = Ext.create(\"almacen.view.DlgBusquedaCompras\", {id:\"wndBusquedaCompras\"});",
                    "                                                    wnd.parentController=currentController;",
                    "                                                    wnd.center();",
                    "                                                    wnd.show();",
                    "                                                    Ext.ComponentMgr.get(\"gridBusquedaCompras\").getStore().loadData(response.compras);",
                    "                                                    //Ext.ComponentMgr.get(\"gridBusquedaCompras\").getPicker().loadMask.hide();",
                    "                                                });"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "buscaCompra",
            "designerId": "e5bd28a5-1d1b-4b75-8197-581cfcb51cb0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnAgregar",
                "designer|targetType": "Ext.button.Button",
                "fn": "agregarProductoCompra",
                "implHandler": [
                    "var wnd = Ext.create(\"almacen.view.DlgAgregaProductos\");",
                    "wnd.center();",
                    "wnd.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "agregarProductoCompra",
            "designerId": "eb9dbb75-4af0-419c-9c2b-4cab9279e4dc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#cleanProductoCompra",
                "designer|targetType": "Ext.button.Button",
                "fn": "Limpiar2Click",
                "implHandler": [
                    "            this.limpiarCompra();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "Limpiar2Click",
            "designerId": "14217e31-afd2-48f6-828c-abf1791f9639"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#pagarCompra",
                "designer|targetType": "Ext.button.Button",
                "fn": "guardarCompraClick",
                "implHandler": [
                    "var controller = this;",
                    "var option = true; // se inicia suponiendo que esta bien",
                    "if(window.habilitaValidacionTotal){// se verifica si se tiene que validar",
                    "    option = controller.validarTasas();",
                    "}",
                    "if(option){",
                    "    console.log(\"No requiere autorizacion\");",
                    "    controller.validaGuardarCompra();",
                    "",
                    "}else{",
                    "    console.log(\"Se requiere autorizacion\"); // La compra se guardara a travez de DLGExistenciaAlertaImpuestoCambiado",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "guardarCompraClick",
            "designerId": "07538777-33c3-4af5-bf6b-3f2c37e836db"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#cancelarCompra",
                "designer|targetType": "Ext.button.Button",
                "fn": "CancelarCompraClick",
                "implHandler": [
                    " if (this.currentCompra > 0){",
                    "     var currentController=this;",
                    "     var request = new Object(); request.method=\"cancelarcompras\"; request.params=[];",
                    "     request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId},",
                    "     {\"name\":\"COMPRA\",\"value\":this.currentCompra});",
                    "     almacen.getApplication().loadData(request,function(response){",
                    "         currentController.limpiarCompra();",
                    "     });",
                    "     }"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "CancelarCompraClick",
            "designerId": "5bf451ca-1976-4852-8eb9-ade9b5d19558"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "CalculaImporteUnitario",
                "implHandler": [
                    "var Descuento = 0.0;",
                    "var PrecioU = 0.0;",
                    "var Cantidad = 0.0;",
                    "var Total = 0.0;",
                    "var SubTotal = 0.0;",
                    "var Iva = 0.0;",
                    "var DescuentoAplicado = 0.0;",
                    "var ImporteTotal=0.0;",
                    "var Ieps = 0.0;",
                    "//var TotalGeneral = 0.0;",
                    "",
                    "PrecioU = record.get(\"costoUnitario\");",
                    "Cantidad = record.get(\"cantidad\");",
                    "Descuento = record.get(\"Descuento\");",
                    "Iva = record.get(\"Impuesto\");",
                    "Total = record.get(\"importe\");",
                    "",
                    "if (Descuento >= 100)",
                    "    Descuento=0.0;",
                    "if (record.get(\"tasa\")){",
                    "    Ieps = record.get(\"tasa\")[\"ImportePctje\"];",
                    "    console.log(\"ATENCION!!!!!!!!!!! LA TASA IEPS ES ......\", Ieps);",
                    "}",
                    "",
                    "",
                    "Ext.ComponentMgr.get(\"descuentoCantidadValue\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setValue(\"\");",
                    "",
                    "PrecioU=(((Total/(1+((Iva)/100)) ) /(1+((Ieps)/100)) )/(1-(Descuento/100)))/Cantidad;//formula para calculo del costo unitarioo",
                    "record.beginEdit();",
                    "record.set(\"costoUnitario\", PrecioU);",
                    "record.set(\"Descuento\", Descuento);",
                    "",
                    "//record.set(\"ProporcionAplicar\", ProporcionAplicar);",
                    "record.endEdit();",
                    "record.commit();"
                ]
            },
            "name": "CalculaImporteUnitario",
            "designerId": "4bd51e8c-bcdc-4ae4-83d6-1c401351df11"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnHistorico",
                "designer|targetType": "Ext.button.Button",
                "fn": "buscarRegistrosHistoricos",
                "implHandler": [
                    "            var wnd = Ext.create(\"almacen.view.DlgBusquedaCompras1\", {id:\"wndBusquedaCompras1\"});",
                    "            wnd.parentController=this;",
                    "            wnd.center();",
                    "            wnd.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "buscarRegistrosHistoricos",
            "designerId": "dee8d9ea-fb45-4e63-987f-2a959d9e5d27"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnPrintCompra",
                "designer|targetType": "Ext.button.Button",
                "fn": "PrintCompra",
                "implHandler": [
                    "var currentController = this;",
                    "if (this.currentDataCompra != null){",
                    "   var tipocompra = \"printcompra\";",
                    "    if (!this.currentDataCompra.compra.puedeCancelar)tipocompra=\"printcompraremota\";",
                    "    var request = {};",
                    "    request.method=tipocompra; request.params=[];",
                    "    request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "    request.params.push({\"name\":\"clavecompra\",\"value\":this.currentDataCompra.compra.numero});",
                    "    almacen.getApplication().loadData(request,function(response){",
                    "        ///if (tipocompra == \"printcompra\")",
                    "        almacen.getApplication().downloadCompra(currentController.currentDataCompra.compra.numero, tipocompra);",
                    "        currentController.limpiarCompra();",
                    "    });",
                    "",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "PrintCompra",
            "designerId": "976185e8-2684-4090-a14a-d9c9518e13b8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnTraspasos",
                "designer|targetType": "Ext.button.Button",
                "fn": "showVentanaTraspasos",
                "implHandler": [
                    " var wnd = Ext.create(\"almacen.view.panelcompras1\", {id:\"wndTraspasos\"});",
                    " wnd.parentController=this;",
                    " wnd.center();",
                    " wnd.show();        "
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "showVentanaTraspasos",
            "designerId": "c34ea35c-4afc-4a7e-900c-f5a0304dc40d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnConsultaTraspasos",
                "designer|targetType": "Ext.button.Button",
                "fn": "showConsultaTraspasos",
                "implHandler": [
                    " var wnd = Ext.create(\"almacen.view.DlgConsultaTraspasos\", {id:\"wndConsultaTraspasos\"});",
                    "wnd.parentController=this;",
                    "wnd.center();",
                    "wnd.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "showConsultaTraspasos",
            "designerId": "f48fca5d-9aa2-438d-b5c3-76a8d549fcd6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnShowPedidos",
                "designer|targetType": "Ext.button.Button",
                "fn": "showPedidos",
                "implHandler": [
                    "var wnd=Ext.create(\"almacen.view.DlgPedidos\", {id:\"wndRegistroPedidos\"});",
                    "wnd.parentController=this;",
                    "wnd.center();",
                    "wnd.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "showPedidos",
            "designerId": "440acc72-95c4-4165-8c30-1800825b1f61"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnImportarCompra",
                "designer|targetType": "Ext.button.Button",
                "fn": "showDialogImportarCompra",
                "implHandler": [
                    "var wnd = Ext.create(\"almacen.view.DlgUploadCompra\", {id:\"wndUploadCompra\"});",
                    "wnd.parentController=this;",
                    "wnd.center();",
                    "Ext.ComponentMgr.get(\"gridXml\").getStore().removeAll();",
                    "wnd.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "showDialogImportarCompra",
            "designerId": "db6c2b8c-f941-4c80-8f8d-b5a666311d80"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "validarTasas",
                "implHandler": [
                    "var retVal = true;",
                    "var impuestosCambiados = [];",
                    "for(var claveprod in window.AjustesRealizadosCompras){",
                    "    var prod = window.AjustesRealizadosCompras[claveprod];",
                    "    console.log(\"prod: \" + prod);",
                    "    var initial_value = prod.Initial_Value;",
                    "    console.log(\"initial_value: \" + initial_value);",
                    "    var new_value = prod.impuestoCambiadoValidacion;",
                    "    console.log(\"new_value: \" + new_value);",
                    "",
                    "    if (initial_value != new_value){ //Se esta cambiando el impuesto",
                    "        //se debe mostrar la ventana de contraseña del supervisor",
                    "        console.log(\"se cambian impuestos\");",
                    "        impuestosCambiados.push(prod);",
                    "    }",
                    "",
                    "}",
                    "",
                    "",
                    "if (impuestosCambiados.length > 0){",
                    "",
                    "    //return true",
                    "    var wnd = Ext.create(\"almacen.view.DlgExistenciaAlertaImpuestoCambiado\", {id:\"wndPreciosAlerta2\"});",
                    "    wnd.parentController=this;",
                    "    wnd.center();",
                    "    wnd.show();",
                    "    Ext.ComponentMgr.get(\"gridProductosTasas\").getStore().loadData(impuestosCambiados);",
                    "    return false;",
                    "}else {",
                    "    return true;",
                    "}",
                    ""
                ]
            },
            "name": "validarTasas",
            "designerId": "66bd6062-8f18-4fdf-bd3e-14290d92a23a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#pagarCompra",
                "designer|targetType": "Ext.button.Button",
                "fn": "InitializeEnvironmentCompras",
                "implHandler": [
                    "window.AjustesRealizadosCompras = {};"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "name": "InitializeEnvironmentCompras",
            "designerId": "dc6f8459-31ab-4595-8b59-908db9f1fb70"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "AplicarRetenciones",
                "implHandler": [
                    "",
                    "var totalretencionesIVA = Ext.ComponentMgr.get(\"totalRetencionesIVA\").getValue();",
                    "console.log(totalretencionesIVA);",
                    "",
                    "var totalretencionesISR = Ext.ComponentMgr.get(\"totalRetencionesISR\").getValue();",
                    "console.log(totalretencionesISR);",
                    "",
                    "var totalretencionesIEPS = Ext.ComponentMgr.get(\"totalRetencionesIEPS\").getValue();",
                    "console.log(totalretencionesIEPS);",
                    "",
                    "var totalretenciones = totalretencionesIVA + totalretencionesISR + totalretencionesIEPS;",
                    "",
                    "Ext.ComponentMgr.get(\"totalRetencionesValue\").setValue(totalretenciones);",
                    "",
                    "//var totalretenciones = Ext.ComponentMgr.get(\"totalRetencionesValue\").getValue();",
                    "totalretenciones = totalretenciones ? totalretenciones : 0;",
                    "if(totalretenciones >= 0){",
                    "    console.log(totalretenciones);",
                    "    var grid = Ext.ComponentMgr.get(\"gridproductos\");",
                    "    var record = grid.getStore().getAt(0);",
                    "    if(record){",
                    "        record.beginEdit();",
                    "        record.set(\"importe\", record.get(\"importe\"));",
                    "        record.endEdit();",
                    "        record.commit();",
                    "    }",
                    "} else {",
                    "    Ext.ComponentMgr.get(\"totalRetencionesValue\").setValue(0);",
                    "    this.AplicarRetenciones();",
                    "}"
                ]
            },
            "name": "AplicarRetenciones",
            "designerId": "79ef840b-0e0f-45c3-b904-49b4665278c3"
        }
    ]
}