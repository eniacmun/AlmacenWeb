{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "currentCompra": "`null`",
        "designer|userAlias": "panelcompras1",
        "designer|userClassName": "panelcomprasViewController1"
    },
    "name": "panelcomprasViewController1",
    "configAlternates": {
        "currentDataCompra": "object"
    },
    "designerId": "f22156a2-58bc-48ea-b055-8b19c51820a6",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "currentCompra",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "currentDataCompra",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboProveedor1",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "loadProveedores",
                "implHandler": [
                    "var request = new Object(); request.method=\"sucursales\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    component.getStore().loadData(response.proveedores);",
                    "    component.getStore().sort('nombreProveedor','ASC');",
                    "    //Ext.ComponentMgr.get(\"comboProveedor\").getPicker().loadMask.hide();",
                    "",
                    "",
                    "});"
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "name": "loadProveedores",
            "designerId": "ecce9043-a0e4-4e3c-bdd0-3347845ea556"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboProveedor1",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "filtraProveedor",
                "implHandler": [
                    "         queryPlan.query = new RegExp(queryPlan.query, 'i');",
                    "         queryPlan.forceAll = true;"
                ],
                "name": "beforequery",
                "scope": "me"
            },
            "name": "filtraProveedor",
            "designerId": "4f9cfeca-5ac8-4ce2-8c7b-350d7b68e0dd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboTipoPago",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "loadTipoPago",
                "implHandler": [
                    "             var request = new Object(); request.method=\"tipospago\"; request.params=[];",
                    "                            request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "                            almacen.getApplication().loadData(request,function(response){",
                    "                                component.getStore().loadData(response.items);",
                    "                                component.getStore().sort('nombreProveedor','ASC');",
                    "                                component.getStore().fireEvent('load', component.getStore(), [], true, {});",
                    "                                //Ext.ComponentMgr.get(\"comboTipoPago\").getPicker().loadMask.hide();",
                    "",
                    "                            });"
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "name": "loadTipoPago",
            "designerId": "1e25fb22-8a77-4707-a0a7-f23ad1f54539"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboClasificacion1",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "loadClasificacion",
                "implHandler": [
                    "                            var request = new Object(); request.method=\"clasificaciones\"; request.params=[];",
                    "                            request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "                            almacen.getApplication().loadData(request,function(response){",
                    "                            component.getStore().loadData(response.productos);",
                    "                            component.getStore().sort('nombreproducto','ASC');",
                    "                                //Ext.ComponentMgr.get(\"comboClasificacion\").getPicker().loadMask.hide();",
                    "",
                    "                            });"
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "name": "loadClasificacion",
            "designerId": "71b2485e-8236-433c-8892-f250fb2aab08"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboClasificacion1",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "loadComboProductos",
                "implHandler": [
                    "var request = new Object(); request.method=\"productoscompra\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId},",
                    "                    {\"name\":\"clasificacion\",\"value\":combo.getValue()});",
                    "almacen.getApplication().loadData(request,function(response){",
                    "    Ext.ComponentMgr.get(\"comboProductos1\").getStore().loadData(response.productos);",
                    "    Ext.ComponentMgr.get(\"comboProductos1\").getStore().sort('nombreproducto','ASC');",
                    "    //Ext.ComponentMgr.get(\"comboProducto\").getPicker().loadMask.hide();",
                    "",
                    "});"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "loadComboProductos",
            "designerId": "49940fcd-2b9b-492c-95d2-4d68e03948c9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboProveedor1",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "loadProductosProveedores",
                "implHandler": [
                    "        var request = new Object(); request.method=\"productoscompra\"; request.params=[];",
                    "                                request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId},",
                    "                                {\"name\":\"proveedor\",\"value\":combo.getValue()});",
                    "                                almacen.getApplication().loadData(request,function(response){",
                    "                                    Ext.ComponentMgr.get(\"gridproductos1\").getStore().removeAll();",
                    "                                    Ext.ComponentMgr.get(\"gridproductos1\").getStore().loadData(response.productos);",
                    "                                    Ext.ComponentMgr.get(\"gridproductos1\").getStore().sort('nombreproducto','ASC');",
                    "                                });"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "loadProductosProveedores",
            "designerId": "3de044a7-12f0-44fd-b078-40de9348eddc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboClasificacion1",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "filtraClasificaciones",
                "implHandler": [
                    "                queryPlan.query = new RegExp(queryPlan.query, 'i');",
                    "                 queryPlan.forceAll = true;"
                ],
                "name": "beforequery",
                "scope": "me"
            },
            "name": "filtraClasificaciones",
            "designerId": "86a19626-bba3-4cbf-af96-f419cf201b52"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#comboProductos",
                "designer|targetType": "Ext.form.field.Tag",
                "fn": "filtraProductos",
                "implHandler": [
                    "queryPlan.query = new RegExp(queryPlan.query, 'i');",
                    "                 queryPlan.forceAll = true;"
                ],
                "name": "beforequery",
                "scope": "me"
            },
            "name": "filtraProductos",
            "designerId": "b8adfc09-2106-45f8-b75c-15088f1a72f8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#addProductoCompra1",
                "designer|targetType": "Ext.button.Button",
                "fn": "agregaProductos",
                "implHandler": [
                    "var recs = Ext.ComponentMgr.get(\"comboProductos1\").getValueRecords();",
                    "console.log(recs);",
                    "var recsAgregar = [];",
                    "for (var i = 0;i < recs.length;i++){",
                    "    console.log(\"Count del store: \" + Ext.ComponentMgr.get(\"gridproductos1\").getStore().getCount());",
                    "    if (Ext.ComponentMgr.get(\"gridproductos1\").getStore().getCount() > 0){",
                    "        var agrega = true;",
                    "        Ext.ComponentMgr.get(\"gridproductos1\").getStore().each(function(record, id){",
                    "",
                    "            console.log(\"comparando \" + recs[i].get(\"claveproducto\") + \" con \" + record.get(\"claveproducto\") + \" = \"+ record.get(\"claveproducto\").indexOf(recs[i].get(\"claveproducto\")) < 0);",
                    "            if (record.get(\"claveproducto\") == recs[i].get(\"claveproducto\")){",
                    "                agrega=false;",
                    "            }",
                    "        });",
                    "        if (agrega){",
                    "            recsAgregar.push(recs[i]);",
                    "            Ext.ComponentMgr.get(\"gridproductos1\").getStore().loadData([recs[i]], true);",
                    "        }",
                    "    }else{",
                    "",
                    "",
                    "        recsAgregar.push(recs[i]);",
                    "        Ext.ComponentMgr.get(\"gridproductos1\").getStore().loadData([recs[i]], true);",
                    "    }",
                    "",
                    "}",
                    "Ext.ComponentMgr.get(\"gridproductos1\").getStore().sort('nombreproducto','ASC');",
                    "//Ext.ComponentMgr.get(\"gridproductos\").getStore().loadData(recsAgregar, true);",
                    "Ext.ComponentMgr.get(\"comboProductos1\").records = [];",
                    "Ext.ComponentMgr.get(\"comboProductos1\").clearValue();",
                    "//Ext.ComponentMgr.get(\"gridproductos\").getStore().sort('nombreproducto','ASC');"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "agregaProductos",
            "designerId": "ec3af37f-59f6-4d37-a559-d6966d2917b3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "calculaImportesTotales",
                "implHandler": [
                    " var Iva = 0.0;",
                    "            \tvar Descuento = 0.0;",
                    "            \tvar PrecioU = 0.0;",
                    "            \tvar Cantidad = 0.0;",
                    "            \tvar Total = 0.0;",
                    "            \tvar SubTotal = 0.0;",
                    "            \tvar IvaAplicado = 0.0;",
                    "            \tvar DescuentoAplicado = 0.0;",
                    "            \t//var TotalGeneral = 0.0;",
                    "",
                    "                PrecioU = record.get(\"costoUnitario\");",
                    "                Cantidad = record.get(\"cantidad\");",
                    "                Descuento = record.get(\"Descuento\");",
                    "                Iva = record.get(\"Impuesto\");",
                    "               /* console.log(\"precio \" + PrecioU);",
                    "                console.log(\"cantidad \" + Cantidad);",
                    "                console.log(\"descuento \" + Descuento);",
                    "                console.log(\"iva \" + Iva);*/",
                    "",
                    "                SubTotal = (Cantidad  * PrecioU);",
                    "                DescuentoAplicado = (SubTotal * (Descuento / 100));",
                    "                IvaAplicado = ((SubTotal - DescuentoAplicado) * (Iva / 100));",
                    "                Total = (SubTotal - DescuentoAplicado) + IvaAplicado;",
                    "                var ProporcionAplicar = 0.0;",
                    "                ProporcionAplicar = record.get(\"Proporcion\") * Cantidad;",
                    "                record.beginEdit();",
                    "                record.set(\"importe\", Total);",
                    "                record.set(\"ProporcionAplicar\", ProporcionAplicar);",
                    "                record.endEdit();",
                    "                record.commit();",
                    "                console.log(\"Total  \" + Total);"
                ]
            },
            "name": "calculaImportesTotales",
            "designerId": "f74b0219-20d9-49f3-8d00-3320884c04af"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#descuentoCantidadValue",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaDescuentoCantidad",
                "implHandler": [
                    "if (e.getKey()==Ext.event.Event.ENTER){",
                    "    this.AplicarDescuento(true);",
                    "}"
                ],
                "name": "keyup",
                "scope": "me"
            },
            "name": "aplicaDescuentoCantidad",
            "designerId": "b3ec3517-a21e-4197-bede-0f752b8e327e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "monto"
                ],
                "fn": "AplicarDescuento",
                "implHandler": [
                    " var cantidad =0.0;",
                    "var currentContext = this;",
                    "        var store =  Ext.ComponentMgr.get(\"gridproductos\").getStore();",
                    "                if (monto){",
                    "                    cantidad=Ext.ComponentMgr.get(\"descuentoCantidadValue\").getValue();",
                    "                    if (!(cantidad > 0)){",
                    "                        Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setValue(\"0\");",
                    "                        store.each(function(record,id){",
                    "                            if (record.get(\"cantidad\") > 0){",
                    "                                record.set(\"Descuento\",0);",
                    "                                currentContext.calculaImportesTotales(record);",
                    "                             }",
                    "                        });",
                    "                        return;",
                    "                    }",
                    "                }else{",
                    "                    cantidad=Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").getValue();",
                    "                    if (!(cantidad > 0)) {",
                    "                        Ext.ComponentMgr.get(\"descuentoCantidadValue\").setValue(\"0\");",
                    "                        store.each(function(record,id){",
                    "                            if (record.get(\"cantidad\") > 0){",
                    "                                record.set(\"Descuento\",0);",
                    "                                currentContext.calculaImportesTotales(record);",
                    "                             }",
                    "                        });",
                    "                        return;",
                    "                    }",
                    "                }",
                    "",
                    "",
                    "                var TotalGeneral = 0.0;",
                    "                var PctjeDescuento = 0.0;",
                    "                var MontoDescuento = 0.0;",
                    "                ",
                    "                store.each(function(record,id){",
                    "                    if (record.get(\"cantidad\") > 0){",
                    "                        record.set(\"Descuento\",0);",
                    "                        currentContext.calculaImportesTotales(record);",
                    "                     }",
                    "                });",
                    "",
                    "",
                    "                store.each(function(record,id){",
                    "                    //TotalGeneral+=(record.get(\"cantidad\") * record.get(\"costoUnitario\"));",
                    "                    TotalGeneral+=(record.get(\"importe\"));",
                    "                });",
                    "",
                    "                console.log(\"TotalGeneral \" + TotalGeneral);",
                    "                console.log(\"monto \" + monto);",
                    "                console.log(\"cantidad \" + cantidad);",
                    "                if (TotalGeneral > 0){",
                    "                    if (monto){",
                    "",
                    "",
                    "                        MontoDescuento = cantidad;",
                    "                        MontoDescuento = MontoDescuento > TotalGeneral ? Total : MontoDescuento;",
                    "                        PctjeDescuento = (MontoDescuento / TotalGeneral) * 100;",
                    "                    }else{",
                    "",
                    "                        PctjeDescuento = cantidad;",
                    "                        PctjeDescuento = PctjeDescuento > 100 ? 100 : PctjeDescuento;",
                    "                  MontoDescuento = ((PctjeDescuento * TotalGeneral) / 100);",
                    "                    }",
                    "",
                    "                     Ext.ComponentMgr.get(\"descuentoCantidadValue\").setValue(MontoDescuento);",
                    "                     Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setValue(PctjeDescuento);",
                    "                     store.each(function(record,id){",
                    "                     if (record.get(\"cantidad\") > 0){",
                    "                         record.set(\"Descuento\",PctjeDescuento);",
                    "                         currentContext.calculaImportesTotales(record);",
                    "                     }",
                    "                     });",
                    "",
                    "",
                    "                }"
                ]
            },
            "name": "AplicarDescuento",
            "designerId": "f92364d7-e796-4b1f-a783-43a97302213e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#descuentoCantidadValue",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaDescuentoCantidadBlur",
                "implHandler": [
                    "      this.AplicarDescuento(true);"
                ],
                "name": "blur",
                "scope": "me"
            },
            "name": "aplicaDescuentoCantidadBlur",
            "designerId": "d850bb49-f19a-4817-9467-ee238e795f1c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#descuentoPorcentajeValue",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaDescuentoPorcentaje",
                "implHandler": [
                    "                if (e.getKey()==Ext.event.Event.ENTER){",
                    "                        this.AplicarDescuento(false);",
                    "                    }"
                ],
                "name": "keyup",
                "scope": "me"
            },
            "name": "aplicaDescuentoPorcentaje",
            "designerId": "feaf923b-16f1-4de5-ab91-fddae2e6030e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#descuentoPorcentajeValue",
                "designer|targetType": "Ext.form.field.Number",
                "fn": "aplicaDescuentoPorcentajeBlur",
                "implHandler": [
                    "         this.AplicarDescuento(false);"
                ],
                "name": "blur",
                "scope": "me"
            },
            "name": "aplicaDescuentoPorcentajeBlur",
            "designerId": "c88404b9-a457-4b72-8d58-e21563c6694e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tipoPago"
                ],
                "fn": "validaGuardarCompra",
                "implHandler": [
                    "var ErrMsg=\"\";",
                    "if (!Ext.ComponentMgr.get(\"comboProveedor1\").isValid()){",
                    "    ErrMsg+=\" Seleccione un proveedor\";",
                    "}",
                    "var isDirty=false;",
                    "var recsAgregar = [];",
                    "Ext.ComponentMgr.get(\"gridproductos1\").getStore().each(function(record,id){",
                    "if (record.get(\"cantidad\") > 0){",
                    "    isDirty=true;",
                    "    if( (record.get(\"costominimo\") > 0||record.get(\"costomaximo\") > 0) && record.get(\"costoTraspaso\") === 0){",
                    "        if(record.get(\"costoUnitario\") < record.get(\"costominimo\")||record.get(\"costoUnitario\") > record.get(\"costomaximo\")){",
                    "            recsAgregar.push(record);",
                    "          }",
                    "         }",
                    "        }",
                    "});",
                    "if (!isDirty){",
                    "    ErrMsg+=\"\\nCapture por lo menos un producto\";",
                    "}",
                    "",
                    "if (ErrMsg > \" \"){",
                    "    Ext.Msg.show({",
                    "    title:'Verificar',",
                    "    message: ErrMsg,",
                    "    buttons: Ext.Msg.OK,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(btn) {",
                    "",
                    "    }});",
                    "    return;",
                    "",
                    "}",
                    "if (recsAgregar.length > 0){",
                    "//mostramos la validacion",
                    "    var wnd = Ext.create(\"almacen.view.DlgPreciosAlerta\");",
                    "    wnd.parentController=this;",
                    "    wnd.center();",
                    "    wnd.show();",
                    "    Ext.ComponentMgr.get(\"gridProductosPrecios\").getStore().loadData(recsAgregar);",
                    "}else{",
                    "    this.guardaCompra(tipoPago);",
                    "}",
                    "",
                    ""
                ]
            },
            "name": "validaGuardarCompra",
            "designerId": "b3d7db15-12c7-49b8-95d7-0fcc03e74a9b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tipoPago"
                ],
                "fn": "guardaCompra",
                "implHandler": [
                    "var factura=0;",
                    "var currentController=this;",
                    "var responseGuardaCompra = {};",
                    "var responseCompra = {};",
                    "var store =  Ext.ComponentMgr.get(\"gridproductos1\").getStore();",
                    "",
                    "",
                    "var TotalGeneral = 0.0;",
                    "var productosData = [];",
                    "",
                    "store.each(function(record,id){",
                    "    if (record.get(\"cantidad\") > 0){",
                    "        currentProducto = {};",
                    "        currentProducto.Impuesto = record.get(\"Impuesto\");",
                    "        currentProducto.costoUnitario = record.get(\"costoUnitario\");",
                    "        currentProducto.nombreproducto = record.get(\"nombreproducto\");",
                    "        currentProducto.cantidad = record.get(\"cantidad\");",
                    "        currentProducto.Proporcion = record.get(\"Proporcion\");",
                    "        currentProducto.importe = record.get(\"importe\");",
                    "        currentProducto.Descuento = record.get(\"Descuento\");",
                    "        currentProducto.unidad = record.get(\"unidad\");",
                    "        currentProducto.ProporcionAplicar = record.get(\"ProporcionAplicar\");",
                    "        currentProducto.minimo = record.get(\"minimo\");",
                    "        currentProducto.maximo = record.get(\"maximo\");",
                    "        currentProducto.costomaximo = record.get(\"costomaximo\");",
                    "        currentProducto.costominimo = record.get(\"costominimo\");",
                    "        currentProducto.claveproducto=record.get(\"claveproducto\");",
                    "        TotalGeneral+=currentProducto.importe;",
                    "        productosData.push(currentProducto);",
                    "    }",
                    "});",
                    "",
                    "responseCompra.Total=TotalGeneral;",
                    "responseCompra.claveproveedor=Ext.ComponentMgr.get(\"comboProveedor1\").getValue();",
                    "responseCompra.tipopago=0;//Ext.ComponentMgr.get(\"comboTipoPago\").getValue();",
                    "responseCompra.numeroFactura=factura;",
                    "responseCompra.tipopago = tipoPago;",
                    "responseGuardaCompra.productos=productosData;",
                    "responseGuardaCompra.compra=responseCompra;",
                    "",
                    "var currentController = this;",
                    "var request = new Object(); request.method=\"traspasos\"; request.params=[];",
                    "request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "request.params.push({\"name\":\"COMPRA\",\"value\":Ext.encode(responseGuardaCompra)});",
                    "",
                    "almacen.getApplication().loadData(request,function(response){",
                    "",
                    "    console.log(response);",
                    "",
                    "    if(response.filepath){",
                    "        if(response.filepath.length == 1){",
                    "            var curentFilepath = response.filepath[0];",
                    "            console.log(\"Archivo a descargar: \" + curentFilepath);",
                    "            if(curentFilepath !== \"\"){",
                    "                Ext.Msg.alert(\"Mensaje\",\"Impresión correcta, se descargará su archivo.\");",
                    "                almacen.getApplication().downloadPedido(curentFilepath, 0); // 0 PDF 1 Excel 2 Ambos",
                    "            }else{",
                    "                Ext.Msg.alert(\"Mensaje\",\"No se pudo generar su archivo. Reintente\");",
                    "            }",
                    "        }/*else{",
                    "                               Ext.Msg.alert(\"Mensaje\",\"No se pudo generar su archivo.\");",
                    "                           }*/",
                    "    }",
                    "",
                    "    currentController.limpiarCompra();",
                    "",
                    "}, function(response){",
                    "    if (!response.registros)",
                    "        Ext.Msg.alert('',response.msg);",
                    "    else",
                    "        currentController.despliegaErrorProductoTraspasos(response.registros);",
                    "",
                    "});",
                    ""
                ]
            },
            "name": "guardaCompra",
            "designerId": "2e3767ca-8e86-44e5-bfef-a700b3520cf9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "limpiarCompra",
                "implHandler": [
                    "this.currentDataCompra=null;",
                    "Ext.ComponentMgr.get(\"lblNoCompra1\").setText(\" \");",
                    "        \t\t  Ext.ComponentMgr.get(\"addProductoCompra1\").setDisabled(false);",
                    "        \t\t  Ext.ComponentMgr.get(\"cleanProductoCompra1\").setDisabled(false);",
                    "        \t\t  //Ext.ComponentMgr.get(\"comboNoFactura1\").setReadOnly(false);",
                    "        \t\t  Ext.ComponentMgr.get(\"comboProveedor1\").setReadOnly(false);",
                    "        \t\t  //Ext.ComponentMgr.get(\"comboTipoPago1\").setReadOnly(false);",
                    "        \t\t  //Ext.ComponentMgr.get(\"gridproductos1\").setReadOnly(false);",
                    "        \t\t  /*",
                    "                  Ext.ComponentMgr.get(\"descuentoCantidad1\").setDisabled(false);",
                    "        \t\t  Ext.ComponentMgr.get(\"descuentoCantidadValue1\").setReadOnly(false);",
                    "        \t\t  Ext.ComponentMgr.get(\"descuentoPorcentaje1\").setDisabled(false);",
                    "        \t\t  Ext.ComponentMgr.get(\"descuentoPorcentajeValue1\").setReadOnly(false);",
                    "                  */",
                    "        \t\t  Ext.ComponentMgr.get(\"pagarCompra1\").setDisabled(false);",
                    "        \t\t  Ext.ComponentMgr.get(\"cancelarCompra1\").setDisabled(false);",
                    "        \t\t  //Ext.ComponentMgr.get(\"comboNoFactura1\").setValue(\"\");",
                    "        \t\t  Ext.ComponentMgr.get(\"comboProveedor1\").clearValue();",
                    "        \t\t  //Ext.ComponentMgr.get(\"comboTipoPago1\").clearValue();",
                    "        \t\t  Ext.ComponentMgr.get(\"gridproductos1\").getStore().removeAll();",
                    "",
                    "        \t\t  //Ext.ComponentMgr.get(\"descuentoCantidadValue1\").setValue(\"\");",
                    "        \t\t  //Ext.ComponentMgr.get(\"descuentoPorcentajeValue1\").setValue(\"\");",
                    "        \t\t  Ext.ComponentMgr.get(\"comboProductos1\").clearValue();",
                    "        \t\t  Ext.ComponentMgr.get(\"comboClasificacion1\").clearValue();",
                    "        \t\t  Ext.ComponentMgr.get(\"comboProductos1\").setReadOnly(false);",
                    "        \t\t  Ext.ComponentMgr.get(\"comboClasificacion1\").setReadOnly(false);",
                    "                  Ext.ComponentMgr.get(\"lblNoCompra1\").setText('');",
                    "                  this.readOnly = false;",
                    "                  this.currentCompra=0;"
                ]
            },
            "name": "limpiarCompra",
            "designerId": "3993c740-c4b0-4b60-814f-dc0dd4af955d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "data"
                ],
                "fn": "cargarCompra",
                "implHandler": [
                    "console.log(data);",
                    "Ext.ComponentMgr.get(\"addProductoCompra\").setDisabled(true);",
                    "// Ext.ComponentMgr.get(\"cleanProductoCompra\").setDisabled(true);",
                    "Ext.ComponentMgr.get(\"comboNoFactura\").setReadOnly(!data.compra.solofolio);",
                    "Ext.ComponentMgr.get(\"comboProveedor\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"comboTipoPago\").setReadOnly(true);",
                    "//Ext.ComponentMgr.get(\"gridproductos\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"descuentoCantidad\").setDisabled(true);",
                    "Ext.ComponentMgr.get(\"descuentoCantidadValue\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"descuentoPorcentaje\").setDisabled(true);",
                    "Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"pagarCompra\").setDisabled(!data.compra.solofolio);",
                    "",
                    "Ext.ComponentMgr.get(\"cancelarCompra\").setDisabled(data.compra.estado<0);",
                    "if(!data.compra.puedeCancelar)Ext.ComponentMgr.get(\"cancelarCompra\").setDisabled(true);",
                    "",
                    "Ext.ComponentMgr.get(\"comboNoFactura\").setValue(data.compra.factura);",
                    "Ext.ComponentMgr.get(\"comboProveedor\").setValue(data.compra.proveedor);",
                    "Ext.ComponentMgr.get(\"comboTipoPago\").setValue(\"\"+data.compra.pago);",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().removeAll();",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().loadData(data.productos);",
                    "Ext.ComponentMgr.get(\"gridproductos\").getStore().sort('nombreproducto','ASC');",
                    "Ext.ComponentMgr.get(\"descuentoCantidadValue\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"comboProductos\").clearValue();",
                    "Ext.ComponentMgr.get(\"comboClasificacion\").clearValue();",
                    "Ext.ComponentMgr.get(\"comboProductos\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"comboClasificacion\").setReadOnly(true);",
                    "Ext.ComponentMgr.get(\"lblNoCompra\").update('<font color=\"white\">Compra no:' + data.compra.numero + '</font>');",
                    "this.currentCompra=data.compra.numero;",
                    "this.currentDataCompra = data;",
                    "this.readOnly = true;"
                ]
            },
            "name": "cargarCompra",
            "designerId": "b5097cb1-291c-4632-864a-e2c05f9860c1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnBuscarCompra1",
                "designer|targetType": "Ext.button.Button",
                "fn": "buscaCompra",
                "implHandler": [
                    "var wnd = Ext.create(\"almacen.view.DlgConsultaTraspasos\", {id:\"wndConsultaTraspasos\"});",
                    "wnd.parentController=this;",
                    "wnd.center();",
                    "wnd.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "buscaCompra",
            "designerId": "86b8afa9-3201-45de-814b-1b47c8287525"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#cleanProductoCompra1",
                "designer|targetType": "Ext.button.Button",
                "fn": "Limpiar2Click",
                "implHandler": [
                    "            this.limpiarCompra();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "Limpiar2Click",
            "designerId": "5fa3ef41-401a-4114-af16-214ef86890b1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#pagarCompra1",
                "designer|targetType": "Ext.button.Button",
                "fn": "guardarCompraClick",
                "implHandler": [
                    "var controller = this;",
                    "",
                    "if(almacen.getApplication().currentSession.habilitaTraspasoEfectivo){",
                    "    Ext.MessageBox.show({",
                    "        title:'Confirmación',",
                    "        message: '¿Desea continuar con el traspaso a Crédito o pasar a Efectivo?',",
                    "        buttons: Ext.Msg.YESNOCANCEL,",
                    "        buttonText: {",
                    "            yes: 'Continuar a Crédito',",
                    "            no: 'Pasar a Efectivo',",
                    "            cancel: 'Cancelar'",
                    "        },",
                    "        fn: function(btn){",
                    "            if (btn === 'yes'){",
                    "                console.log(\"Cobrando a crédito\");",
                    "                controller.validaGuardarCompra(14);",
                    "                return;",
                    "            }",
                    "            if (btn === 'no'){",
                    "                console.log(\"Pasando a Efectivo\");",
                    "                controller.validaGuardarCompra(15);",
                    "                return;",
                    "            }",
                    "            if (btn === 'cancel'){",
                    "                return;",
                    "            }",
                    "        }",
                    "    });   ",
                    "} else {",
                    "    controller.validaGuardarCompra(14);",
                    "}",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "guardarCompraClick",
            "designerId": "885c45b7-c859-4bc9-95fc-e7b6f120f540"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#cancelarCompra1",
                "designer|targetType": "Ext.button.Button",
                "fn": "CancelarCompraClick",
                "implHandler": [
                    " /*if (this.currentCompra > 0){",
                    "     var currentController=this;",
                    "     var request = new Object(); request.method=\"cancelarcompras\"; request.params=[];",
                    "     request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId},",
                    "     {\"name\":\"COMPRA\",\"value\":this.currentCompra});",
                    "     almacen.getApplication().loadData(request,function(response){",
                    "         currentController.limpiarCompra();",
                    "     });",
                    "     }*/",
                    "var winTraspasos = Ext.WindowManager.get(\"wndTraspasos\");",
                    "winTraspasos.close();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "CancelarCompraClick",
            "designerId": "4d154e02-e94e-4cf5-a241-983c842d6cae"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "CalculaImporteUnitario",
                "implHandler": [
                    "var Descuento = 0.0;",
                    "var PrecioU = 0.0;",
                    "var Cantidad = 0.0;",
                    "var Total = 0.0;",
                    "var SubTotal = 0.0;",
                    "var Iva = 0.0;",
                    "var DescuentoAplicado = 0.0;",
                    "var ImporteTotal=0.0;",
                    "//var TotalGeneral = 0.0;",
                    "",
                    "PrecioU = record.get(\"costoUnitario\");",
                    "Cantidad = record.get(\"cantidad\");",
                    "Descuento = record.get(\"Descuento\");",
                    "Iva = record.get(\"Impuesto\");",
                    "Total = record.get(\"importe\");",
                    "",
                    "if (Descuento >= 100)",
                    "        Descuento=0.0;",
                    "",
                    "Ext.ComponentMgr.get(\"descuentoCantidadValue\").setValue(\"\");",
                    "Ext.ComponentMgr.get(\"descuentoPorcentajeValue\").setValue(\"\");",
                    "PrecioU=((Total/(1+(Iva/100)))/(1-(Descuento/100)))/Cantidad;//formula para calculo del costo unitarioo",
                    "record.beginEdit();",
                    "record.set(\"costoUnitario\", PrecioU);",
                    "record.set(\"Descuento\", Descuento);",
                    "",
                    "//record.set(\"ProporcionAplicar\", ProporcionAplicar);",
                    "record.endEdit();",
                    "record.commit();"
                ]
            },
            "name": "CalculaImporteUnitario",
            "designerId": "b4836abb-778a-4411-8d5d-0df9b9a04dbd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnHistorico",
                "designer|targetType": "Ext.button.Button",
                "fn": "buscarRegistrosHistoricos",
                "implHandler": [
                    "var wnd = Ext.create(\"almacen.view.DlgBusquedaCompras1\", {id:\"wndBusquedaCompras1\"});",
                    "wnd.parentController=this;",
                    "wnd.center();",
                    "wnd.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "buscarRegistrosHistoricos",
            "designerId": "11f172e8-64c9-45ee-8005-8393a4249861"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#btnPrintCompra",
                "designer|targetType": "Ext.button.Button",
                "fn": "PrintCompra",
                "implHandler": [
                    "var currentController = this;",
                    "if (this.currentDataCompra != null){",
                    "   var tipocompra = \"printcompra\";",
                    "    if (!this.currentDataCompra.compra.puedeCancelar)tipocompra=\"printcompraremota\";",
                    "    var request = {};",
                    "    request.method=tipocompra; request.params=[];",
                    "    request.params.push({\"name\":\"imei\",\"value\":almacen.getApplication().SessionId});",
                    "    request.params.push({\"name\":\"clavecompra\",\"value\":this.currentDataCompra.compra.numero});",
                    "    almacen.getApplication().loadData(request,function(response){",
                    "            currentController.limpiarCompra();",
                    "    });",
                    "    ",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "PrintCompra",
            "designerId": "2000b6f1-d3f7-478a-a570-9ce7f863451a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "data"
                ],
                "fn": "despliegaErrorProductoTraspasos",
                "implHandler": [
                    " var wnd = Ext.create(\"almacen.view.DlgValidacionProdCompra\");",
                    "    wnd.parentController=this;",
                    "    wnd.center();",
                    "    wnd.show();",
                    "    Ext.ComponentMgr.get(\"gridValidacionProdCompra\").getStore().loadData(data);"
                ]
            },
            "name": "despliegaErrorProductoTraspasos",
            "designerId": "9c90fdca-6073-4155-8e72-e886119fff2e"
        }
    ]
}